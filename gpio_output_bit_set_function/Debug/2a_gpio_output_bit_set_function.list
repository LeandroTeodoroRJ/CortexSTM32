
2a_gpio_output_bit_set_function.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000058b  00000000  00000000  0001043f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f3  00000000  00000000  000109ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000052  00000000  00000000  00010c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000de86  00000000  00000000  00010c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a78  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fee4  00000000  00000000  0001f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000010c  00000000  00000000  0006f474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0006f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003ac 	.word	0x080003ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003ac 	.word	0x080003ac

080001d8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d106      	bne.n	80001f6 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 80001f4:	e030      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <enable_gpio_clock+0x8c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <enable_gpio_clock+0x8c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000208:	e026      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d106      	bne.n	800021e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <enable_gpio_clock+0x8c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <enable_gpio_clock+0x8c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021c:	e01c      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d106      	bne.n	8000232 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <enable_gpio_clock+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <enable_gpio_clock+0x8c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e012      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d106      	bne.n	8000246 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <enable_gpio_clock+0x8c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <enable_gpio_clock+0x8c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000244:	e008      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b05      	cmp	r3, #5
 800024a:	d105      	bne.n	8000258 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <enable_gpio_clock+0x8c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <enable_gpio_clock+0x8c>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ (11 << pin_number*2);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	210b      	movs	r1, #11
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	401a      	ands	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <gpio_bit_toggle>:

void gpio_load_value(GPIO_TypeDef *pGPIO, uint32_t value){
	pGPIO->ODR = value;
}

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	6039      	str	r1, [r7, #0]
	pGPIO->ODR ^= (1 << pin_number);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	2101      	movs	r1, #1
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	405a      	eors	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	615a      	str	r2, [r3, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
	...

080002d4 <main>:
#define LED_PIN		PIN5
#define SLOW_TIME	1000000
#define FAST_TIME	100000


int main(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	// Enable clock
	enable_gpio_clock(PORT_A);
 80002da:	2000      	movs	r0, #0
 80002dc:	f7ff ff7c 	bl	80001d8 <enable_gpio_clock>

	// Configure Pin
	gpio_config(
 80002e0:	2205      	movs	r2, #5
 80002e2:	2101      	movs	r1, #1
 80002e4:	4808      	ldr	r0, [pc, #32]	; (8000308 <main+0x34>)
 80002e6:	f7ff ffbf 	bl	8000268 <gpio_config>
			OUTPUT_MODE,
			PIN5
			);

	while(1){
		gpio_bit_toggle(GPIOA, LED_PIN);
 80002ea:	2105      	movs	r1, #5
 80002ec:	4806      	ldr	r0, [pc, #24]	; (8000308 <main+0x34>)
 80002ee:	f7ff ffdc 	bl	80002aa <gpio_bit_toggle>
		for (int i=0; i < FAST_TIME; i++){}
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	e002      	b.n	80002fe <main+0x2a>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a02      	ldr	r2, [pc, #8]	; (800030c <main+0x38>)
 8000302:	4293      	cmp	r3, r2
 8000304:	ddf8      	ble.n	80002f8 <main+0x24>
		gpio_bit_toggle(GPIOA, LED_PIN);
 8000306:	e7f0      	b.n	80002ea <main+0x16>
 8000308:	40020000 	.word	0x40020000
 800030c:	0001869f 	.word	0x0001869f

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 f811 	bl	8000364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffc7 	bl	80002d4 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <__libc_init_array>:
 8000364:	b570      	push	{r4, r5, r6, lr}
 8000366:	4d0d      	ldr	r5, [pc, #52]	; (800039c <__libc_init_array+0x38>)
 8000368:	4c0d      	ldr	r4, [pc, #52]	; (80003a0 <__libc_init_array+0x3c>)
 800036a:	1b64      	subs	r4, r4, r5
 800036c:	10a4      	asrs	r4, r4, #2
 800036e:	2600      	movs	r6, #0
 8000370:	42a6      	cmp	r6, r4
 8000372:	d109      	bne.n	8000388 <__libc_init_array+0x24>
 8000374:	4d0b      	ldr	r5, [pc, #44]	; (80003a4 <__libc_init_array+0x40>)
 8000376:	4c0c      	ldr	r4, [pc, #48]	; (80003a8 <__libc_init_array+0x44>)
 8000378:	f000 f818 	bl	80003ac <_init>
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	2600      	movs	r6, #0
 8000382:	42a6      	cmp	r6, r4
 8000384:	d105      	bne.n	8000392 <__libc_init_array+0x2e>
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f855 3b04 	ldr.w	r3, [r5], #4
 800038c:	4798      	blx	r3
 800038e:	3601      	adds	r6, #1
 8000390:	e7ee      	b.n	8000370 <__libc_init_array+0xc>
 8000392:	f855 3b04 	ldr.w	r3, [r5], #4
 8000396:	4798      	blx	r3
 8000398:	3601      	adds	r6, #1
 800039a:	e7f2      	b.n	8000382 <__libc_init_array+0x1e>
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c4 	.word	0x080003c4
 80003a4:	080003c4 	.word	0x080003c4
 80003a8:	080003c8 	.word	0x080003c8

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr
