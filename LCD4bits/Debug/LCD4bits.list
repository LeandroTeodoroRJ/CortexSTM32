
LCD4bits.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000540  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080006d8  080006d8  000106d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006e4  080006e4  000106ec  2**0
                  CONTENTS
  4 .ARM          00000000  080006e4  080006e4  000106ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e4  080006ec  000106ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e8  080006e8  000106e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080006ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080006ec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000106ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001071c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008cd  00000000  00000000  0001075f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000356  00000000  00000000  0001102c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00011388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a8  00000000  00000000  00011480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ee35  00000000  00000000  00011528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013d8  00000000  00000000  0002035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053ae0  00000000  00000000  00021735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000002c4  00000000  00000000  00075218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000754dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080006c0 	.word	0x080006c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080006c0 	.word	0x080006c0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d106      	bne.n	8000206 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001f8:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <enable_gpio_clock+0x8c>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a1d      	ldr	r2, [pc, #116]	; (8000274 <enable_gpio_clock+0x8c>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 8000204:	e030      	b.n	8000268 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b01      	cmp	r3, #1
 800020a:	d106      	bne.n	800021a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 800020c:	4b19      	ldr	r3, [pc, #100]	; (8000274 <enable_gpio_clock+0x8c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a18      	ldr	r2, [pc, #96]	; (8000274 <enable_gpio_clock+0x8c>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000218:	e026      	b.n	8000268 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d106      	bne.n	800022e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000220:	4b14      	ldr	r3, [pc, #80]	; (8000274 <enable_gpio_clock+0x8c>)
 8000222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <enable_gpio_clock+0x8c>)
 8000226:	f043 0304 	orr.w	r3, r3, #4
 800022a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022c:	e01c      	b.n	8000268 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b03      	cmp	r3, #3
 8000232:	d106      	bne.n	8000242 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <enable_gpio_clock+0x8c>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <enable_gpio_clock+0x8c>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e012      	b.n	8000268 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	2b04      	cmp	r3, #4
 8000246:	d106      	bne.n	8000256 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <enable_gpio_clock+0x8c>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a09      	ldr	r2, [pc, #36]	; (8000274 <enable_gpio_clock+0x8c>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000254:	e008      	b.n	8000268 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b05      	cmp	r3, #5
 800025a:	d105      	bne.n	8000268 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <enable_gpio_clock+0x8c>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <enable_gpio_clock+0x8c>)
 8000262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000266:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800

08000278 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ ((uint32_t)3 << pin_number*2);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	2103      	movs	r1, #3
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43db      	mvns	r3, r3
 8000294:	401a      	ands	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	68b9      	ldr	r1, [r7, #8]
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	431a      	orrs	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <digital_pin_state>:

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
	pGPIO->ODR ^= (1 << pin_number);
}

void digital_pin_state(GPIO_TypeDef *pGPIO, uint32_t pin_number, uint8_t state){
 80002ba:	b480      	push	{r7}
 80002bc:	b085      	sub	sp, #20
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71fb      	strb	r3, [r7, #7]
	if (state == SET){
 80002c8:	79fb      	ldrb	r3, [r7, #7]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d109      	bne.n	80002e2 <digital_pin_state+0x28>
		pGPIO->BSRR |= (1U << pin_number);
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	699a      	ldr	r2, [r3, #24]
 80002d2:	2101      	movs	r1, #1
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	619a      	str	r2, [r3, #24]
	}else{
		pGPIO->BSRR |= (1U << (pin_number+16));
	}
}
 80002e0:	e009      	b.n	80002f6 <digital_pin_state+0x3c>
		pGPIO->BSRR |= (1U << (pin_number+16));
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	699a      	ldr	r2, [r3, #24]
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	3310      	adds	r3, #16
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	431a      	orrs	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	619a      	str	r2, [r3, #24]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <LCD_Init>:

void LCD_nibble_write(char data, unsigned char control);
void LCD_command(unsigned char command);
void delayMs(int n);

void LCD_Init(void) {
 8000302:	b580      	push	{r7, lr}
 8000304:	af00      	add	r7, sp, #0
    GPIO_Init();
 8000306:	f000 f82d 	bl	8000364 <GPIO_Init>

    delayMs(30);
 800030a:	201e      	movs	r0, #30
 800030c:	f000 f8c4 	bl	8000498 <delayMs>
    LCD_nibble_write(0x30, 0);
 8000310:	2100      	movs	r1, #0
 8000312:	2030      	movs	r0, #48	; 0x30
 8000314:	f000 f858 	bl	80003c8 <LCD_nibble_write>
    delayMs(5);
 8000318:	2005      	movs	r0, #5
 800031a:	f000 f8bd 	bl	8000498 <delayMs>
    LCD_nibble_write(0x30, 0);
 800031e:	2100      	movs	r1, #0
 8000320:	2030      	movs	r0, #48	; 0x30
 8000322:	f000 f851 	bl	80003c8 <LCD_nibble_write>
    delayMs(1);
 8000326:	2001      	movs	r0, #1
 8000328:	f000 f8b6 	bl	8000498 <delayMs>
    LCD_nibble_write(0x30, 0);
 800032c:	2100      	movs	r1, #0
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f000 f84a 	bl	80003c8 <LCD_nibble_write>
    delayMs(1);
 8000334:	2001      	movs	r0, #1
 8000336:	f000 f8af 	bl	8000498 <delayMs>

    LCD_nibble_write(0x20, 0);  // set 4-bit data mode
 800033a:	2100      	movs	r1, #0
 800033c:	2020      	movs	r0, #32
 800033e:	f000 f843 	bl	80003c8 <LCD_nibble_write>
    delayMs(1);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 f8a8 	bl	8000498 <delayMs>
    LCD_command(0x28);          // 4-bit data, 2-line, 5x7 font
 8000348:	2028      	movs	r0, #40	; 0x28
 800034a:	f000 f8c2 	bl	80004d2 <LCD_command>
    LCD_command(0x06);          // move cursor right
 800034e:	2006      	movs	r0, #6
 8000350:	f000 f8bf 	bl	80004d2 <LCD_command>
    LCD_command(0x01);          // clear screen, move cursor to home
 8000354:	2001      	movs	r0, #1
 8000356:	f000 f8bc 	bl	80004d2 <LCD_command>
    LCD_command(0x0F);          // turn on display, cursor blinking
 800035a:	200f      	movs	r0, #15
 800035c:	f000 f8b9 	bl	80004d2 <LCD_command>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}

08000364 <GPIO_Init>:

void GPIO_Init(void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	enable_gpio_clock(CONTROL_PORT);
 8000368:	2001      	movs	r0, #1
 800036a:	f7ff ff3d 	bl	80001e8 <enable_gpio_clock>
	enable_gpio_clock(DATA_PORT);
 800036e:	2002      	movs	r0, #2
 8000370:	f7ff ff3a 	bl	80001e8 <enable_gpio_clock>
	gpio_config(GPIO_CONTROL, OUTPUT_MODE,	LCD_RS);
 8000374:	2205      	movs	r2, #5
 8000376:	2101      	movs	r1, #1
 8000378:	4811      	ldr	r0, [pc, #68]	; (80003c0 <GPIO_Init+0x5c>)
 800037a:	f7ff ff7d 	bl	8000278 <gpio_config>
	gpio_config(GPIO_CONTROL, OUTPUT_MODE,	LCD_EN);
 800037e:	2207      	movs	r2, #7
 8000380:	2101      	movs	r1, #1
 8000382:	480f      	ldr	r0, [pc, #60]	; (80003c0 <GPIO_Init+0x5c>)
 8000384:	f7ff ff78 	bl	8000278 <gpio_config>
	digital_pin_state(GPIO_CONTROL, DATA7, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2107      	movs	r1, #7
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <GPIO_Init+0x5c>)
 800038e:	f7ff ff94 	bl	80002ba <digital_pin_state>
    gpio_config(GPIO_DATA, OUTPUT_MODE, DATA4);
 8000392:	2204      	movs	r2, #4
 8000394:	2101      	movs	r1, #1
 8000396:	480b      	ldr	r0, [pc, #44]	; (80003c4 <GPIO_Init+0x60>)
 8000398:	f7ff ff6e 	bl	8000278 <gpio_config>
    gpio_config(GPIO_DATA, OUTPUT_MODE, DATA5);
 800039c:	2205      	movs	r2, #5
 800039e:	2101      	movs	r1, #1
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <GPIO_Init+0x60>)
 80003a2:	f7ff ff69 	bl	8000278 <gpio_config>
    gpio_config(GPIO_DATA, OUTPUT_MODE, DATA6);
 80003a6:	2206      	movs	r2, #6
 80003a8:	2101      	movs	r1, #1
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <GPIO_Init+0x60>)
 80003ac:	f7ff ff64 	bl	8000278 <gpio_config>
    gpio_config(GPIO_DATA, OUTPUT_MODE, DATA7);
 80003b0:	2207      	movs	r2, #7
 80003b2:	2101      	movs	r1, #1
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <GPIO_Init+0x60>)
 80003b6:	f7ff ff5f 	bl	8000278 <gpio_config>

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40020400 	.word	0x40020400
 80003c4:	40020800 	.word	0x40020800

080003c8 <LCD_nibble_write>:

void LCD_nibble_write(char data, unsigned char control) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	460a      	mov	r2, r1
 80003d2:	71fb      	strb	r3, [r7, #7]
 80003d4:	4613      	mov	r3, r2
 80003d6:	71bb      	strb	r3, [r7, #6]

    digital_pin_state(GPIO_DATA, DATA4, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2104      	movs	r1, #4
 80003dc:	482c      	ldr	r0, [pc, #176]	; (8000490 <LCD_nibble_write+0xc8>)
 80003de:	f7ff ff6c 	bl	80002ba <digital_pin_state>
    digital_pin_state(GPIO_DATA, DATA5, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2105      	movs	r1, #5
 80003e6:	482a      	ldr	r0, [pc, #168]	; (8000490 <LCD_nibble_write+0xc8>)
 80003e8:	f7ff ff67 	bl	80002ba <digital_pin_state>
    digital_pin_state(GPIO_DATA, DATA6, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2106      	movs	r1, #6
 80003f0:	4827      	ldr	r0, [pc, #156]	; (8000490 <LCD_nibble_write+0xc8>)
 80003f2:	f7ff ff62 	bl	80002ba <digital_pin_state>
    digital_pin_state(GPIO_DATA, DATA7, RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2107      	movs	r1, #7
 80003fa:	4825      	ldr	r0, [pc, #148]	; (8000490 <LCD_nibble_write+0xc8>)
 80003fc:	f7ff ff5d 	bl	80002ba <digital_pin_state>

    if (data & (1U << 4)){
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	f003 0310 	and.w	r3, r3, #16
 8000406:	2b00      	cmp	r3, #0
 8000408:	d004      	beq.n	8000414 <LCD_nibble_write+0x4c>
    	digital_pin_state(GPIO_DATA, DATA4, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2104      	movs	r1, #4
 800040e:	4820      	ldr	r0, [pc, #128]	; (8000490 <LCD_nibble_write+0xc8>)
 8000410:	f7ff ff53 	bl	80002ba <digital_pin_state>
    }
    if (data & (1U << 5)){
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <LCD_nibble_write+0x60>
    	digital_pin_state(GPIO_DATA, DATA5, SET);
 800041e:	2201      	movs	r2, #1
 8000420:	2105      	movs	r1, #5
 8000422:	481b      	ldr	r0, [pc, #108]	; (8000490 <LCD_nibble_write+0xc8>)
 8000424:	f7ff ff49 	bl	80002ba <digital_pin_state>
    }
    if (data & (1U << 6)){
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800042e:	2b00      	cmp	r3, #0
 8000430:	d004      	beq.n	800043c <LCD_nibble_write+0x74>
    	digital_pin_state(GPIO_DATA, DATA6, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2106      	movs	r1, #6
 8000436:	4816      	ldr	r0, [pc, #88]	; (8000490 <LCD_nibble_write+0xc8>)
 8000438:	f7ff ff3f 	bl	80002ba <digital_pin_state>
    }
    if (data & (1U << 7)){
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	2b00      	cmp	r3, #0
 8000442:	da04      	bge.n	800044e <LCD_nibble_write+0x86>
    	digital_pin_state(GPIO_DATA, DATA7, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2107      	movs	r1, #7
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <LCD_nibble_write+0xc8>)
 800044a:	f7ff ff36 	bl	80002ba <digital_pin_state>
    }


    if (control & RS){
 800044e:	79bb      	ldrb	r3, [r7, #6]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	2b00      	cmp	r3, #0
 8000456:	d005      	beq.n	8000464 <LCD_nibble_write+0x9c>
    	digital_pin_state(GPIO_CONTROL, LCD_RS, SET);   //Set RS line
 8000458:	2201      	movs	r2, #1
 800045a:	2105      	movs	r1, #5
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <LCD_nibble_write+0xcc>)
 800045e:	f7ff ff2c 	bl	80002ba <digital_pin_state>
 8000462:	e004      	b.n	800046e <LCD_nibble_write+0xa6>
	}
    else{
    	digital_pin_state(GPIO_CONTROL, LCD_RS, RESET);  //Reset RS line
 8000464:	2200      	movs	r2, #0
 8000466:	2105      	movs	r1, #5
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <LCD_nibble_write+0xcc>)
 800046a:	f7ff ff26 	bl	80002ba <digital_pin_state>
	}

    digital_pin_state(GPIO_CONTROL, LCD_EN, SET);   //Set enable line
 800046e:	2201      	movs	r2, #1
 8000470:	2107      	movs	r1, #7
 8000472:	4808      	ldr	r0, [pc, #32]	; (8000494 <LCD_nibble_write+0xcc>)
 8000474:	f7ff ff21 	bl	80002ba <digital_pin_state>
    delayMs(0);
 8000478:	2000      	movs	r0, #0
 800047a:	f000 f80d 	bl	8000498 <delayMs>
    digital_pin_state(GPIO_CONTROL, LCD_EN, RESET);  //Reset enable line
 800047e:	2200      	movs	r2, #0
 8000480:	2107      	movs	r1, #7
 8000482:	4804      	ldr	r0, [pc, #16]	; (8000494 <LCD_nibble_write+0xcc>)
 8000484:	f7ff ff19 	bl	80002ba <digital_pin_state>

}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40020800 	.word	0x40020800
 8000494:	40020400 	.word	0x40020400

08000498 <delayMs>:

void delayMs(int delay) {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
    int i;
    for (; delay > 0; delay--)
 80004a0:	e00d      	b.n	80004be <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80004a2:	2300      	movs	r3, #0
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	e002      	b.n	80004ae <delayMs+0x16>
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3301      	adds	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f640 427a 	movw	r2, #3194	; 0xc7a
 80004b4:	4293      	cmp	r3, r2
 80004b6:	ddf7      	ble.n	80004a8 <delayMs+0x10>
    for (; delay > 0; delay--)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dcee      	bgt.n	80004a2 <delayMs+0xa>
}
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <LCD_command>:


void LCD_command(unsigned char command) {
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(command & 0xF0, 0);    /* upper 4 bits */
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	f023 030f 	bic.w	r3, r3, #15
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff6e 	bl	80003c8 <LCD_nibble_write>
    LCD_nibble_write(command << 4, 0);      /* lower 4 bits */
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff ff67 	bl	80003c8 <LCD_nibble_write>
    if (command < 4){
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d803      	bhi.n	8000508 <LCD_command+0x36>
        delayMs(2);
 8000500:	2002      	movs	r0, #2
 8000502:	f7ff ffc9 	bl	8000498 <delayMs>
     }
    else{
        delayMs(1);
    }
}
 8000506:	e002      	b.n	800050e <LCD_command+0x3c>
        delayMs(1);
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff ffc5 	bl	8000498 <delayMs>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <LCD_data>:

void LCD_data(char data) {
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	4603      	mov	r3, r0
 800051e:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(data & 0xF0, RS);      /* upper nibble first */
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f023 030f 	bic.w	r3, r3, #15
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2120      	movs	r1, #32
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff4c 	bl	80003c8 <LCD_nibble_write>
    LCD_nibble_write(data << 4, RS);        /* then lower nibble */
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2120      	movs	r1, #32
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff45 	bl	80003c8 <LCD_nibble_write>
    delayMs(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff ffaa 	bl	8000498 <delayMs>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <LCD_string>:

void LCD_string(char *str){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	int len = strlen(str);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fe3f 	bl	80001d8 <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	60bb      	str	r3, [r7, #8]
	for (int i = 0;i < len; i++){
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	e009      	b.n	8000578 <LCD_string+0x2c>
		LCD_data(str[i]);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ffd2 	bl	8000516 <LCD_data>
	for (int i = 0;i < len; i++){
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	3301      	adds	r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf1      	blt.n	8000564 <LCD_string+0x18>
	}
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <LCD_set_cursor_xy>:

void LCD_set_cursor_xy(uint32_t row, int col){
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
 8000592:	6039      	str	r1, [r7, #0]
	if(row == 0){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d103      	bne.n	80005a2 <LCD_set_cursor_xy+0x18>
		LCD_command(0x80);
 800059a:	2080      	movs	r0, #128	; 0x80
 800059c:	f7ff ff99 	bl	80004d2 <LCD_command>
 80005a0:	e002      	b.n	80005a8 <LCD_set_cursor_xy+0x1e>
	}
	else{
		LCD_command(0xC0);
 80005a2:	20c0      	movs	r0, #192	; 0xc0
 80005a4:	f7ff ff95 	bl	80004d2 <LCD_command>
	}
	 delayMs(40);
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f7ff ff75 	bl	8000498 <delayMs>
	for (int i = 0; i < col; i++){
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e005      	b.n	80005c0 <LCD_set_cursor_xy+0x36>
		LCD_command(0x14);
 80005b4:	2014      	movs	r0, #20
 80005b6:	f7ff ff8c 	bl	80004d2 <LCD_command>
	for (int i = 0; i < col; i++){
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	3301      	adds	r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf5      	blt.n	80005b4 <LCD_set_cursor_xy+0x2a>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <main>:
#include "stm32f4xx.h"
#include <stdio.h>
#include "lcd.h"


int main(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
	char message[10] = " World.";
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0x4c>)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80005e6:	2300      	movs	r3, #0
 80005e8:	81bb      	strh	r3, [r7, #12]

    LCD_Init();
 80005ea:	f7ff fe8a 	bl	8000302 <LCD_Init>

    LCD_data('H');
 80005ee:	2048      	movs	r0, #72	; 0x48
 80005f0:	f7ff ff91 	bl	8000516 <LCD_data>
    LCD_data('e');
 80005f4:	2065      	movs	r0, #101	; 0x65
 80005f6:	f7ff ff8e 	bl	8000516 <LCD_data>
    LCD_data('l');
 80005fa:	206c      	movs	r0, #108	; 0x6c
 80005fc:	f7ff ff8b 	bl	8000516 <LCD_data>
    LCD_data('l');
 8000600:	206c      	movs	r0, #108	; 0x6c
 8000602:	f7ff ff88 	bl	8000516 <LCD_data>
    LCD_data('o');
 8000606:	206f      	movs	r0, #111	; 0x6f
 8000608:	f7ff ff85 	bl	8000516 <LCD_data>
    LCD_string(message);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff9c 	bl	800054c <LCD_string>
    LCD_set_cursor_xy(0, 4);
 8000614:	2104      	movs	r1, #4
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ffb7 	bl	800058a <LCD_set_cursor_xy>
//  LCD_cursor_off();

    while(1) {
 800061c:	e7fe      	b.n	800061c <main+0x48>
 800061e:	bf00      	nop
 8000620:	080006d8 	.word	0x080006d8

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	; (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	; (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	; (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 f811 	bl	8000678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff ffbd 	bl	80005d4 <main>

0800065a <LoopForever>:

LoopForever:
  b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000668:	080006ec 	.word	0x080006ec
  ldr r2, =_sbss
 800066c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000670:	2000001c 	.word	0x2000001c

08000674 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC_IRQHandler>
	...

08000678 <__libc_init_array>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	4d0d      	ldr	r5, [pc, #52]	; (80006b0 <__libc_init_array+0x38>)
 800067c:	4c0d      	ldr	r4, [pc, #52]	; (80006b4 <__libc_init_array+0x3c>)
 800067e:	1b64      	subs	r4, r4, r5
 8000680:	10a4      	asrs	r4, r4, #2
 8000682:	2600      	movs	r6, #0
 8000684:	42a6      	cmp	r6, r4
 8000686:	d109      	bne.n	800069c <__libc_init_array+0x24>
 8000688:	4d0b      	ldr	r5, [pc, #44]	; (80006b8 <__libc_init_array+0x40>)
 800068a:	4c0c      	ldr	r4, [pc, #48]	; (80006bc <__libc_init_array+0x44>)
 800068c:	f000 f818 	bl	80006c0 <_init>
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	10a4      	asrs	r4, r4, #2
 8000694:	2600      	movs	r6, #0
 8000696:	42a6      	cmp	r6, r4
 8000698:	d105      	bne.n	80006a6 <__libc_init_array+0x2e>
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a0:	4798      	blx	r3
 80006a2:	3601      	adds	r6, #1
 80006a4:	e7ee      	b.n	8000684 <__libc_init_array+0xc>
 80006a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006aa:	4798      	blx	r3
 80006ac:	3601      	adds	r6, #1
 80006ae:	e7f2      	b.n	8000696 <__libc_init_array+0x1e>
 80006b0:	080006e4 	.word	0x080006e4
 80006b4:	080006e4 	.word	0x080006e4
 80006b8:	080006e4 	.word	0x080006e4
 80006bc:	080006e8 	.word	0x080006e8

080006c0 <_init>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr

080006cc <_fini>:
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ce:	bf00      	nop
 80006d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d2:	bc08      	pop	{r3}
 80006d4:	469e      	mov	lr, r3
 80006d6:	4770      	bx	lr
