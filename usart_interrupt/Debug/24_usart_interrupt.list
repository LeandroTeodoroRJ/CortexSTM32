
24_usart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f50  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080010e8  080010e8  000110e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001108  08001108  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001108  08001108  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001108  08001108  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  0800116c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800116c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001767  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006d0  00000000  00000000  00021836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000157  00000000  00000000  000220f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc88  00000000  00000000  0002224f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f62  00000000  00000000  00031ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000560bc  00000000  00000000  00033e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d00  00000000  00000000  00089ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0008abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080010d0 	.word	0x080010d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080010d0 	.word	0x080010d0

080001d8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d106      	bne.n	80001f6 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 80001f4:	e030      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <enable_gpio_clock+0x8c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <enable_gpio_clock+0x8c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000208:	e026      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d106      	bne.n	800021e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <enable_gpio_clock+0x8c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <enable_gpio_clock+0x8c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021c:	e01c      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d106      	bne.n	8000232 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <enable_gpio_clock+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <enable_gpio_clock+0x8c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e012      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d106      	bne.n	8000246 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <enable_gpio_clock+0x8c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <enable_gpio_clock+0x8c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000244:	e008      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b05      	cmp	r3, #5
 800024a:	d105      	bne.n	8000258 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <enable_gpio_clock+0x8c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <enable_gpio_clock+0x8c>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ ((uint32_t)3 << pin_number*2);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <gpio_bit_toggle>:

void gpio_load_value(GPIO_TypeDef *pGPIO, uint32_t value){
	pGPIO->ODR = value;
}

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	6039      	str	r1, [r7, #0]
	pGPIO->ODR ^= (1 << pin_number);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	2101      	movs	r1, #1
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	405a      	eors	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	615a      	str	r2, [r3, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <alternate_function_setup>:

uint32_t read_gpio_pin(GPIO_TypeDef *pGPIO, uint32_t pin_number){
	return (pGPIO->IDR & pin_number);
}

void alternate_function_setup(GPIO_TypeDef *pGPIO, uint32_t pin_number, uint32_t alternate_function_value){
 80002d2:	b480      	push	{r7}
 80002d4:	b085      	sub	sp, #20
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
	if (pin_number > PIN7){
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d918      	bls.n	8000316 <alternate_function_setup+0x44>
		pin_number = pin_number - 8;
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	3b08      	subs	r3, #8
 80002e8:	60bb      	str	r3, [r7, #8]
		pGPIO->AFR[1] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	210f      	movs	r1, #15
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	401a      	ands	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
		pGPIO->AFR[1] |=  (alternate_function_value << pin_number*4);  //Set alternate value
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	6879      	ldr	r1, [r7, #4]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	431a      	orrs	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
	}else{
		pGPIO->AFR[0] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
		pGPIO->AFR[0] |=  (alternate_function_value << pin_number*4);  //Set alternate value
	}
}
 8000314:	e014      	b.n	8000340 <alternate_function_setup+0x6e>
		pGPIO->AFR[0] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6a1a      	ldr	r2, [r3, #32]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	210f      	movs	r1, #15
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	401a      	ands	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	621a      	str	r2, [r3, #32]
		pGPIO->AFR[0] |=  (alternate_function_value << pin_number*4);  //Set alternate value
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6a1a      	ldr	r2, [r3, #32]
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	431a      	orrs	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	621a      	str	r2, [r3, #32]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	2b00      	cmp	r3, #0
 800035c:	db0b      	blt.n	8000376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f003 021f 	and.w	r2, r3, #31
 8000364:	4907      	ldr	r1, [pc, #28]	; (8000384 <__NVIC_EnableIRQ+0x38>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	095b      	lsrs	r3, r3, #5
 800036c:	2001      	movs	r0, #1
 800036e:	fa00 f202 	lsl.w	r2, r0, r2
 8000372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	e000e100 	.word	0xe000e100

08000388 <main>:
void bios(void);

char key;

int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	bios();
 800038c:	f000 f840 	bl	8000410 <bios>

	//USART2 config
	enable_usart_clock(USART_2);
 8000390:	2002      	movs	r0, #2
 8000392:	f000 f983 	bl	800069c <enable_usart_clock>
	uart_rxtx_init(USART2, UART_BAUDRATE);
 8000396:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <main+0x2c>)
 800039c:	f000 f902 	bl	80005a4 <uart_rxtx_init>
	output_default_usart_stream(USART2);	//To use with printf funcion
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <main+0x2c>)
 80003a2:	f000 f9a5 	bl	80006f0 <output_default_usart_stream>
	enable_usart_rx_interrupt(USART2);
 80003a6:	4803      	ldr	r0, [pc, #12]	; (80003b4 <main+0x2c>)
 80003a8:	f000 f9b2 	bl	8000710 <enable_usart_rx_interrupt>

	// Enable USART2 interrupt in NVIC
	 NVIC_EnableIRQ(USART2_IRQn);
 80003ac:	2026      	movs	r0, #38	; 0x26
 80003ae:	f7ff ffcd 	bl	800034c <__NVIC_EnableIRQ>

	while(1) {	}
 80003b2:	e7fe      	b.n	80003b2 <main+0x2a>
 80003b4:	40004400 	.word	0x40004400

080003b8 <usart_callback>:
}

static void usart_callback(void){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
		key = usart_read(USART2);
 80003bc:	4809      	ldr	r0, [pc, #36]	; (80003e4 <usart_callback+0x2c>)
 80003be:	f000 f90b 	bl	80005d8 <usart_read>
 80003c2:	4603      	mov	r3, r0
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <usart_callback+0x30>)
 80003c8:	701a      	strb	r2, [r3, #0]
		if (key == '1'){
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <usart_callback+0x30>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b31      	cmp	r3, #49	; 0x31
 80003d0:	d106      	bne.n	80003e0 <usart_callback+0x28>
			gpio_bit_toggle(GPIOA, PIN5);	//Led pin
 80003d2:	2105      	movs	r1, #5
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <usart_callback+0x34>)
 80003d6:	f7ff ff68 	bl	80002aa <gpio_bit_toggle>
			printf("You receiver a special key. \n");
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <usart_callback+0x38>)
 80003dc:	f000 fae4 	bl	80009a8 <puts>
		}
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40004400 	.word	0x40004400
 80003e8:	20000078 	.word	0x20000078
 80003ec:	40020000 	.word	0x40020000
 80003f0:	080010e8 	.word	0x080010e8

080003f4 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	if (usart_data_ready_read(USART2) != NOT_READY_TO_READ){
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <USART2_IRQHandler+0x18>)
 80003fa:	f000 f999 	bl	8000730 <usart_data_ready_read>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <USART2_IRQHandler+0x14>
		usart_callback();
 8000404:	f7ff ffd8 	bl	80003b8 <usart_callback>
	}
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40004400 	.word	0x40004400

08000410 <bios>:

void bios(void){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA --LED
	enable_gpio_clock(PORT_A);
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff fedf 	bl	80001d8 <enable_gpio_clock>

	// Set PA5 as output
	gpio_config(GPIOA, OUTPUT_MODE, PIN5);
 800041a:	2205      	movs	r2, #5
 800041c:	2101      	movs	r1, #1
 800041e:	480e      	ldr	r0, [pc, #56]	; (8000458 <bios+0x48>)
 8000420:	f7ff ff22 	bl	8000268 <gpio_config>

	/****************Configure usart gpio pin***************/
	/*Enable clock access to gpioa */
	enable_gpio_clock(PORT_A);
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff fed7 	bl	80001d8 <enable_gpio_clock>

	/*Set PA2 mode to alternate function mode*/
	gpio_config(GPIOA, ALTERNATE_FUNCTION, PIN2);
 800042a:	2202      	movs	r2, #2
 800042c:	210a      	movs	r1, #10
 800042e:	480a      	ldr	r0, [pc, #40]	; (8000458 <bios+0x48>)
 8000430:	f7ff ff1a 	bl	8000268 <gpio_config>

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	alternate_function_setup(GPIOA, PIN2, 07);
 8000434:	2207      	movs	r2, #7
 8000436:	2102      	movs	r1, #2
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <bios+0x48>)
 800043a:	f7ff ff4a 	bl	80002d2 <alternate_function_setup>

	/*Set PA3 mode to alternate function mode*/
	gpio_config(GPIOA, ALTERNATE_FUNCTION, PIN3);
 800043e:	2203      	movs	r2, #3
 8000440:	210a      	movs	r1, #10
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <bios+0x48>)
 8000444:	f7ff ff10 	bl	8000268 <gpio_config>

	/*Set PA3 alternate function type to UART_TX (AF07)*/
	alternate_function_setup(GPIOA, PIN3, 07);
 8000448:	2207      	movs	r2, #7
 800044a:	2103      	movs	r1, #3
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <bios+0x48>)
 800044e:	f7ff ff40 	bl	80002d2 <alternate_function_setup>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40020000 	.word	0x40020000

0800045c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	e00a      	b.n	8000484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800046e:	f3af 8000 	nop.w
 8000472:	4601      	mov	r1, r0
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	60ba      	str	r2, [r7, #8]
 800047a:	b2ca      	uxtb	r2, r1
 800047c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf0      	blt.n	800046e <_read+0x12>
  }

  return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b086      	sub	sp, #24
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
 80004a6:	e009      	b.n	80004bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f8bb 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	3301      	adds	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
 80004bc:	697a      	ldr	r2, [r7, #20]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	dbf1      	blt.n	80004a8 <_write+0x12>
  }
  return len;
 80004c4:	687b      	ldr	r3, [r7, #4]
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <_close>:

int _close(int file)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f6:	605a      	str	r2, [r3, #4]
  return 0;
 80004f8:	2300      	movs	r3, #0
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <_isatty>:

int _isatty(int file)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800050e:	2301      	movs	r3, #1
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
	...

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f000 fb4c 	bl	8000c04 <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20020000 	.word	0x20020000
 8000598:	00000400 	.word	0x00000400
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200001d0 	.word	0x200001d0

080005a4 <uart_rxtx_init>:
int __io_putchar(int ch);

uint32_t *usart_stream;		//Global pointer to usart out stream function

// Functions definitions
void uart_rxtx_init(USART_TypeDef *pUSART, uint32_t UsartBaudRate){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]

	/*Configure baudrate*/
	uart_set_baudrate(pUSART,APB1_CLK,UsartBaudRate);
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	4908      	ldr	r1, [pc, #32]	; (80005d4 <uart_rxtx_init+0x30>)
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f84c 	bl	8000650 <uart_set_baudrate>

	/*Configure the transfer direction*/
	// Enable transmitter and receiver
	 pUSART->CR1 =  (CR1_TE | CR1_RE);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	220c      	movs	r2, #12
 80005bc:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 pUSART->CR1 |= CR1_UE;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60da      	str	r2, [r3, #12]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	00f42400 	.word	0x00f42400

080005d8 <usart_read>:


char usart_read(USART_TypeDef *pUSART){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	/*Make sure the receive data register is not empty*/
	while(!(pUSART->SR & SR_RXNE)){}
 80005e0:	bf00      	nop
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <usart_read+0xa>

	/* Read data */
	return pUSART->DR;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	b2db      	uxtb	r3, r3
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <usart_write>:


void usart_write(USART_TypeDef *pUSART, int ch){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
  /*Make sure the transmit data register is empty*/
	while(!(pUSART->SR & SR_TXE)){}
 800060a:	bf00      	nop
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0f9      	beq.n	800060c <usart_write+0xc>

  /*Write to transmit data register*/
	pUSART->DR	=  (ch & 0xFF);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	605a      	str	r2, [r3, #4]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <__io_putchar>:

//It's necessary to declare this function to use with printf
int __io_putchar(int ch){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	usart_write((USART_TypeDef*) usart_stream, ch);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <__io_putchar+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffe0 	bl	8000600 <usart_write>
	return ch;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000080 	.word	0x20000080

08000650 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 800065c:	6879      	ldr	r1, [r7, #4]
 800065e:	68b8      	ldr	r0, [r7, #8]
 8000660:	f000 f808 	bl	8000674 <compute_uart_bd>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	609a      	str	r2, [r3, #8]
}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	085a      	lsrs	r2, r3, #1
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	441a      	add	r2, r3
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	fbb2 f3f3 	udiv	r3, r2, r3
 800068c:	b29b      	uxth	r3, r3
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <enable_usart_clock>:

void enable_usart_clock(uint8_t usart_number){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	if 	(usart_number == USART_1){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d106      	bne.n	80006ba <enable_usart_clock+0x1e>
		RCC->APB2ENR |= (1 << 4);
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <enable_usart_clock+0x50>)
 80006ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b0:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <enable_usart_clock+0x50>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB1ENR |= (1 << 17);
	}
	else if (usart_number == USART_6){
		RCC->APB2ENR |= (1 << 5);
	}
}
 80006b8:	e012      	b.n	80006e0 <enable_usart_clock+0x44>
	else if (usart_number == USART_2){
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d106      	bne.n	80006ce <enable_usart_clock+0x32>
		RCC->APB1ENR |= (1 << 17);
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <enable_usart_clock+0x50>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a09      	ldr	r2, [pc, #36]	; (80006ec <enable_usart_clock+0x50>)
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006cc:	e008      	b.n	80006e0 <enable_usart_clock+0x44>
	else if (usart_number == USART_6){
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b06      	cmp	r3, #6
 80006d2:	d105      	bne.n	80006e0 <enable_usart_clock+0x44>
		RCC->APB2ENR |= (1 << 5);
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <enable_usart_clock+0x50>)
 80006d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <enable_usart_clock+0x50>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800

080006f0 <output_default_usart_stream>:

void output_default_usart_stream(USART_TypeDef *pUSART){
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	usart_stream = (uint32_t*) pUSART;	//Cast and global save
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <output_default_usart_stream+0x1c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080

08000710 <enable_usart_rx_interrupt>:

void enable_usart_rx_interrupt(USART_TypeDef *pUSART){
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	// Enable RX interrupt
	 pUSART->CR1 |= RX_INT_EN;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f043 0220 	orr.w	r2, r3, #32
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60da      	str	r2, [r3, #12]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <usart_data_ready_read>:
	// Enable RX interrupt
	 pUSART->CR1 &=~ RX_INT_EN;
}


uint32_t usart_data_ready_read(USART_TypeDef *pUSART){
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	// Check if RXNE is set
	return (pUSART->SR & SR_RXNE);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0320 	and.w	r3, r3, #32
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000750:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	; (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	; (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077a:	f000 fa49 	bl	8000c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fe03 	bl	8000388 <main>

08000782 <LoopForever>:

LoopForever:
  b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000790:	08001110 	.word	0x08001110
  ldr r2, =_sbss
 8000794:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000798:	200001d0 	.word	0x200001d0

0800079c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <std>:
 80007a0:	2300      	movs	r3, #0
 80007a2:	b510      	push	{r4, lr}
 80007a4:	4604      	mov	r4, r0
 80007a6:	e9c0 3300 	strd	r3, r3, [r0]
 80007aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ae:	6083      	str	r3, [r0, #8]
 80007b0:	8181      	strh	r1, [r0, #12]
 80007b2:	6643      	str	r3, [r0, #100]	; 0x64
 80007b4:	81c2      	strh	r2, [r0, #14]
 80007b6:	6183      	str	r3, [r0, #24]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2208      	movs	r2, #8
 80007bc:	305c      	adds	r0, #92	; 0x5c
 80007be:	f000 f9d3 	bl	8000b68 <memset>
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <std+0x38>)
 80007c4:	6263      	str	r3, [r4, #36]	; 0x24
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <std+0x3c>)
 80007c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <std+0x40>)
 80007cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <std+0x44>)
 80007d0:	6224      	str	r4, [r4, #32]
 80007d2:	6323      	str	r3, [r4, #48]	; 0x30
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	080009b9 	.word	0x080009b9
 80007dc:	080009db 	.word	0x080009db
 80007e0:	08000a13 	.word	0x08000a13
 80007e4:	08000a37 	.word	0x08000a37

080007e8 <stdio_exit_handler>:
 80007e8:	4a02      	ldr	r2, [pc, #8]	; (80007f4 <stdio_exit_handler+0xc>)
 80007ea:	4903      	ldr	r1, [pc, #12]	; (80007f8 <stdio_exit_handler+0x10>)
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <stdio_exit_handler+0x14>)
 80007ee:	f000 b869 	b.w	80008c4 <_fwalk_sglue>
 80007f2:	bf00      	nop
 80007f4:	20000000 	.word	0x20000000
 80007f8:	08000f59 	.word	0x08000f59
 80007fc:	2000000c 	.word	0x2000000c

08000800 <cleanup_stdio>:
 8000800:	6841      	ldr	r1, [r0, #4]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <cleanup_stdio+0x34>)
 8000804:	4299      	cmp	r1, r3
 8000806:	b510      	push	{r4, lr}
 8000808:	4604      	mov	r4, r0
 800080a:	d001      	beq.n	8000810 <cleanup_stdio+0x10>
 800080c:	f000 fba4 	bl	8000f58 <_fflush_r>
 8000810:	68a1      	ldr	r1, [r4, #8]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <cleanup_stdio+0x38>)
 8000814:	4299      	cmp	r1, r3
 8000816:	d002      	beq.n	800081e <cleanup_stdio+0x1e>
 8000818:	4620      	mov	r0, r4
 800081a:	f000 fb9d 	bl	8000f58 <_fflush_r>
 800081e:	68e1      	ldr	r1, [r4, #12]
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <cleanup_stdio+0x3c>)
 8000822:	4299      	cmp	r1, r3
 8000824:	d004      	beq.n	8000830 <cleanup_stdio+0x30>
 8000826:	4620      	mov	r0, r4
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082c:	f000 bb94 	b.w	8000f58 <_fflush_r>
 8000830:	bd10      	pop	{r4, pc}
 8000832:	bf00      	nop
 8000834:	20000084 	.word	0x20000084
 8000838:	200000ec 	.word	0x200000ec
 800083c:	20000154 	.word	0x20000154

08000840 <global_stdio_init.part.0>:
 8000840:	b510      	push	{r4, lr}
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <global_stdio_init.part.0+0x30>)
 8000844:	4c0b      	ldr	r4, [pc, #44]	; (8000874 <global_stdio_init.part.0+0x34>)
 8000846:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <global_stdio_init.part.0+0x38>)
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	4620      	mov	r0, r4
 800084c:	2200      	movs	r2, #0
 800084e:	2104      	movs	r1, #4
 8000850:	f7ff ffa6 	bl	80007a0 <std>
 8000854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000858:	2201      	movs	r2, #1
 800085a:	2109      	movs	r1, #9
 800085c:	f7ff ffa0 	bl	80007a0 <std>
 8000860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000864:	2202      	movs	r2, #2
 8000866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800086a:	2112      	movs	r1, #18
 800086c:	f7ff bf98 	b.w	80007a0 <std>
 8000870:	200001bc 	.word	0x200001bc
 8000874:	20000084 	.word	0x20000084
 8000878:	080007e9 	.word	0x080007e9

0800087c <__sfp_lock_acquire>:
 800087c:	4801      	ldr	r0, [pc, #4]	; (8000884 <__sfp_lock_acquire+0x8>)
 800087e:	f000 b9eb 	b.w	8000c58 <__retarget_lock_acquire_recursive>
 8000882:	bf00      	nop
 8000884:	200001c5 	.word	0x200001c5

08000888 <__sfp_lock_release>:
 8000888:	4801      	ldr	r0, [pc, #4]	; (8000890 <__sfp_lock_release+0x8>)
 800088a:	f000 b9e6 	b.w	8000c5a <__retarget_lock_release_recursive>
 800088e:	bf00      	nop
 8000890:	200001c5 	.word	0x200001c5

08000894 <__sinit>:
 8000894:	b510      	push	{r4, lr}
 8000896:	4604      	mov	r4, r0
 8000898:	f7ff fff0 	bl	800087c <__sfp_lock_acquire>
 800089c:	6a23      	ldr	r3, [r4, #32]
 800089e:	b11b      	cbz	r3, 80008a8 <__sinit+0x14>
 80008a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a4:	f7ff bff0 	b.w	8000888 <__sfp_lock_release>
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <__sinit+0x28>)
 80008aa:	6223      	str	r3, [r4, #32]
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__sinit+0x2c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f5      	bne.n	80008a0 <__sinit+0xc>
 80008b4:	f7ff ffc4 	bl	8000840 <global_stdio_init.part.0>
 80008b8:	e7f2      	b.n	80008a0 <__sinit+0xc>
 80008ba:	bf00      	nop
 80008bc:	08000801 	.word	0x08000801
 80008c0:	200001bc 	.word	0x200001bc

080008c4 <_fwalk_sglue>:
 80008c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c8:	4607      	mov	r7, r0
 80008ca:	4688      	mov	r8, r1
 80008cc:	4614      	mov	r4, r2
 80008ce:	2600      	movs	r6, #0
 80008d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008d4:	f1b9 0901 	subs.w	r9, r9, #1
 80008d8:	d505      	bpl.n	80008e6 <_fwalk_sglue+0x22>
 80008da:	6824      	ldr	r4, [r4, #0]
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1f7      	bne.n	80008d0 <_fwalk_sglue+0xc>
 80008e0:	4630      	mov	r0, r6
 80008e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008e6:	89ab      	ldrh	r3, [r5, #12]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d907      	bls.n	80008fc <_fwalk_sglue+0x38>
 80008ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f0:	3301      	adds	r3, #1
 80008f2:	d003      	beq.n	80008fc <_fwalk_sglue+0x38>
 80008f4:	4629      	mov	r1, r5
 80008f6:	4638      	mov	r0, r7
 80008f8:	47c0      	blx	r8
 80008fa:	4306      	orrs	r6, r0
 80008fc:	3568      	adds	r5, #104	; 0x68
 80008fe:	e7e9      	b.n	80008d4 <_fwalk_sglue+0x10>

08000900 <_puts_r>:
 8000900:	6a03      	ldr	r3, [r0, #32]
 8000902:	b570      	push	{r4, r5, r6, lr}
 8000904:	6884      	ldr	r4, [r0, #8]
 8000906:	4605      	mov	r5, r0
 8000908:	460e      	mov	r6, r1
 800090a:	b90b      	cbnz	r3, 8000910 <_puts_r+0x10>
 800090c:	f7ff ffc2 	bl	8000894 <__sinit>
 8000910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000912:	07db      	lsls	r3, r3, #31
 8000914:	d405      	bmi.n	8000922 <_puts_r+0x22>
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	0598      	lsls	r0, r3, #22
 800091a:	d402      	bmi.n	8000922 <_puts_r+0x22>
 800091c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800091e:	f000 f99b 	bl	8000c58 <__retarget_lock_acquire_recursive>
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	0719      	lsls	r1, r3, #28
 8000926:	d513      	bpl.n	8000950 <_puts_r+0x50>
 8000928:	6923      	ldr	r3, [r4, #16]
 800092a:	b18b      	cbz	r3, 8000950 <_puts_r+0x50>
 800092c:	3e01      	subs	r6, #1
 800092e:	68a3      	ldr	r3, [r4, #8]
 8000930:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000934:	3b01      	subs	r3, #1
 8000936:	60a3      	str	r3, [r4, #8]
 8000938:	b9e9      	cbnz	r1, 8000976 <_puts_r+0x76>
 800093a:	2b00      	cmp	r3, #0
 800093c:	da2e      	bge.n	800099c <_puts_r+0x9c>
 800093e:	4622      	mov	r2, r4
 8000940:	210a      	movs	r1, #10
 8000942:	4628      	mov	r0, r5
 8000944:	f000 f87b 	bl	8000a3e <__swbuf_r>
 8000948:	3001      	adds	r0, #1
 800094a:	d007      	beq.n	800095c <_puts_r+0x5c>
 800094c:	250a      	movs	r5, #10
 800094e:	e007      	b.n	8000960 <_puts_r+0x60>
 8000950:	4621      	mov	r1, r4
 8000952:	4628      	mov	r0, r5
 8000954:	f000 f8b0 	bl	8000ab8 <__swsetup_r>
 8000958:	2800      	cmp	r0, #0
 800095a:	d0e7      	beq.n	800092c <_puts_r+0x2c>
 800095c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000962:	07da      	lsls	r2, r3, #31
 8000964:	d405      	bmi.n	8000972 <_puts_r+0x72>
 8000966:	89a3      	ldrh	r3, [r4, #12]
 8000968:	059b      	lsls	r3, r3, #22
 800096a:	d402      	bmi.n	8000972 <_puts_r+0x72>
 800096c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800096e:	f000 f974 	bl	8000c5a <__retarget_lock_release_recursive>
 8000972:	4628      	mov	r0, r5
 8000974:	bd70      	pop	{r4, r5, r6, pc}
 8000976:	2b00      	cmp	r3, #0
 8000978:	da04      	bge.n	8000984 <_puts_r+0x84>
 800097a:	69a2      	ldr	r2, [r4, #24]
 800097c:	429a      	cmp	r2, r3
 800097e:	dc06      	bgt.n	800098e <_puts_r+0x8e>
 8000980:	290a      	cmp	r1, #10
 8000982:	d004      	beq.n	800098e <_puts_r+0x8e>
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	6022      	str	r2, [r4, #0]
 800098a:	7019      	strb	r1, [r3, #0]
 800098c:	e7cf      	b.n	800092e <_puts_r+0x2e>
 800098e:	4622      	mov	r2, r4
 8000990:	4628      	mov	r0, r5
 8000992:	f000 f854 	bl	8000a3e <__swbuf_r>
 8000996:	3001      	adds	r0, #1
 8000998:	d1c9      	bne.n	800092e <_puts_r+0x2e>
 800099a:	e7df      	b.n	800095c <_puts_r+0x5c>
 800099c:	6823      	ldr	r3, [r4, #0]
 800099e:	250a      	movs	r5, #10
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	6022      	str	r2, [r4, #0]
 80009a4:	701d      	strb	r5, [r3, #0]
 80009a6:	e7db      	b.n	8000960 <_puts_r+0x60>

080009a8 <puts>:
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <puts+0xc>)
 80009aa:	4601      	mov	r1, r0
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	f7ff bfa7 	b.w	8000900 <_puts_r>
 80009b2:	bf00      	nop
 80009b4:	20000058 	.word	0x20000058

080009b8 <__sread>:
 80009b8:	b510      	push	{r4, lr}
 80009ba:	460c      	mov	r4, r1
 80009bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009c0:	f000 f8fc 	bl	8000bbc <_read_r>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	bfab      	itete	ge
 80009c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80009ca:	89a3      	ldrhlt	r3, [r4, #12]
 80009cc:	181b      	addge	r3, r3, r0
 80009ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80009d2:	bfac      	ite	ge
 80009d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80009d6:	81a3      	strhlt	r3, [r4, #12]
 80009d8:	bd10      	pop	{r4, pc}

080009da <__swrite>:
 80009da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	461f      	mov	r7, r3
 80009e0:	898b      	ldrh	r3, [r1, #12]
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	4605      	mov	r5, r0
 80009e6:	460c      	mov	r4, r1
 80009e8:	4616      	mov	r6, r2
 80009ea:	d505      	bpl.n	80009f8 <__swrite+0x1e>
 80009ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f0:	2302      	movs	r3, #2
 80009f2:	2200      	movs	r2, #0
 80009f4:	f000 f8d0 	bl	8000b98 <_lseek_r>
 80009f8:	89a3      	ldrh	r3, [r4, #12]
 80009fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a02:	81a3      	strh	r3, [r4, #12]
 8000a04:	4632      	mov	r2, r6
 8000a06:	463b      	mov	r3, r7
 8000a08:	4628      	mov	r0, r5
 8000a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a0e:	f000 b8e7 	b.w	8000be0 <_write_r>

08000a12 <__sseek>:
 8000a12:	b510      	push	{r4, lr}
 8000a14:	460c      	mov	r4, r1
 8000a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a1a:	f000 f8bd 	bl	8000b98 <_lseek_r>
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	89a3      	ldrh	r3, [r4, #12]
 8000a22:	bf15      	itete	ne
 8000a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8000a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000a2e:	81a3      	strheq	r3, [r4, #12]
 8000a30:	bf18      	it	ne
 8000a32:	81a3      	strhne	r3, [r4, #12]
 8000a34:	bd10      	pop	{r4, pc}

08000a36 <__sclose>:
 8000a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a3a:	f000 b89d 	b.w	8000b78 <_close_r>

08000a3e <__swbuf_r>:
 8000a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a40:	460e      	mov	r6, r1
 8000a42:	4614      	mov	r4, r2
 8000a44:	4605      	mov	r5, r0
 8000a46:	b118      	cbz	r0, 8000a50 <__swbuf_r+0x12>
 8000a48:	6a03      	ldr	r3, [r0, #32]
 8000a4a:	b90b      	cbnz	r3, 8000a50 <__swbuf_r+0x12>
 8000a4c:	f7ff ff22 	bl	8000894 <__sinit>
 8000a50:	69a3      	ldr	r3, [r4, #24]
 8000a52:	60a3      	str	r3, [r4, #8]
 8000a54:	89a3      	ldrh	r3, [r4, #12]
 8000a56:	071a      	lsls	r2, r3, #28
 8000a58:	d525      	bpl.n	8000aa6 <__swbuf_r+0x68>
 8000a5a:	6923      	ldr	r3, [r4, #16]
 8000a5c:	b31b      	cbz	r3, 8000aa6 <__swbuf_r+0x68>
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	6922      	ldr	r2, [r4, #16]
 8000a62:	1a98      	subs	r0, r3, r2
 8000a64:	6963      	ldr	r3, [r4, #20]
 8000a66:	b2f6      	uxtb	r6, r6
 8000a68:	4283      	cmp	r3, r0
 8000a6a:	4637      	mov	r7, r6
 8000a6c:	dc04      	bgt.n	8000a78 <__swbuf_r+0x3a>
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 fa71 	bl	8000f58 <_fflush_r>
 8000a76:	b9e0      	cbnz	r0, 8000ab2 <__swbuf_r+0x74>
 8000a78:	68a3      	ldr	r3, [r4, #8]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	60a3      	str	r3, [r4, #8]
 8000a7e:	6823      	ldr	r3, [r4, #0]
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	6022      	str	r2, [r4, #0]
 8000a84:	701e      	strb	r6, [r3, #0]
 8000a86:	6962      	ldr	r2, [r4, #20]
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d004      	beq.n	8000a98 <__swbuf_r+0x5a>
 8000a8e:	89a3      	ldrh	r3, [r4, #12]
 8000a90:	07db      	lsls	r3, r3, #31
 8000a92:	d506      	bpl.n	8000aa2 <__swbuf_r+0x64>
 8000a94:	2e0a      	cmp	r6, #10
 8000a96:	d104      	bne.n	8000aa2 <__swbuf_r+0x64>
 8000a98:	4621      	mov	r1, r4
 8000a9a:	4628      	mov	r0, r5
 8000a9c:	f000 fa5c 	bl	8000f58 <_fflush_r>
 8000aa0:	b938      	cbnz	r0, 8000ab2 <__swbuf_r+0x74>
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	f000 f805 	bl	8000ab8 <__swsetup_r>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d0d5      	beq.n	8000a5e <__swbuf_r+0x20>
 8000ab2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ab6:	e7f4      	b.n	8000aa2 <__swbuf_r+0x64>

08000ab8 <__swsetup_r>:
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <__swsetup_r+0xac>)
 8000abc:	4605      	mov	r5, r0
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	460c      	mov	r4, r1
 8000ac2:	b118      	cbz	r0, 8000acc <__swsetup_r+0x14>
 8000ac4:	6a03      	ldr	r3, [r0, #32]
 8000ac6:	b90b      	cbnz	r3, 8000acc <__swsetup_r+0x14>
 8000ac8:	f7ff fee4 	bl	8000894 <__sinit>
 8000acc:	89a3      	ldrh	r3, [r4, #12]
 8000ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ad2:	0718      	lsls	r0, r3, #28
 8000ad4:	d422      	bmi.n	8000b1c <__swsetup_r+0x64>
 8000ad6:	06d9      	lsls	r1, r3, #27
 8000ad8:	d407      	bmi.n	8000aea <__swsetup_r+0x32>
 8000ada:	2309      	movs	r3, #9
 8000adc:	602b      	str	r3, [r5, #0]
 8000ade:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ae2:	81a3      	strh	r3, [r4, #12]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae8:	e034      	b.n	8000b54 <__swsetup_r+0x9c>
 8000aea:	0758      	lsls	r0, r3, #29
 8000aec:	d512      	bpl.n	8000b14 <__swsetup_r+0x5c>
 8000aee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000af0:	b141      	cbz	r1, 8000b04 <__swsetup_r+0x4c>
 8000af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d002      	beq.n	8000b00 <__swsetup_r+0x48>
 8000afa:	4628      	mov	r0, r5
 8000afc:	f000 f8ae 	bl	8000c5c <_free_r>
 8000b00:	2300      	movs	r3, #0
 8000b02:	6363      	str	r3, [r4, #52]	; 0x34
 8000b04:	89a3      	ldrh	r3, [r4, #12]
 8000b06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000b0a:	81a3      	strh	r3, [r4, #12]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6063      	str	r3, [r4, #4]
 8000b10:	6923      	ldr	r3, [r4, #16]
 8000b12:	6023      	str	r3, [r4, #0]
 8000b14:	89a3      	ldrh	r3, [r4, #12]
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	81a3      	strh	r3, [r4, #12]
 8000b1c:	6923      	ldr	r3, [r4, #16]
 8000b1e:	b94b      	cbnz	r3, 8000b34 <__swsetup_r+0x7c>
 8000b20:	89a3      	ldrh	r3, [r4, #12]
 8000b22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b2a:	d003      	beq.n	8000b34 <__swsetup_r+0x7c>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 fa60 	bl	8000ff4 <__smakebuf_r>
 8000b34:	89a0      	ldrh	r0, [r4, #12]
 8000b36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b3a:	f010 0301 	ands.w	r3, r0, #1
 8000b3e:	d00a      	beq.n	8000b56 <__swsetup_r+0x9e>
 8000b40:	2300      	movs	r3, #0
 8000b42:	60a3      	str	r3, [r4, #8]
 8000b44:	6963      	ldr	r3, [r4, #20]
 8000b46:	425b      	negs	r3, r3
 8000b48:	61a3      	str	r3, [r4, #24]
 8000b4a:	6923      	ldr	r3, [r4, #16]
 8000b4c:	b943      	cbnz	r3, 8000b60 <__swsetup_r+0xa8>
 8000b4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000b52:	d1c4      	bne.n	8000ade <__swsetup_r+0x26>
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
 8000b56:	0781      	lsls	r1, r0, #30
 8000b58:	bf58      	it	pl
 8000b5a:	6963      	ldrpl	r3, [r4, #20]
 8000b5c:	60a3      	str	r3, [r4, #8]
 8000b5e:	e7f4      	b.n	8000b4a <__swsetup_r+0x92>
 8000b60:	2000      	movs	r0, #0
 8000b62:	e7f7      	b.n	8000b54 <__swsetup_r+0x9c>
 8000b64:	20000058 	.word	0x20000058

08000b68 <memset>:
 8000b68:	4402      	add	r2, r0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d100      	bne.n	8000b72 <memset+0xa>
 8000b70:	4770      	bx	lr
 8000b72:	f803 1b01 	strb.w	r1, [r3], #1
 8000b76:	e7f9      	b.n	8000b6c <memset+0x4>

08000b78 <_close_r>:
 8000b78:	b538      	push	{r3, r4, r5, lr}
 8000b7a:	4d06      	ldr	r5, [pc, #24]	; (8000b94 <_close_r+0x1c>)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	602b      	str	r3, [r5, #0]
 8000b84:	f7ff fca3 	bl	80004ce <_close>
 8000b88:	1c43      	adds	r3, r0, #1
 8000b8a:	d102      	bne.n	8000b92 <_close_r+0x1a>
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	b103      	cbz	r3, 8000b92 <_close_r+0x1a>
 8000b90:	6023      	str	r3, [r4, #0]
 8000b92:	bd38      	pop	{r3, r4, r5, pc}
 8000b94:	200001c0 	.word	0x200001c0

08000b98 <_lseek_r>:
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4d07      	ldr	r5, [pc, #28]	; (8000bb8 <_lseek_r+0x20>)
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	602a      	str	r2, [r5, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f7ff fcb8 	bl	800051c <_lseek>
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	d102      	bne.n	8000bb6 <_lseek_r+0x1e>
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	b103      	cbz	r3, 8000bb6 <_lseek_r+0x1e>
 8000bb4:	6023      	str	r3, [r4, #0]
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
 8000bb8:	200001c0 	.word	0x200001c0

08000bbc <_read_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d07      	ldr	r5, [pc, #28]	; (8000bdc <_read_r+0x20>)
 8000bc0:	4604      	mov	r4, r0
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	602a      	str	r2, [r5, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f7ff fc46 	bl	800045c <_read>
 8000bd0:	1c43      	adds	r3, r0, #1
 8000bd2:	d102      	bne.n	8000bda <_read_r+0x1e>
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	b103      	cbz	r3, 8000bda <_read_r+0x1e>
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	bd38      	pop	{r3, r4, r5, pc}
 8000bdc:	200001c0 	.word	0x200001c0

08000be0 <_write_r>:
 8000be0:	b538      	push	{r3, r4, r5, lr}
 8000be2:	4d07      	ldr	r5, [pc, #28]	; (8000c00 <_write_r+0x20>)
 8000be4:	4604      	mov	r4, r0
 8000be6:	4608      	mov	r0, r1
 8000be8:	4611      	mov	r1, r2
 8000bea:	2200      	movs	r2, #0
 8000bec:	602a      	str	r2, [r5, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f7ff fc51 	bl	8000496 <_write>
 8000bf4:	1c43      	adds	r3, r0, #1
 8000bf6:	d102      	bne.n	8000bfe <_write_r+0x1e>
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	b103      	cbz	r3, 8000bfe <_write_r+0x1e>
 8000bfc:	6023      	str	r3, [r4, #0]
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
 8000c00:	200001c0 	.word	0x200001c0

08000c04 <__errno>:
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <__errno+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000058 	.word	0x20000058

08000c10 <__libc_init_array>:
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	4d0d      	ldr	r5, [pc, #52]	; (8000c48 <__libc_init_array+0x38>)
 8000c14:	4c0d      	ldr	r4, [pc, #52]	; (8000c4c <__libc_init_array+0x3c>)
 8000c16:	1b64      	subs	r4, r4, r5
 8000c18:	10a4      	asrs	r4, r4, #2
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	42a6      	cmp	r6, r4
 8000c1e:	d109      	bne.n	8000c34 <__libc_init_array+0x24>
 8000c20:	4d0b      	ldr	r5, [pc, #44]	; (8000c50 <__libc_init_array+0x40>)
 8000c22:	4c0c      	ldr	r4, [pc, #48]	; (8000c54 <__libc_init_array+0x44>)
 8000c24:	f000 fa54 	bl	80010d0 <_init>
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	10a4      	asrs	r4, r4, #2
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	42a6      	cmp	r6, r4
 8000c30:	d105      	bne.n	8000c3e <__libc_init_array+0x2e>
 8000c32:	bd70      	pop	{r4, r5, r6, pc}
 8000c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c38:	4798      	blx	r3
 8000c3a:	3601      	adds	r6, #1
 8000c3c:	e7ee      	b.n	8000c1c <__libc_init_array+0xc>
 8000c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c42:	4798      	blx	r3
 8000c44:	3601      	adds	r6, #1
 8000c46:	e7f2      	b.n	8000c2e <__libc_init_array+0x1e>
 8000c48:	08001108 	.word	0x08001108
 8000c4c:	08001108 	.word	0x08001108
 8000c50:	08001108 	.word	0x08001108
 8000c54:	0800110c 	.word	0x0800110c

08000c58 <__retarget_lock_acquire_recursive>:
 8000c58:	4770      	bx	lr

08000c5a <__retarget_lock_release_recursive>:
 8000c5a:	4770      	bx	lr

08000c5c <_free_r>:
 8000c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c5e:	2900      	cmp	r1, #0
 8000c60:	d044      	beq.n	8000cec <_free_r+0x90>
 8000c62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c66:	9001      	str	r0, [sp, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f1a1 0404 	sub.w	r4, r1, #4
 8000c6e:	bfb8      	it	lt
 8000c70:	18e4      	addlt	r4, r4, r3
 8000c72:	f000 f8df 	bl	8000e34 <__malloc_lock>
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <_free_r+0x94>)
 8000c78:	9801      	ldr	r0, [sp, #4]
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	b933      	cbnz	r3, 8000c8c <_free_r+0x30>
 8000c7e:	6063      	str	r3, [r4, #4]
 8000c80:	6014      	str	r4, [r2, #0]
 8000c82:	b003      	add	sp, #12
 8000c84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c88:	f000 b8da 	b.w	8000e40 <__malloc_unlock>
 8000c8c:	42a3      	cmp	r3, r4
 8000c8e:	d908      	bls.n	8000ca2 <_free_r+0x46>
 8000c90:	6825      	ldr	r5, [r4, #0]
 8000c92:	1961      	adds	r1, r4, r5
 8000c94:	428b      	cmp	r3, r1
 8000c96:	bf01      	itttt	eq
 8000c98:	6819      	ldreq	r1, [r3, #0]
 8000c9a:	685b      	ldreq	r3, [r3, #4]
 8000c9c:	1949      	addeq	r1, r1, r5
 8000c9e:	6021      	streq	r1, [r4, #0]
 8000ca0:	e7ed      	b.n	8000c7e <_free_r+0x22>
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	b10b      	cbz	r3, 8000cac <_free_r+0x50>
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	d9fa      	bls.n	8000ca2 <_free_r+0x46>
 8000cac:	6811      	ldr	r1, [r2, #0]
 8000cae:	1855      	adds	r5, r2, r1
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	d10b      	bne.n	8000ccc <_free_r+0x70>
 8000cb4:	6824      	ldr	r4, [r4, #0]
 8000cb6:	4421      	add	r1, r4
 8000cb8:	1854      	adds	r4, r2, r1
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	6011      	str	r1, [r2, #0]
 8000cbe:	d1e0      	bne.n	8000c82 <_free_r+0x26>
 8000cc0:	681c      	ldr	r4, [r3, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	6053      	str	r3, [r2, #4]
 8000cc6:	440c      	add	r4, r1
 8000cc8:	6014      	str	r4, [r2, #0]
 8000cca:	e7da      	b.n	8000c82 <_free_r+0x26>
 8000ccc:	d902      	bls.n	8000cd4 <_free_r+0x78>
 8000cce:	230c      	movs	r3, #12
 8000cd0:	6003      	str	r3, [r0, #0]
 8000cd2:	e7d6      	b.n	8000c82 <_free_r+0x26>
 8000cd4:	6825      	ldr	r5, [r4, #0]
 8000cd6:	1961      	adds	r1, r4, r5
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf04      	itt	eq
 8000cdc:	6819      	ldreq	r1, [r3, #0]
 8000cde:	685b      	ldreq	r3, [r3, #4]
 8000ce0:	6063      	str	r3, [r4, #4]
 8000ce2:	bf04      	itt	eq
 8000ce4:	1949      	addeq	r1, r1, r5
 8000ce6:	6021      	streq	r1, [r4, #0]
 8000ce8:	6054      	str	r4, [r2, #4]
 8000cea:	e7ca      	b.n	8000c82 <_free_r+0x26>
 8000cec:	b003      	add	sp, #12
 8000cee:	bd30      	pop	{r4, r5, pc}
 8000cf0:	200001c8 	.word	0x200001c8

08000cf4 <sbrk_aligned>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	4e0e      	ldr	r6, [pc, #56]	; (8000d30 <sbrk_aligned+0x3c>)
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	6831      	ldr	r1, [r6, #0]
 8000cfc:	4605      	mov	r5, r0
 8000cfe:	b911      	cbnz	r1, 8000d06 <sbrk_aligned+0x12>
 8000d00:	f000 f9d6 	bl	80010b0 <_sbrk_r>
 8000d04:	6030      	str	r0, [r6, #0]
 8000d06:	4621      	mov	r1, r4
 8000d08:	4628      	mov	r0, r5
 8000d0a:	f000 f9d1 	bl	80010b0 <_sbrk_r>
 8000d0e:	1c43      	adds	r3, r0, #1
 8000d10:	d00a      	beq.n	8000d28 <sbrk_aligned+0x34>
 8000d12:	1cc4      	adds	r4, r0, #3
 8000d14:	f024 0403 	bic.w	r4, r4, #3
 8000d18:	42a0      	cmp	r0, r4
 8000d1a:	d007      	beq.n	8000d2c <sbrk_aligned+0x38>
 8000d1c:	1a21      	subs	r1, r4, r0
 8000d1e:	4628      	mov	r0, r5
 8000d20:	f000 f9c6 	bl	80010b0 <_sbrk_r>
 8000d24:	3001      	adds	r0, #1
 8000d26:	d101      	bne.n	8000d2c <sbrk_aligned+0x38>
 8000d28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
 8000d30:	200001cc 	.word	0x200001cc

08000d34 <_malloc_r>:
 8000d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d38:	1ccd      	adds	r5, r1, #3
 8000d3a:	f025 0503 	bic.w	r5, r5, #3
 8000d3e:	3508      	adds	r5, #8
 8000d40:	2d0c      	cmp	r5, #12
 8000d42:	bf38      	it	cc
 8000d44:	250c      	movcc	r5, #12
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	4607      	mov	r7, r0
 8000d4a:	db01      	blt.n	8000d50 <_malloc_r+0x1c>
 8000d4c:	42a9      	cmp	r1, r5
 8000d4e:	d905      	bls.n	8000d5c <_malloc_r+0x28>
 8000d50:	230c      	movs	r3, #12
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	2600      	movs	r6, #0
 8000d56:	4630      	mov	r0, r6
 8000d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000e30 <_malloc_r+0xfc>
 8000d60:	f000 f868 	bl	8000e34 <__malloc_lock>
 8000d64:	f8d8 3000 	ldr.w	r3, [r8]
 8000d68:	461c      	mov	r4, r3
 8000d6a:	bb5c      	cbnz	r4, 8000dc4 <_malloc_r+0x90>
 8000d6c:	4629      	mov	r1, r5
 8000d6e:	4638      	mov	r0, r7
 8000d70:	f7ff ffc0 	bl	8000cf4 <sbrk_aligned>
 8000d74:	1c43      	adds	r3, r0, #1
 8000d76:	4604      	mov	r4, r0
 8000d78:	d155      	bne.n	8000e26 <_malloc_r+0xf2>
 8000d7a:	f8d8 4000 	ldr.w	r4, [r8]
 8000d7e:	4626      	mov	r6, r4
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d145      	bne.n	8000e10 <_malloc_r+0xdc>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d048      	beq.n	8000e1a <_malloc_r+0xe6>
 8000d88:	6823      	ldr	r3, [r4, #0]
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	4638      	mov	r0, r7
 8000d8e:	eb04 0903 	add.w	r9, r4, r3
 8000d92:	f000 f98d 	bl	80010b0 <_sbrk_r>
 8000d96:	4581      	cmp	r9, r0
 8000d98:	d13f      	bne.n	8000e1a <_malloc_r+0xe6>
 8000d9a:	6821      	ldr	r1, [r4, #0]
 8000d9c:	1a6d      	subs	r5, r5, r1
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4638      	mov	r0, r7
 8000da2:	f7ff ffa7 	bl	8000cf4 <sbrk_aligned>
 8000da6:	3001      	adds	r0, #1
 8000da8:	d037      	beq.n	8000e1a <_malloc_r+0xe6>
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	442b      	add	r3, r5
 8000dae:	6023      	str	r3, [r4, #0]
 8000db0:	f8d8 3000 	ldr.w	r3, [r8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d038      	beq.n	8000e2a <_malloc_r+0xf6>
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	42a2      	cmp	r2, r4
 8000dbc:	d12b      	bne.n	8000e16 <_malloc_r+0xe2>
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	e00f      	b.n	8000de4 <_malloc_r+0xb0>
 8000dc4:	6822      	ldr	r2, [r4, #0]
 8000dc6:	1b52      	subs	r2, r2, r5
 8000dc8:	d41f      	bmi.n	8000e0a <_malloc_r+0xd6>
 8000dca:	2a0b      	cmp	r2, #11
 8000dcc:	d917      	bls.n	8000dfe <_malloc_r+0xca>
 8000dce:	1961      	adds	r1, r4, r5
 8000dd0:	42a3      	cmp	r3, r4
 8000dd2:	6025      	str	r5, [r4, #0]
 8000dd4:	bf18      	it	ne
 8000dd6:	6059      	strne	r1, [r3, #4]
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	bf08      	it	eq
 8000ddc:	f8c8 1000 	streq.w	r1, [r8]
 8000de0:	5162      	str	r2, [r4, r5]
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	4638      	mov	r0, r7
 8000de6:	f104 060b 	add.w	r6, r4, #11
 8000dea:	f000 f829 	bl	8000e40 <__malloc_unlock>
 8000dee:	f026 0607 	bic.w	r6, r6, #7
 8000df2:	1d23      	adds	r3, r4, #4
 8000df4:	1af2      	subs	r2, r6, r3
 8000df6:	d0ae      	beq.n	8000d56 <_malloc_r+0x22>
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	50a3      	str	r3, [r4, r2]
 8000dfc:	e7ab      	b.n	8000d56 <_malloc_r+0x22>
 8000dfe:	42a3      	cmp	r3, r4
 8000e00:	6862      	ldr	r2, [r4, #4]
 8000e02:	d1dd      	bne.n	8000dc0 <_malloc_r+0x8c>
 8000e04:	f8c8 2000 	str.w	r2, [r8]
 8000e08:	e7ec      	b.n	8000de4 <_malloc_r+0xb0>
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	6864      	ldr	r4, [r4, #4]
 8000e0e:	e7ac      	b.n	8000d6a <_malloc_r+0x36>
 8000e10:	4634      	mov	r4, r6
 8000e12:	6876      	ldr	r6, [r6, #4]
 8000e14:	e7b4      	b.n	8000d80 <_malloc_r+0x4c>
 8000e16:	4613      	mov	r3, r2
 8000e18:	e7cc      	b.n	8000db4 <_malloc_r+0x80>
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4638      	mov	r0, r7
 8000e20:	f000 f80e 	bl	8000e40 <__malloc_unlock>
 8000e24:	e797      	b.n	8000d56 <_malloc_r+0x22>
 8000e26:	6025      	str	r5, [r4, #0]
 8000e28:	e7dc      	b.n	8000de4 <_malloc_r+0xb0>
 8000e2a:	605b      	str	r3, [r3, #4]
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	bf00      	nop
 8000e30:	200001c8 	.word	0x200001c8

08000e34 <__malloc_lock>:
 8000e34:	4801      	ldr	r0, [pc, #4]	; (8000e3c <__malloc_lock+0x8>)
 8000e36:	f7ff bf0f 	b.w	8000c58 <__retarget_lock_acquire_recursive>
 8000e3a:	bf00      	nop
 8000e3c:	200001c4 	.word	0x200001c4

08000e40 <__malloc_unlock>:
 8000e40:	4801      	ldr	r0, [pc, #4]	; (8000e48 <__malloc_unlock+0x8>)
 8000e42:	f7ff bf0a 	b.w	8000c5a <__retarget_lock_release_recursive>
 8000e46:	bf00      	nop
 8000e48:	200001c4 	.word	0x200001c4

08000e4c <__sflush_r>:
 8000e4c:	898a      	ldrh	r2, [r1, #12]
 8000e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e52:	4605      	mov	r5, r0
 8000e54:	0710      	lsls	r0, r2, #28
 8000e56:	460c      	mov	r4, r1
 8000e58:	d458      	bmi.n	8000f0c <__sflush_r+0xc0>
 8000e5a:	684b      	ldr	r3, [r1, #4]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	dc05      	bgt.n	8000e6c <__sflush_r+0x20>
 8000e60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	dc02      	bgt.n	8000e6c <__sflush_r+0x20>
 8000e66:	2000      	movs	r0, #0
 8000e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	d0f9      	beq.n	8000e66 <__sflush_r+0x1a>
 8000e72:	2300      	movs	r3, #0
 8000e74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e78:	682f      	ldr	r7, [r5, #0]
 8000e7a:	6a21      	ldr	r1, [r4, #32]
 8000e7c:	602b      	str	r3, [r5, #0]
 8000e7e:	d032      	beq.n	8000ee6 <__sflush_r+0x9a>
 8000e80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e82:	89a3      	ldrh	r3, [r4, #12]
 8000e84:	075a      	lsls	r2, r3, #29
 8000e86:	d505      	bpl.n	8000e94 <__sflush_r+0x48>
 8000e88:	6863      	ldr	r3, [r4, #4]
 8000e8a:	1ac0      	subs	r0, r0, r3
 8000e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e8e:	b10b      	cbz	r3, 8000e94 <__sflush_r+0x48>
 8000e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e92:	1ac0      	subs	r0, r0, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	4602      	mov	r2, r0
 8000e98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000e9a:	6a21      	ldr	r1, [r4, #32]
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	47b0      	blx	r6
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	89a3      	ldrh	r3, [r4, #12]
 8000ea4:	d106      	bne.n	8000eb4 <__sflush_r+0x68>
 8000ea6:	6829      	ldr	r1, [r5, #0]
 8000ea8:	291d      	cmp	r1, #29
 8000eaa:	d82b      	bhi.n	8000f04 <__sflush_r+0xb8>
 8000eac:	4a29      	ldr	r2, [pc, #164]	; (8000f54 <__sflush_r+0x108>)
 8000eae:	410a      	asrs	r2, r1
 8000eb0:	07d6      	lsls	r6, r2, #31
 8000eb2:	d427      	bmi.n	8000f04 <__sflush_r+0xb8>
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6062      	str	r2, [r4, #4]
 8000eb8:	04d9      	lsls	r1, r3, #19
 8000eba:	6922      	ldr	r2, [r4, #16]
 8000ebc:	6022      	str	r2, [r4, #0]
 8000ebe:	d504      	bpl.n	8000eca <__sflush_r+0x7e>
 8000ec0:	1c42      	adds	r2, r0, #1
 8000ec2:	d101      	bne.n	8000ec8 <__sflush_r+0x7c>
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	b903      	cbnz	r3, 8000eca <__sflush_r+0x7e>
 8000ec8:	6560      	str	r0, [r4, #84]	; 0x54
 8000eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ecc:	602f      	str	r7, [r5, #0]
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d0c9      	beq.n	8000e66 <__sflush_r+0x1a>
 8000ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	d002      	beq.n	8000ee0 <__sflush_r+0x94>
 8000eda:	4628      	mov	r0, r5
 8000edc:	f7ff febe 	bl	8000c5c <_free_r>
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	6360      	str	r0, [r4, #52]	; 0x34
 8000ee4:	e7c0      	b.n	8000e68 <__sflush_r+0x1c>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4628      	mov	r0, r5
 8000eea:	47b0      	blx	r6
 8000eec:	1c41      	adds	r1, r0, #1
 8000eee:	d1c8      	bne.n	8000e82 <__sflush_r+0x36>
 8000ef0:	682b      	ldr	r3, [r5, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0c5      	beq.n	8000e82 <__sflush_r+0x36>
 8000ef6:	2b1d      	cmp	r3, #29
 8000ef8:	d001      	beq.n	8000efe <__sflush_r+0xb2>
 8000efa:	2b16      	cmp	r3, #22
 8000efc:	d101      	bne.n	8000f02 <__sflush_r+0xb6>
 8000efe:	602f      	str	r7, [r5, #0]
 8000f00:	e7b1      	b.n	8000e66 <__sflush_r+0x1a>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f08:	81a3      	strh	r3, [r4, #12]
 8000f0a:	e7ad      	b.n	8000e68 <__sflush_r+0x1c>
 8000f0c:	690f      	ldr	r7, [r1, #16]
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d0a9      	beq.n	8000e66 <__sflush_r+0x1a>
 8000f12:	0793      	lsls	r3, r2, #30
 8000f14:	680e      	ldr	r6, [r1, #0]
 8000f16:	bf08      	it	eq
 8000f18:	694b      	ldreq	r3, [r1, #20]
 8000f1a:	600f      	str	r7, [r1, #0]
 8000f1c:	bf18      	it	ne
 8000f1e:	2300      	movne	r3, #0
 8000f20:	eba6 0807 	sub.w	r8, r6, r7
 8000f24:	608b      	str	r3, [r1, #8]
 8000f26:	f1b8 0f00 	cmp.w	r8, #0
 8000f2a:	dd9c      	ble.n	8000e66 <__sflush_r+0x1a>
 8000f2c:	6a21      	ldr	r1, [r4, #32]
 8000f2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000f30:	4643      	mov	r3, r8
 8000f32:	463a      	mov	r2, r7
 8000f34:	4628      	mov	r0, r5
 8000f36:	47b0      	blx	r6
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	dc06      	bgt.n	8000f4a <__sflush_r+0xfe>
 8000f3c:	89a3      	ldrh	r3, [r4, #12]
 8000f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f42:	81a3      	strh	r3, [r4, #12]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	e78e      	b.n	8000e68 <__sflush_r+0x1c>
 8000f4a:	4407      	add	r7, r0
 8000f4c:	eba8 0800 	sub.w	r8, r8, r0
 8000f50:	e7e9      	b.n	8000f26 <__sflush_r+0xda>
 8000f52:	bf00      	nop
 8000f54:	dfbffffe 	.word	0xdfbffffe

08000f58 <_fflush_r>:
 8000f58:	b538      	push	{r3, r4, r5, lr}
 8000f5a:	690b      	ldr	r3, [r1, #16]
 8000f5c:	4605      	mov	r5, r0
 8000f5e:	460c      	mov	r4, r1
 8000f60:	b913      	cbnz	r3, 8000f68 <_fflush_r+0x10>
 8000f62:	2500      	movs	r5, #0
 8000f64:	4628      	mov	r0, r5
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	b118      	cbz	r0, 8000f72 <_fflush_r+0x1a>
 8000f6a:	6a03      	ldr	r3, [r0, #32]
 8000f6c:	b90b      	cbnz	r3, 8000f72 <_fflush_r+0x1a>
 8000f6e:	f7ff fc91 	bl	8000894 <__sinit>
 8000f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f3      	beq.n	8000f62 <_fflush_r+0xa>
 8000f7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000f7c:	07d0      	lsls	r0, r2, #31
 8000f7e:	d404      	bmi.n	8000f8a <_fflush_r+0x32>
 8000f80:	0599      	lsls	r1, r3, #22
 8000f82:	d402      	bmi.n	8000f8a <_fflush_r+0x32>
 8000f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000f86:	f7ff fe67 	bl	8000c58 <__retarget_lock_acquire_recursive>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	f7ff ff5d 	bl	8000e4c <__sflush_r>
 8000f92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000f94:	07da      	lsls	r2, r3, #31
 8000f96:	4605      	mov	r5, r0
 8000f98:	d4e4      	bmi.n	8000f64 <_fflush_r+0xc>
 8000f9a:	89a3      	ldrh	r3, [r4, #12]
 8000f9c:	059b      	lsls	r3, r3, #22
 8000f9e:	d4e1      	bmi.n	8000f64 <_fflush_r+0xc>
 8000fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000fa2:	f7ff fe5a 	bl	8000c5a <__retarget_lock_release_recursive>
 8000fa6:	e7dd      	b.n	8000f64 <_fflush_r+0xc>

08000fa8 <__swhatbuf_r>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	460c      	mov	r4, r1
 8000fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb0:	2900      	cmp	r1, #0
 8000fb2:	b096      	sub	sp, #88	; 0x58
 8000fb4:	4615      	mov	r5, r2
 8000fb6:	461e      	mov	r6, r3
 8000fb8:	da0d      	bge.n	8000fd6 <__swhatbuf_r+0x2e>
 8000fba:	89a3      	ldrh	r3, [r4, #12]
 8000fbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000fc0:	f04f 0100 	mov.w	r1, #0
 8000fc4:	bf0c      	ite	eq
 8000fc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000fca:	2340      	movne	r3, #64	; 0x40
 8000fcc:	2000      	movs	r0, #0
 8000fce:	6031      	str	r1, [r6, #0]
 8000fd0:	602b      	str	r3, [r5, #0]
 8000fd2:	b016      	add	sp, #88	; 0x58
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
 8000fd6:	466a      	mov	r2, sp
 8000fd8:	f000 f848 	bl	800106c <_fstat_r>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	dbec      	blt.n	8000fba <__swhatbuf_r+0x12>
 8000fe0:	9901      	ldr	r1, [sp, #4]
 8000fe2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000fe6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000fea:	4259      	negs	r1, r3
 8000fec:	4159      	adcs	r1, r3
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	e7eb      	b.n	8000fcc <__swhatbuf_r+0x24>

08000ff4 <__smakebuf_r>:
 8000ff4:	898b      	ldrh	r3, [r1, #12]
 8000ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ff8:	079d      	lsls	r5, r3, #30
 8000ffa:	4606      	mov	r6, r0
 8000ffc:	460c      	mov	r4, r1
 8000ffe:	d507      	bpl.n	8001010 <__smakebuf_r+0x1c>
 8001000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001004:	6023      	str	r3, [r4, #0]
 8001006:	6123      	str	r3, [r4, #16]
 8001008:	2301      	movs	r3, #1
 800100a:	6163      	str	r3, [r4, #20]
 800100c:	b002      	add	sp, #8
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	ab01      	add	r3, sp, #4
 8001012:	466a      	mov	r2, sp
 8001014:	f7ff ffc8 	bl	8000fa8 <__swhatbuf_r>
 8001018:	9900      	ldr	r1, [sp, #0]
 800101a:	4605      	mov	r5, r0
 800101c:	4630      	mov	r0, r6
 800101e:	f7ff fe89 	bl	8000d34 <_malloc_r>
 8001022:	b948      	cbnz	r0, 8001038 <__smakebuf_r+0x44>
 8001024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001028:	059a      	lsls	r2, r3, #22
 800102a:	d4ef      	bmi.n	800100c <__smakebuf_r+0x18>
 800102c:	f023 0303 	bic.w	r3, r3, #3
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	81a3      	strh	r3, [r4, #12]
 8001036:	e7e3      	b.n	8001000 <__smakebuf_r+0xc>
 8001038:	89a3      	ldrh	r3, [r4, #12]
 800103a:	6020      	str	r0, [r4, #0]
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	81a3      	strh	r3, [r4, #12]
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	6163      	str	r3, [r4, #20]
 8001046:	9b01      	ldr	r3, [sp, #4]
 8001048:	6120      	str	r0, [r4, #16]
 800104a:	b15b      	cbz	r3, 8001064 <__smakebuf_r+0x70>
 800104c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001050:	4630      	mov	r0, r6
 8001052:	f000 f81d 	bl	8001090 <_isatty_r>
 8001056:	b128      	cbz	r0, 8001064 <__smakebuf_r+0x70>
 8001058:	89a3      	ldrh	r3, [r4, #12]
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	81a3      	strh	r3, [r4, #12]
 8001064:	89a3      	ldrh	r3, [r4, #12]
 8001066:	431d      	orrs	r5, r3
 8001068:	81a5      	strh	r5, [r4, #12]
 800106a:	e7cf      	b.n	800100c <__smakebuf_r+0x18>

0800106c <_fstat_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4d07      	ldr	r5, [pc, #28]	; (800108c <_fstat_r+0x20>)
 8001070:	2300      	movs	r3, #0
 8001072:	4604      	mov	r4, r0
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	602b      	str	r3, [r5, #0]
 800107a:	f7ff fa34 	bl	80004e6 <_fstat>
 800107e:	1c43      	adds	r3, r0, #1
 8001080:	d102      	bne.n	8001088 <_fstat_r+0x1c>
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	b103      	cbz	r3, 8001088 <_fstat_r+0x1c>
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	bd38      	pop	{r3, r4, r5, pc}
 800108a:	bf00      	nop
 800108c:	200001c0 	.word	0x200001c0

08001090 <_isatty_r>:
 8001090:	b538      	push	{r3, r4, r5, lr}
 8001092:	4d06      	ldr	r5, [pc, #24]	; (80010ac <_isatty_r+0x1c>)
 8001094:	2300      	movs	r3, #0
 8001096:	4604      	mov	r4, r0
 8001098:	4608      	mov	r0, r1
 800109a:	602b      	str	r3, [r5, #0]
 800109c:	f7ff fa33 	bl	8000506 <_isatty>
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	d102      	bne.n	80010aa <_isatty_r+0x1a>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	b103      	cbz	r3, 80010aa <_isatty_r+0x1a>
 80010a8:	6023      	str	r3, [r4, #0]
 80010aa:	bd38      	pop	{r3, r4, r5, pc}
 80010ac:	200001c0 	.word	0x200001c0

080010b0 <_sbrk_r>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4d06      	ldr	r5, [pc, #24]	; (80010cc <_sbrk_r+0x1c>)
 80010b4:	2300      	movs	r3, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	602b      	str	r3, [r5, #0]
 80010bc:	f7ff fa3c 	bl	8000538 <_sbrk>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d102      	bne.n	80010ca <_sbrk_r+0x1a>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	b103      	cbz	r3, 80010ca <_sbrk_r+0x1a>
 80010c8:	6023      	str	r3, [r4, #0]
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	200001c0 	.word	0x200001c0

080010d0 <_init>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	bf00      	nop
 80010d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d6:	bc08      	pop	{r3}
 80010d8:	469e      	mov	lr, r3
 80010da:	4770      	bx	lr

080010dc <_fini>:
 80010dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010de:	bf00      	nop
 80010e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010e2:	bc08      	pop	{r3}
 80010e4:	469e      	mov	lr, r3
 80010e6:	4770      	bx	lr
