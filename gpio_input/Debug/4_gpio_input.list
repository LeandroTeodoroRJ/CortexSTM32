
4_gpio_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000428  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00010428  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00010428  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000428  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000428  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000428  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000609  00000000  00000000  0001049b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020d  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000deaa  00000000  00000000  00010da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ab9  00000000  00000000  0001ec50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004ff69  00000000  00000000  0001f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000158  00000000  00000000  0006f674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0006f7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000408 	.word	0x08000408

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000408 	.word	0x08000408

080001d8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d106      	bne.n	80001f6 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 80001f4:	e030      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <enable_gpio_clock+0x8c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <enable_gpio_clock+0x8c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000208:	e026      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d106      	bne.n	800021e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <enable_gpio_clock+0x8c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <enable_gpio_clock+0x8c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021c:	e01c      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d106      	bne.n	8000232 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <enable_gpio_clock+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <enable_gpio_clock+0x8c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e012      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d106      	bne.n	8000246 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <enable_gpio_clock+0x8c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <enable_gpio_clock+0x8c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000244:	e008      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b05      	cmp	r3, #5
 800024a:	d105      	bne.n	8000258 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <enable_gpio_clock+0x8c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <enable_gpio_clock+0x8c>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ ((uint32_t)3 << pin_number*2);		//3d -- 0b11
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <digital_pin_state>:

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
	pGPIO->ODR ^= (1 << pin_number);	//Exclusive OR
}

void digital_pin_state(GPIO_TypeDef *pGPIO, uint32_t pin_number, uint8_t state){
 80002aa:	b480      	push	{r7}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71fb      	strb	r3, [r7, #7]
	if (state == SET){
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d109      	bne.n	80002d2 <digital_pin_state+0x28>
		pGPIO->BSRR |= (1U << pin_number);
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	699a      	ldr	r2, [r3, #24]
 80002c2:	2101      	movs	r1, #1
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	431a      	orrs	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	619a      	str	r2, [r3, #24]
	}else{
		pGPIO->BSRR |= (1U << (pin_number+16));
	}
}
 80002d0:	e009      	b.n	80002e6 <digital_pin_state+0x3c>
		pGPIO->BSRR |= (1U << (pin_number+16));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	699a      	ldr	r2, [r3, #24]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	3310      	adds	r3, #16
 80002da:	2101      	movs	r1, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	431a      	orrs	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	619a      	str	r2, [r3, #24]
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <read_gpio_pin>:

uint32_t read_gpio_pin(GPIO_TypeDef *pGPIO, uint32_t pin_number){
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]
	return (pGPIO->IDR & (1U << pin_number));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691a      	ldr	r2, [r3, #16]
 8000300:	2101      	movs	r1, #1
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	4013      	ands	r3, r2
}
 800030a:	4618      	mov	r0, r3
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <main>:
#define BTN_ONBOARD		PIN13
#define BUTTON_PRESSED	0
#define LED_ON			SET
#define LED_OFF			RESET

int main(void){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	// Enable clock
	enable_gpio_clock(PORT_A);
 800031c:	2000      	movs	r0, #0
 800031e:	f7ff ff5b 	bl	80001d8 <enable_gpio_clock>
	enable_gpio_clock(PORT_C);
 8000322:	2002      	movs	r0, #2
 8000324:	f7ff ff58 	bl	80001d8 <enable_gpio_clock>

	// Configure PA5 as output
	gpio_config(GPIOA, OUTPUT_MODE,	LED_ONBOARD);
 8000328:	2205      	movs	r2, #5
 800032a:	2101      	movs	r1, #1
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <main+0x4c>)
 800032e:	f7ff ff9b 	bl	8000268 <gpio_config>

	// Configure PC13 as input
	gpio_config(GPIOC, INPUT_MODE, BTN_ONBOARD);
 8000332:	220d      	movs	r2, #13
 8000334:	2100      	movs	r1, #0
 8000336:	480c      	ldr	r0, [pc, #48]	; (8000368 <main+0x50>)
 8000338:	f7ff ff96 	bl	8000268 <gpio_config>

	while(1){
		if (read_gpio_pin(GPIOC, BTN_ONBOARD) == BUTTON_PRESSED){
 800033c:	210d      	movs	r1, #13
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <main+0x50>)
 8000340:	f7ff ffd7 	bl	80002f2 <read_gpio_pin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d105      	bne.n	8000356 <main+0x3e>
			digital_pin_state(GPIOA, LED_ONBOARD, LED_ON);
 800034a:	2201      	movs	r2, #1
 800034c:	2105      	movs	r1, #5
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <main+0x4c>)
 8000350:	f7ff ffab 	bl	80002aa <digital_pin_state>
 8000354:	e7f2      	b.n	800033c <main+0x24>
		}else{
			digital_pin_state(GPIOA, LED_ONBOARD, LED_OFF);
 8000356:	2200      	movs	r2, #0
 8000358:	2105      	movs	r1, #5
 800035a:	4802      	ldr	r0, [pc, #8]	; (8000364 <main+0x4c>)
 800035c:	f7ff ffa5 	bl	80002aa <digital_pin_state>
		if (read_gpio_pin(GPIOC, BTN_ONBOARD) == BUTTON_PRESSED){
 8000360:	e7ec      	b.n	800033c <main+0x24>
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000
 8000368:	40020800 	.word	0x40020800

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f000 f811 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ffbb 	bl	8000318 <main>

080003a2 <LoopForever>:

LoopForever:
  b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b0:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 80003b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b8:	2000001c 	.word	0x2000001c

080003bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
