
4_gpio_input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000420  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000420  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000609  00000000  00000000  00010493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020d  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005e  00000000  00000000  00010d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000de98  00000000  00000000  00010d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ab6  00000000  00000000  0001ec36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004ff37  00000000  00000000  0001f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000158  00000000  00000000  0006f624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0006f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000400 	.word	0x08000400

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000400 	.word	0x08000400

080001d8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d106      	bne.n	80001f6 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 80001f4:	e030      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <enable_gpio_clock+0x8c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <enable_gpio_clock+0x8c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000208:	e026      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d106      	bne.n	800021e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <enable_gpio_clock+0x8c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <enable_gpio_clock+0x8c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021c:	e01c      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d106      	bne.n	8000232 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <enable_gpio_clock+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <enable_gpio_clock+0x8c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e012      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d106      	bne.n	8000246 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <enable_gpio_clock+0x8c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <enable_gpio_clock+0x8c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000244:	e008      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b05      	cmp	r3, #5
 800024a:	d105      	bne.n	8000258 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <enable_gpio_clock+0x8c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <enable_gpio_clock+0x8c>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ (11 << pin_number*2);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	210b      	movs	r1, #11
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	43d2      	mvns	r2, r2
 8000284:	401a      	ands	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <digital_pin_state>:

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
	pGPIO->ODR ^= (1 << pin_number);
}

void digital_pin_state(GPIO_TypeDef *pGPIO, uint32_t pin_number, uint8_t state){
 80002aa:	b480      	push	{r7}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	60f8      	str	r0, [r7, #12]
 80002b2:	60b9      	str	r1, [r7, #8]
 80002b4:	4613      	mov	r3, r2
 80002b6:	71fb      	strb	r3, [r7, #7]
	if (state == SET){
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d109      	bne.n	80002d2 <digital_pin_state+0x28>
		pGPIO->BSRR |= (1U << pin_number);
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	699a      	ldr	r2, [r3, #24]
 80002c2:	2101      	movs	r1, #1
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ca:	431a      	orrs	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	619a      	str	r2, [r3, #24]
	}else{
		pGPIO->BSRR |= (1U << (pin_number+16));
	}
}
 80002d0:	e009      	b.n	80002e6 <digital_pin_state+0x3c>
		pGPIO->BSRR |= (1U << (pin_number+16));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	699a      	ldr	r2, [r3, #24]
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	3310      	adds	r3, #16
 80002da:	2101      	movs	r1, #1
 80002dc:	fa01 f303 	lsl.w	r3, r1, r3
 80002e0:	431a      	orrs	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	619a      	str	r2, [r3, #24]
}
 80002e6:	bf00      	nop
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr

080002f2 <read_gpio_pin>:

uint32_t read_gpio_pin(GPIO_TypeDef *pGPIO, uint32_t pin_number){
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
 80002fa:	6039      	str	r1, [r7, #0]
	return (pGPIO->IDR & pin_number);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691a      	ldr	r2, [r3, #16]
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	4013      	ands	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <main>:
#include "gpio.h"

#define LED_PIN		PIN5
#define BTN_PIN		PIN13

int main(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	// Enable clock
	enable_gpio_clock(PORT_A);
 8000314:	2000      	movs	r0, #0
 8000316:	f7ff ff5f 	bl	80001d8 <enable_gpio_clock>
	enable_gpio_clock(PORT_C);
 800031a:	2002      	movs	r0, #2
 800031c:	f7ff ff5c 	bl	80001d8 <enable_gpio_clock>

	// Configure PA5 as output
	gpio_config(
 8000320:	2205      	movs	r2, #5
 8000322:	2101      	movs	r1, #1
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0x4c>)
 8000326:	f7ff ff9f 	bl	8000268 <gpio_config>
			OUTPUT_MODE,
			PIN5
			);

	// Configure PC13 as input
	gpio_config(
 800032a:	220d      	movs	r2, #13
 800032c:	2100      	movs	r1, #0
 800032e:	480c      	ldr	r0, [pc, #48]	; (8000360 <main+0x50>)
 8000330:	f7ff ff9a 	bl	8000268 <gpio_config>
			INPUT_MODE,
			PIN13
			);

	while(1){
		if (read_gpio_pin(GPIOC, PIN13)){
 8000334:	210d      	movs	r1, #13
 8000336:	480a      	ldr	r0, [pc, #40]	; (8000360 <main+0x50>)
 8000338:	f7ff ffdb 	bl	80002f2 <read_gpio_pin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d005      	beq.n	800034e <main+0x3e>
			digital_pin_state(GPIOA, PIN5, SET);	// Led on, button not pressed
 8000342:	2201      	movs	r2, #1
 8000344:	2105      	movs	r1, #5
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <main+0x4c>)
 8000348:	f7ff ffaf 	bl	80002aa <digital_pin_state>
 800034c:	e7f2      	b.n	8000334 <main+0x24>
		}else{
			digital_pin_state(GPIOA, PIN5, RESET);	// Led off, button pressed, input pin = 0.
 800034e:	2200      	movs	r2, #0
 8000350:	2105      	movs	r1, #5
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x4c>)
 8000354:	f7ff ffa9 	bl	80002aa <digital_pin_state>
		if (read_gpio_pin(GPIOC, PIN13)){
 8000358:	e7ec      	b.n	8000334 <main+0x24>
 800035a:	bf00      	nop
 800035c:	40020000 	.word	0x40020000
 8000360:	40020800 	.word	0x40020800

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000368:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ffbb 	bl	8000310 <main>

0800039a <LoopForever>:

LoopForever:
  b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	; (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	; (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	; (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
