
20_timers_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000f3c  08000f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f50  08000f50  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f50  08000f50  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f50  08000f50  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f50  08000f50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000fb4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000fb4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017a4  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000064b  00000000  00000000  00021873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00021ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000115  00000000  00000000  00022058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ff0  00000000  00000000  0002216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001de0  00000000  00000000  0002415d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055ef3  00000000  00000000  00025f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b30  00000000  00000000  0007be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0007c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000f24 	.word	0x08000f24

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000f24 	.word	0x08000f24

080001d8 <main>:
uint32_t sensor_value;

static void tim2_callback(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <main+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <main+0x34>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure Pin
	GPIOA->MODER |= (1U << 10);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <main+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <main+0x38>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U << 11);
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <main+0x38>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	// Init the peripherals
	uart2_rxtx_init();
 8000200:	f000 f920 	bl	8000444 <uart2_rxtx_init>
	tim2_1hz_interrupt_init();
 8000204:	f000 f8e8 	bl	80003d8 <tim2_1hz_interrupt_init>

	while(1)
 8000208:	e7fe      	b.n	8000208 <main+0x30>
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <tim2_callback>:

	}
}


static void tim2_callback(void){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= LED_PIN;
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <tim2_callback+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <tim2_callback+0x1c>)
 800021e:	f083 0320 	eor.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
	printf("A second passed!! \n");
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <tim2_callback+0x20>)
 8000226:	f000 fae9 	bl	80007fc <puts>
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000
 8000234:	08000f3c 	.word	0x08000f3c

08000238 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	// Clear UIF - Ipdate interrupt flag
	TIM2->SR &=~ TIMSR_UIF;
 800023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000246:	f023 0301 	bic.w	r3, r3, #1
 800024a:	6113      	str	r3, [r2, #16]
	tim2_callback();
 800024c:	f7ff ffe2 	bl	8000214 <tim2_callback>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
 8000264:	e00a      	b.n	800027c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000266:	f3af 8000 	nop.w
 800026a:	4601      	mov	r1, r0
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	60ba      	str	r2, [r7, #8]
 8000272:	b2ca      	uxtb	r2, r1
 8000274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	3301      	adds	r3, #1
 800027a:	617b      	str	r3, [r7, #20]
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	dbf0      	blt.n	8000266 <_read+0x12>
  }

  return len;
 8000284:	687b      	ldr	r3, [r7, #4]
}
 8000286:	4618      	mov	r0, r3
 8000288:	3718      	adds	r7, #24
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b086      	sub	sp, #24
 8000292:	af00      	add	r7, sp, #0
 8000294:	60f8      	str	r0, [r7, #12]
 8000296:	60b9      	str	r1, [r7, #8]
 8000298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	e009      	b.n	80002b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80002a0:	68bb      	ldr	r3, [r7, #8]
 80002a2:	1c5a      	adds	r2, r3, #1
 80002a4:	60ba      	str	r2, [r7, #8]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f8bf 	bl	800042c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	3301      	adds	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	697a      	ldr	r2, [r7, #20]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	dbf1      	blt.n	80002a0 <_write+0x12>
  }
  return len;
 80002bc:	687b      	ldr	r3, [r7, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3718      	adds	r7, #24
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <_close>:

int _close(int file)
{
 80002c6:	b480      	push	{r7}
 80002c8:	b083      	sub	sp, #12
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002de:	b480      	push	{r7}
 80002e0:	b083      	sub	sp, #12
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	6078      	str	r0, [r7, #4]
 80002e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002ee:	605a      	str	r2, [r3, #4]
  return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <_isatty>:

int _isatty(int file)
{
 80002fe:	b480      	push	{r7}
 8000300:	b083      	sub	sp, #12
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000306:	2301      	movs	r3, #1
}
 8000308:	4618      	mov	r0, r3
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000320:	2300      	movs	r3, #0
}
 8000322:	4618      	mov	r0, r3
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
	...

08000330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000338:	4a14      	ldr	r2, [pc, #80]	; (800038c <_sbrk+0x5c>)
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <_sbrk+0x60>)
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <_sbrk+0x64>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d102      	bne.n	8000352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <_sbrk+0x64>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <_sbrk+0x68>)
 8000350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <_sbrk+0x64>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	693a      	ldr	r2, [r7, #16]
 800035c:	429a      	cmp	r2, r3
 800035e:	d207      	bcs.n	8000370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000360:	f000 fb7a 	bl	8000a58 <__errno>
 8000364:	4603      	mov	r3, r0
 8000366:	220c      	movs	r2, #12
 8000368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800036e:	e009      	b.n	8000384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <_sbrk+0x64>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	4a05      	ldr	r2, [pc, #20]	; (8000394 <_sbrk+0x64>)
 8000380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3718      	adds	r7, #24
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20020000 	.word	0x20020000
 8000390:	00000400 	.word	0x00000400
 8000394:	20000078 	.word	0x20000078
 8000398:	200001c8 	.word	0x200001c8

0800039c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	db0b      	blt.n	80003c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	f003 021f 	and.w	r2, r3, #31
 80003b4:	4907      	ldr	r1, [pc, #28]	; (80003d4 <__NVIC_EnableIRQ+0x38>)
 80003b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ba:	095b      	lsrs	r3, r3, #5
 80003bc:	2001      	movs	r0, #1
 80003be:	fa00 f202 	lsl.w	r2, r0, r2
 80003c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000e100 	.word	0xe000e100

080003d8 <tim2_1hz_interrupt_init>:
	TIM2->CR1 = TIMCR1_EN;

}


void tim2_1hz_interrupt_init(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	// Enable clock to timer 2
	RCC->APB1ENR |= TIM2EN;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <tim2_1hz_interrupt_init+0x50>)
 80003de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e0:	4a11      	ldr	r2, [pc, #68]	; (8000428 <tim2_1hz_interrupt_init+0x50>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6413      	str	r3, [r2, #64]	; 0x40

	// Set the prescaller value
	TIM2->PSC = 1600 - 1 ;	// Then 16000000(sysclk) / 16000(psc) = 10000
 80003e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ec:	f240 623f 	movw	r2, #1599	; 0x63f
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto-reload value
	TIM2->ARR = 10000 - 1;  //So 10000 / 10000 = 1Hz
 80003f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c

	// Clear counter
	TIM2->CNT = 0;
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	2200      	movs	r2, #0
 8000402:	625a      	str	r2, [r3, #36]	; 0x24

	// Reset CR1 and enable timer
	TIM2->CR1 = TIMCR1_EN;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]

	// Enable timer interrupt
	TIM2->DIER |= TIM2_INT_EN;
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	60d3      	str	r3, [r2, #12]

	// Enable timer 2 interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 800041c:	201c      	movs	r0, #28
 800041e:	f7ff ffbd 	bl	800039c <__NVIC_EnableIRQ>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800

0800042c <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

//It's necessary to declare this function to use with printf
int __io_putchar(int ch){
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000434:	6878      	ldr	r0, [r7, #4]
 8000436:	f000 f875 	bl	8000524 <uart2_write>
	return ch;
 800043a:	687b      	ldr	r3, [r7, #4]
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <uart2_rxtx_init>:


void uart2_rxtx_init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <uart2_rxtx_init+0xd0>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a31      	ldr	r2, [pc, #196]	; (8000514 <uart2_rxtx_init+0xd0>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000454:	4b30      	ldr	r3, [pc, #192]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a2f      	ldr	r2, [pc, #188]	; (8000518 <uart2_rxtx_init+0xd4>)
 800045a:	f023 0310 	bic.w	r3, r3, #16
 800045e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000460:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000466:	f043 0320 	orr.w	r3, r3, #32
 800046a:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 800046c:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <uart2_rxtx_init+0xd4>)
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	4a29      	ldr	r2, [pc, #164]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000476:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <uart2_rxtx_init+0xd4>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a26      	ldr	r2, [pc, #152]	; (8000518 <uart2_rxtx_init+0xd4>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000482:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000486:	6a1b      	ldr	r3, [r3, #32]
 8000488:	4a23      	ldr	r2, [pc, #140]	; (8000518 <uart2_rxtx_init+0xd4>)
 800048a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800048e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000492:	6a1b      	ldr	r3, [r3, #32]
 8000494:	4a20      	ldr	r2, [pc, #128]	; (8000518 <uart2_rxtx_init+0xd4>)
 8000496:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800049a:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <uart2_rxtx_init+0xd4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004b2:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 80004b4:	4b18      	ldr	r3, [pc, #96]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a17      	ldr	r2, [pc, #92]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80004c0:	4b15      	ldr	r3, [pc, #84]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004c2:	6a1b      	ldr	r3, [r3, #32]
 80004c4:	4a14      	ldr	r2, [pc, #80]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004da:	6a1b      	ldr	r3, [r3, #32]
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <uart2_rxtx_init+0xd4>)
 80004de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004e2:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <uart2_rxtx_init+0xd0>)
 80004e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <uart2_rxtx_init+0xd0>)
 80004ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ee:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	4909      	ldr	r1, [pc, #36]	; (800051c <uart2_rxtx_init+0xd8>)
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <uart2_rxtx_init+0xdc>)
 80004f8:	f000 f82c 	bl	8000554 <uart_set_baudrate>

	/*Configure the transfer direction*/
	// Enable transmitter and receiver
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <uart2_rxtx_init+0xdc>)
 80004fe:	220c      	movs	r2, #12
 8000500:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <uart2_rxtx_init+0xdc>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <uart2_rxtx_init+0xdc>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050c:	60d3      	str	r3, [r2, #12]


}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800
 8000518:	40020000 	.word	0x40020000
 800051c:	00f42400 	.word	0x00f42400
 8000520:	40004400 	.word	0x40004400

08000524 <uart2_write>:
	return USART2->DR;
}


void uart2_write(int ch)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 800052c:	bf00      	nop
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <uart2_write+0x2c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0f9      	beq.n	800052e <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <uart2_write+0x2c>)
 800053e:	b2db      	uxtb	r3, r3
 8000540:	6053      	str	r3, [r2, #4]
}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40004400 	.word	0x40004400

08000554 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000560:	6879      	ldr	r1, [r7, #4]
 8000562:	68b8      	ldr	r0, [r7, #8]
 8000564:	f000 f808 	bl	8000578 <compute_uart_bd>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	609a      	str	r2, [r3, #8]
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	085a      	lsrs	r2, r3, #1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	441a      	add	r2, r3
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000590:	b29b      	uxth	r3, r3
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005aa:	490d      	ldr	r1, [pc, #52]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005ac:	4a0d      	ldr	r2, [pc, #52]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c0:	4c0a      	ldr	r4, [pc, #40]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 fa49 	bl	8000a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe01 	bl	80001d8 <main>

080005d6 <LoopForever>:

LoopForever:
  b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005e4:	08000f58 	.word	0x08000f58
  ldr r2, =_sbss
 80005e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005ec:	200001c8 	.word	0x200001c8

080005f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <std>:
 80005f4:	2300      	movs	r3, #0
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	e9c0 3300 	strd	r3, r3, [r0]
 80005fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000602:	6083      	str	r3, [r0, #8]
 8000604:	8181      	strh	r1, [r0, #12]
 8000606:	6643      	str	r3, [r0, #100]	; 0x64
 8000608:	81c2      	strh	r2, [r0, #14]
 800060a:	6183      	str	r3, [r0, #24]
 800060c:	4619      	mov	r1, r3
 800060e:	2208      	movs	r2, #8
 8000610:	305c      	adds	r0, #92	; 0x5c
 8000612:	f000 f9d3 	bl	80009bc <memset>
 8000616:	4b05      	ldr	r3, [pc, #20]	; (800062c <std+0x38>)
 8000618:	6263      	str	r3, [r4, #36]	; 0x24
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <std+0x3c>)
 800061c:	62a3      	str	r3, [r4, #40]	; 0x28
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <std+0x40>)
 8000620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <std+0x44>)
 8000624:	6224      	str	r4, [r4, #32]
 8000626:	6323      	str	r3, [r4, #48]	; 0x30
 8000628:	bd10      	pop	{r4, pc}
 800062a:	bf00      	nop
 800062c:	0800080d 	.word	0x0800080d
 8000630:	0800082f 	.word	0x0800082f
 8000634:	08000867 	.word	0x08000867
 8000638:	0800088b 	.word	0x0800088b

0800063c <stdio_exit_handler>:
 800063c:	4a02      	ldr	r2, [pc, #8]	; (8000648 <stdio_exit_handler+0xc>)
 800063e:	4903      	ldr	r1, [pc, #12]	; (800064c <stdio_exit_handler+0x10>)
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <stdio_exit_handler+0x14>)
 8000642:	f000 b869 	b.w	8000718 <_fwalk_sglue>
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	08000dad 	.word	0x08000dad
 8000650:	2000000c 	.word	0x2000000c

08000654 <cleanup_stdio>:
 8000654:	6841      	ldr	r1, [r0, #4]
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <cleanup_stdio+0x34>)
 8000658:	4299      	cmp	r1, r3
 800065a:	b510      	push	{r4, lr}
 800065c:	4604      	mov	r4, r0
 800065e:	d001      	beq.n	8000664 <cleanup_stdio+0x10>
 8000660:	f000 fba4 	bl	8000dac <_fflush_r>
 8000664:	68a1      	ldr	r1, [r4, #8]
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <cleanup_stdio+0x38>)
 8000668:	4299      	cmp	r1, r3
 800066a:	d002      	beq.n	8000672 <cleanup_stdio+0x1e>
 800066c:	4620      	mov	r0, r4
 800066e:	f000 fb9d 	bl	8000dac <_fflush_r>
 8000672:	68e1      	ldr	r1, [r4, #12]
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <cleanup_stdio+0x3c>)
 8000676:	4299      	cmp	r1, r3
 8000678:	d004      	beq.n	8000684 <cleanup_stdio+0x30>
 800067a:	4620      	mov	r0, r4
 800067c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000680:	f000 bb94 	b.w	8000dac <_fflush_r>
 8000684:	bd10      	pop	{r4, pc}
 8000686:	bf00      	nop
 8000688:	2000007c 	.word	0x2000007c
 800068c:	200000e4 	.word	0x200000e4
 8000690:	2000014c 	.word	0x2000014c

08000694 <global_stdio_init.part.0>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <global_stdio_init.part.0+0x30>)
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <global_stdio_init.part.0+0x34>)
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <global_stdio_init.part.0+0x38>)
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	4620      	mov	r0, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	2104      	movs	r1, #4
 80006a4:	f7ff ffa6 	bl	80005f4 <std>
 80006a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80006ac:	2201      	movs	r2, #1
 80006ae:	2109      	movs	r1, #9
 80006b0:	f7ff ffa0 	bl	80005f4 <std>
 80006b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006b8:	2202      	movs	r2, #2
 80006ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006be:	2112      	movs	r1, #18
 80006c0:	f7ff bf98 	b.w	80005f4 <std>
 80006c4:	200001b4 	.word	0x200001b4
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	0800063d 	.word	0x0800063d

080006d0 <__sfp_lock_acquire>:
 80006d0:	4801      	ldr	r0, [pc, #4]	; (80006d8 <__sfp_lock_acquire+0x8>)
 80006d2:	f000 b9eb 	b.w	8000aac <__retarget_lock_acquire_recursive>
 80006d6:	bf00      	nop
 80006d8:	200001bd 	.word	0x200001bd

080006dc <__sfp_lock_release>:
 80006dc:	4801      	ldr	r0, [pc, #4]	; (80006e4 <__sfp_lock_release+0x8>)
 80006de:	f000 b9e6 	b.w	8000aae <__retarget_lock_release_recursive>
 80006e2:	bf00      	nop
 80006e4:	200001bd 	.word	0x200001bd

080006e8 <__sinit>:
 80006e8:	b510      	push	{r4, lr}
 80006ea:	4604      	mov	r4, r0
 80006ec:	f7ff fff0 	bl	80006d0 <__sfp_lock_acquire>
 80006f0:	6a23      	ldr	r3, [r4, #32]
 80006f2:	b11b      	cbz	r3, 80006fc <__sinit+0x14>
 80006f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f8:	f7ff bff0 	b.w	80006dc <__sfp_lock_release>
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <__sinit+0x28>)
 80006fe:	6223      	str	r3, [r4, #32]
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__sinit+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f5      	bne.n	80006f4 <__sinit+0xc>
 8000708:	f7ff ffc4 	bl	8000694 <global_stdio_init.part.0>
 800070c:	e7f2      	b.n	80006f4 <__sinit+0xc>
 800070e:	bf00      	nop
 8000710:	08000655 	.word	0x08000655
 8000714:	200001b4 	.word	0x200001b4

08000718 <_fwalk_sglue>:
 8000718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800071c:	4607      	mov	r7, r0
 800071e:	4688      	mov	r8, r1
 8000720:	4614      	mov	r4, r2
 8000722:	2600      	movs	r6, #0
 8000724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000728:	f1b9 0901 	subs.w	r9, r9, #1
 800072c:	d505      	bpl.n	800073a <_fwalk_sglue+0x22>
 800072e:	6824      	ldr	r4, [r4, #0]
 8000730:	2c00      	cmp	r4, #0
 8000732:	d1f7      	bne.n	8000724 <_fwalk_sglue+0xc>
 8000734:	4630      	mov	r0, r6
 8000736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800073a:	89ab      	ldrh	r3, [r5, #12]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d907      	bls.n	8000750 <_fwalk_sglue+0x38>
 8000740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000744:	3301      	adds	r3, #1
 8000746:	d003      	beq.n	8000750 <_fwalk_sglue+0x38>
 8000748:	4629      	mov	r1, r5
 800074a:	4638      	mov	r0, r7
 800074c:	47c0      	blx	r8
 800074e:	4306      	orrs	r6, r0
 8000750:	3568      	adds	r5, #104	; 0x68
 8000752:	e7e9      	b.n	8000728 <_fwalk_sglue+0x10>

08000754 <_puts_r>:
 8000754:	6a03      	ldr	r3, [r0, #32]
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	6884      	ldr	r4, [r0, #8]
 800075a:	4605      	mov	r5, r0
 800075c:	460e      	mov	r6, r1
 800075e:	b90b      	cbnz	r3, 8000764 <_puts_r+0x10>
 8000760:	f7ff ffc2 	bl	80006e8 <__sinit>
 8000764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000766:	07db      	lsls	r3, r3, #31
 8000768:	d405      	bmi.n	8000776 <_puts_r+0x22>
 800076a:	89a3      	ldrh	r3, [r4, #12]
 800076c:	0598      	lsls	r0, r3, #22
 800076e:	d402      	bmi.n	8000776 <_puts_r+0x22>
 8000770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000772:	f000 f99b 	bl	8000aac <__retarget_lock_acquire_recursive>
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	0719      	lsls	r1, r3, #28
 800077a:	d513      	bpl.n	80007a4 <_puts_r+0x50>
 800077c:	6923      	ldr	r3, [r4, #16]
 800077e:	b18b      	cbz	r3, 80007a4 <_puts_r+0x50>
 8000780:	3e01      	subs	r6, #1
 8000782:	68a3      	ldr	r3, [r4, #8]
 8000784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000788:	3b01      	subs	r3, #1
 800078a:	60a3      	str	r3, [r4, #8]
 800078c:	b9e9      	cbnz	r1, 80007ca <_puts_r+0x76>
 800078e:	2b00      	cmp	r3, #0
 8000790:	da2e      	bge.n	80007f0 <_puts_r+0x9c>
 8000792:	4622      	mov	r2, r4
 8000794:	210a      	movs	r1, #10
 8000796:	4628      	mov	r0, r5
 8000798:	f000 f87b 	bl	8000892 <__swbuf_r>
 800079c:	3001      	adds	r0, #1
 800079e:	d007      	beq.n	80007b0 <_puts_r+0x5c>
 80007a0:	250a      	movs	r5, #10
 80007a2:	e007      	b.n	80007b4 <_puts_r+0x60>
 80007a4:	4621      	mov	r1, r4
 80007a6:	4628      	mov	r0, r5
 80007a8:	f000 f8b0 	bl	800090c <__swsetup_r>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d0e7      	beq.n	8000780 <_puts_r+0x2c>
 80007b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80007b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007b6:	07da      	lsls	r2, r3, #31
 80007b8:	d405      	bmi.n	80007c6 <_puts_r+0x72>
 80007ba:	89a3      	ldrh	r3, [r4, #12]
 80007bc:	059b      	lsls	r3, r3, #22
 80007be:	d402      	bmi.n	80007c6 <_puts_r+0x72>
 80007c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007c2:	f000 f974 	bl	8000aae <__retarget_lock_release_recursive>
 80007c6:	4628      	mov	r0, r5
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da04      	bge.n	80007d8 <_puts_r+0x84>
 80007ce:	69a2      	ldr	r2, [r4, #24]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	dc06      	bgt.n	80007e2 <_puts_r+0x8e>
 80007d4:	290a      	cmp	r1, #10
 80007d6:	d004      	beq.n	80007e2 <_puts_r+0x8e>
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	6022      	str	r2, [r4, #0]
 80007de:	7019      	strb	r1, [r3, #0]
 80007e0:	e7cf      	b.n	8000782 <_puts_r+0x2e>
 80007e2:	4622      	mov	r2, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f854 	bl	8000892 <__swbuf_r>
 80007ea:	3001      	adds	r0, #1
 80007ec:	d1c9      	bne.n	8000782 <_puts_r+0x2e>
 80007ee:	e7df      	b.n	80007b0 <_puts_r+0x5c>
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	250a      	movs	r5, #10
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	6022      	str	r2, [r4, #0]
 80007f8:	701d      	strb	r5, [r3, #0]
 80007fa:	e7db      	b.n	80007b4 <_puts_r+0x60>

080007fc <puts>:
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <puts+0xc>)
 80007fe:	4601      	mov	r1, r0
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f7ff bfa7 	b.w	8000754 <_puts_r>
 8000806:	bf00      	nop
 8000808:	20000058 	.word	0x20000058

0800080c <__sread>:
 800080c:	b510      	push	{r4, lr}
 800080e:	460c      	mov	r4, r1
 8000810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000814:	f000 f8fc 	bl	8000a10 <_read_r>
 8000818:	2800      	cmp	r0, #0
 800081a:	bfab      	itete	ge
 800081c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800081e:	89a3      	ldrhlt	r3, [r4, #12]
 8000820:	181b      	addge	r3, r3, r0
 8000822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000826:	bfac      	ite	ge
 8000828:	6563      	strge	r3, [r4, #84]	; 0x54
 800082a:	81a3      	strhlt	r3, [r4, #12]
 800082c:	bd10      	pop	{r4, pc}

0800082e <__swrite>:
 800082e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000832:	461f      	mov	r7, r3
 8000834:	898b      	ldrh	r3, [r1, #12]
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	4605      	mov	r5, r0
 800083a:	460c      	mov	r4, r1
 800083c:	4616      	mov	r6, r2
 800083e:	d505      	bpl.n	800084c <__swrite+0x1e>
 8000840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000844:	2302      	movs	r3, #2
 8000846:	2200      	movs	r2, #0
 8000848:	f000 f8d0 	bl	80009ec <_lseek_r>
 800084c:	89a3      	ldrh	r3, [r4, #12]
 800084e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000856:	81a3      	strh	r3, [r4, #12]
 8000858:	4632      	mov	r2, r6
 800085a:	463b      	mov	r3, r7
 800085c:	4628      	mov	r0, r5
 800085e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000862:	f000 b8e7 	b.w	8000a34 <_write_r>

08000866 <__sseek>:
 8000866:	b510      	push	{r4, lr}
 8000868:	460c      	mov	r4, r1
 800086a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800086e:	f000 f8bd 	bl	80009ec <_lseek_r>
 8000872:	1c43      	adds	r3, r0, #1
 8000874:	89a3      	ldrh	r3, [r4, #12]
 8000876:	bf15      	itete	ne
 8000878:	6560      	strne	r0, [r4, #84]	; 0x54
 800087a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800087e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000882:	81a3      	strheq	r3, [r4, #12]
 8000884:	bf18      	it	ne
 8000886:	81a3      	strhne	r3, [r4, #12]
 8000888:	bd10      	pop	{r4, pc}

0800088a <__sclose>:
 800088a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800088e:	f000 b89d 	b.w	80009cc <_close_r>

08000892 <__swbuf_r>:
 8000892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000894:	460e      	mov	r6, r1
 8000896:	4614      	mov	r4, r2
 8000898:	4605      	mov	r5, r0
 800089a:	b118      	cbz	r0, 80008a4 <__swbuf_r+0x12>
 800089c:	6a03      	ldr	r3, [r0, #32]
 800089e:	b90b      	cbnz	r3, 80008a4 <__swbuf_r+0x12>
 80008a0:	f7ff ff22 	bl	80006e8 <__sinit>
 80008a4:	69a3      	ldr	r3, [r4, #24]
 80008a6:	60a3      	str	r3, [r4, #8]
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	071a      	lsls	r2, r3, #28
 80008ac:	d525      	bpl.n	80008fa <__swbuf_r+0x68>
 80008ae:	6923      	ldr	r3, [r4, #16]
 80008b0:	b31b      	cbz	r3, 80008fa <__swbuf_r+0x68>
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	6922      	ldr	r2, [r4, #16]
 80008b6:	1a98      	subs	r0, r3, r2
 80008b8:	6963      	ldr	r3, [r4, #20]
 80008ba:	b2f6      	uxtb	r6, r6
 80008bc:	4283      	cmp	r3, r0
 80008be:	4637      	mov	r7, r6
 80008c0:	dc04      	bgt.n	80008cc <__swbuf_r+0x3a>
 80008c2:	4621      	mov	r1, r4
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 fa71 	bl	8000dac <_fflush_r>
 80008ca:	b9e0      	cbnz	r0, 8000906 <__swbuf_r+0x74>
 80008cc:	68a3      	ldr	r3, [r4, #8]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	60a3      	str	r3, [r4, #8]
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	6022      	str	r2, [r4, #0]
 80008d8:	701e      	strb	r6, [r3, #0]
 80008da:	6962      	ldr	r2, [r4, #20]
 80008dc:	1c43      	adds	r3, r0, #1
 80008de:	429a      	cmp	r2, r3
 80008e0:	d004      	beq.n	80008ec <__swbuf_r+0x5a>
 80008e2:	89a3      	ldrh	r3, [r4, #12]
 80008e4:	07db      	lsls	r3, r3, #31
 80008e6:	d506      	bpl.n	80008f6 <__swbuf_r+0x64>
 80008e8:	2e0a      	cmp	r6, #10
 80008ea:	d104      	bne.n	80008f6 <__swbuf_r+0x64>
 80008ec:	4621      	mov	r1, r4
 80008ee:	4628      	mov	r0, r5
 80008f0:	f000 fa5c 	bl	8000dac <_fflush_r>
 80008f4:	b938      	cbnz	r0, 8000906 <__swbuf_r+0x74>
 80008f6:	4638      	mov	r0, r7
 80008f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008fa:	4621      	mov	r1, r4
 80008fc:	4628      	mov	r0, r5
 80008fe:	f000 f805 	bl	800090c <__swsetup_r>
 8000902:	2800      	cmp	r0, #0
 8000904:	d0d5      	beq.n	80008b2 <__swbuf_r+0x20>
 8000906:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800090a:	e7f4      	b.n	80008f6 <__swbuf_r+0x64>

0800090c <__swsetup_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <__swsetup_r+0xac>)
 8000910:	4605      	mov	r5, r0
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	460c      	mov	r4, r1
 8000916:	b118      	cbz	r0, 8000920 <__swsetup_r+0x14>
 8000918:	6a03      	ldr	r3, [r0, #32]
 800091a:	b90b      	cbnz	r3, 8000920 <__swsetup_r+0x14>
 800091c:	f7ff fee4 	bl	80006e8 <__sinit>
 8000920:	89a3      	ldrh	r3, [r4, #12]
 8000922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000926:	0718      	lsls	r0, r3, #28
 8000928:	d422      	bmi.n	8000970 <__swsetup_r+0x64>
 800092a:	06d9      	lsls	r1, r3, #27
 800092c:	d407      	bmi.n	800093e <__swsetup_r+0x32>
 800092e:	2309      	movs	r3, #9
 8000930:	602b      	str	r3, [r5, #0]
 8000932:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000936:	81a3      	strh	r3, [r4, #12]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800093c:	e034      	b.n	80009a8 <__swsetup_r+0x9c>
 800093e:	0758      	lsls	r0, r3, #29
 8000940:	d512      	bpl.n	8000968 <__swsetup_r+0x5c>
 8000942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000944:	b141      	cbz	r1, 8000958 <__swsetup_r+0x4c>
 8000946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800094a:	4299      	cmp	r1, r3
 800094c:	d002      	beq.n	8000954 <__swsetup_r+0x48>
 800094e:	4628      	mov	r0, r5
 8000950:	f000 f8ae 	bl	8000ab0 <_free_r>
 8000954:	2300      	movs	r3, #0
 8000956:	6363      	str	r3, [r4, #52]	; 0x34
 8000958:	89a3      	ldrh	r3, [r4, #12]
 800095a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800095e:	81a3      	strh	r3, [r4, #12]
 8000960:	2300      	movs	r3, #0
 8000962:	6063      	str	r3, [r4, #4]
 8000964:	6923      	ldr	r3, [r4, #16]
 8000966:	6023      	str	r3, [r4, #0]
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f043 0308 	orr.w	r3, r3, #8
 800096e:	81a3      	strh	r3, [r4, #12]
 8000970:	6923      	ldr	r3, [r4, #16]
 8000972:	b94b      	cbnz	r3, 8000988 <__swsetup_r+0x7c>
 8000974:	89a3      	ldrh	r3, [r4, #12]
 8000976:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800097a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800097e:	d003      	beq.n	8000988 <__swsetup_r+0x7c>
 8000980:	4621      	mov	r1, r4
 8000982:	4628      	mov	r0, r5
 8000984:	f000 fa60 	bl	8000e48 <__smakebuf_r>
 8000988:	89a0      	ldrh	r0, [r4, #12]
 800098a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800098e:	f010 0301 	ands.w	r3, r0, #1
 8000992:	d00a      	beq.n	80009aa <__swsetup_r+0x9e>
 8000994:	2300      	movs	r3, #0
 8000996:	60a3      	str	r3, [r4, #8]
 8000998:	6963      	ldr	r3, [r4, #20]
 800099a:	425b      	negs	r3, r3
 800099c:	61a3      	str	r3, [r4, #24]
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	b943      	cbnz	r3, 80009b4 <__swsetup_r+0xa8>
 80009a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009a6:	d1c4      	bne.n	8000932 <__swsetup_r+0x26>
 80009a8:	bd38      	pop	{r3, r4, r5, pc}
 80009aa:	0781      	lsls	r1, r0, #30
 80009ac:	bf58      	it	pl
 80009ae:	6963      	ldrpl	r3, [r4, #20]
 80009b0:	60a3      	str	r3, [r4, #8]
 80009b2:	e7f4      	b.n	800099e <__swsetup_r+0x92>
 80009b4:	2000      	movs	r0, #0
 80009b6:	e7f7      	b.n	80009a8 <__swsetup_r+0x9c>
 80009b8:	20000058 	.word	0x20000058

080009bc <memset>:
 80009bc:	4402      	add	r2, r0
 80009be:	4603      	mov	r3, r0
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d100      	bne.n	80009c6 <memset+0xa>
 80009c4:	4770      	bx	lr
 80009c6:	f803 1b01 	strb.w	r1, [r3], #1
 80009ca:	e7f9      	b.n	80009c0 <memset+0x4>

080009cc <_close_r>:
 80009cc:	b538      	push	{r3, r4, r5, lr}
 80009ce:	4d06      	ldr	r5, [pc, #24]	; (80009e8 <_close_r+0x1c>)
 80009d0:	2300      	movs	r3, #0
 80009d2:	4604      	mov	r4, r0
 80009d4:	4608      	mov	r0, r1
 80009d6:	602b      	str	r3, [r5, #0]
 80009d8:	f7ff fc75 	bl	80002c6 <_close>
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	d102      	bne.n	80009e6 <_close_r+0x1a>
 80009e0:	682b      	ldr	r3, [r5, #0]
 80009e2:	b103      	cbz	r3, 80009e6 <_close_r+0x1a>
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
 80009e8:	200001b8 	.word	0x200001b8

080009ec <_lseek_r>:
 80009ec:	b538      	push	{r3, r4, r5, lr}
 80009ee:	4d07      	ldr	r5, [pc, #28]	; (8000a0c <_lseek_r+0x20>)
 80009f0:	4604      	mov	r4, r0
 80009f2:	4608      	mov	r0, r1
 80009f4:	4611      	mov	r1, r2
 80009f6:	2200      	movs	r2, #0
 80009f8:	602a      	str	r2, [r5, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	f7ff fc8a 	bl	8000314 <_lseek>
 8000a00:	1c43      	adds	r3, r0, #1
 8000a02:	d102      	bne.n	8000a0a <_lseek_r+0x1e>
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	b103      	cbz	r3, 8000a0a <_lseek_r+0x1e>
 8000a08:	6023      	str	r3, [r4, #0]
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}
 8000a0c:	200001b8 	.word	0x200001b8

08000a10 <_read_r>:
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4d07      	ldr	r5, [pc, #28]	; (8000a30 <_read_r+0x20>)
 8000a14:	4604      	mov	r4, r0
 8000a16:	4608      	mov	r0, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	602a      	str	r2, [r5, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f7ff fc18 	bl	8000254 <_read>
 8000a24:	1c43      	adds	r3, r0, #1
 8000a26:	d102      	bne.n	8000a2e <_read_r+0x1e>
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	b103      	cbz	r3, 8000a2e <_read_r+0x1e>
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
 8000a30:	200001b8 	.word	0x200001b8

08000a34 <_write_r>:
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4d07      	ldr	r5, [pc, #28]	; (8000a54 <_write_r+0x20>)
 8000a38:	4604      	mov	r4, r0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	602a      	str	r2, [r5, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f7ff fc23 	bl	800028e <_write>
 8000a48:	1c43      	adds	r3, r0, #1
 8000a4a:	d102      	bne.n	8000a52 <_write_r+0x1e>
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	b103      	cbz	r3, 8000a52 <_write_r+0x1e>
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
 8000a54:	200001b8 	.word	0x200001b8

08000a58 <__errno>:
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <__errno+0x8>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000058 	.word	0x20000058

08000a64 <__libc_init_array>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	4d0d      	ldr	r5, [pc, #52]	; (8000a9c <__libc_init_array+0x38>)
 8000a68:	4c0d      	ldr	r4, [pc, #52]	; (8000aa0 <__libc_init_array+0x3c>)
 8000a6a:	1b64      	subs	r4, r4, r5
 8000a6c:	10a4      	asrs	r4, r4, #2
 8000a6e:	2600      	movs	r6, #0
 8000a70:	42a6      	cmp	r6, r4
 8000a72:	d109      	bne.n	8000a88 <__libc_init_array+0x24>
 8000a74:	4d0b      	ldr	r5, [pc, #44]	; (8000aa4 <__libc_init_array+0x40>)
 8000a76:	4c0c      	ldr	r4, [pc, #48]	; (8000aa8 <__libc_init_array+0x44>)
 8000a78:	f000 fa54 	bl	8000f24 <_init>
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	10a4      	asrs	r4, r4, #2
 8000a80:	2600      	movs	r6, #0
 8000a82:	42a6      	cmp	r6, r4
 8000a84:	d105      	bne.n	8000a92 <__libc_init_array+0x2e>
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a8c:	4798      	blx	r3
 8000a8e:	3601      	adds	r6, #1
 8000a90:	e7ee      	b.n	8000a70 <__libc_init_array+0xc>
 8000a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a96:	4798      	blx	r3
 8000a98:	3601      	adds	r6, #1
 8000a9a:	e7f2      	b.n	8000a82 <__libc_init_array+0x1e>
 8000a9c:	08000f50 	.word	0x08000f50
 8000aa0:	08000f50 	.word	0x08000f50
 8000aa4:	08000f50 	.word	0x08000f50
 8000aa8:	08000f54 	.word	0x08000f54

08000aac <__retarget_lock_acquire_recursive>:
 8000aac:	4770      	bx	lr

08000aae <__retarget_lock_release_recursive>:
 8000aae:	4770      	bx	lr

08000ab0 <_free_r>:
 8000ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d044      	beq.n	8000b40 <_free_r+0x90>
 8000ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000aba:	9001      	str	r0, [sp, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f1a1 0404 	sub.w	r4, r1, #4
 8000ac2:	bfb8      	it	lt
 8000ac4:	18e4      	addlt	r4, r4, r3
 8000ac6:	f000 f8df 	bl	8000c88 <__malloc_lock>
 8000aca:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <_free_r+0x94>)
 8000acc:	9801      	ldr	r0, [sp, #4]
 8000ace:	6813      	ldr	r3, [r2, #0]
 8000ad0:	b933      	cbnz	r3, 8000ae0 <_free_r+0x30>
 8000ad2:	6063      	str	r3, [r4, #4]
 8000ad4:	6014      	str	r4, [r2, #0]
 8000ad6:	b003      	add	sp, #12
 8000ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000adc:	f000 b8da 	b.w	8000c94 <__malloc_unlock>
 8000ae0:	42a3      	cmp	r3, r4
 8000ae2:	d908      	bls.n	8000af6 <_free_r+0x46>
 8000ae4:	6825      	ldr	r5, [r4, #0]
 8000ae6:	1961      	adds	r1, r4, r5
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	bf01      	itttt	eq
 8000aec:	6819      	ldreq	r1, [r3, #0]
 8000aee:	685b      	ldreq	r3, [r3, #4]
 8000af0:	1949      	addeq	r1, r1, r5
 8000af2:	6021      	streq	r1, [r4, #0]
 8000af4:	e7ed      	b.n	8000ad2 <_free_r+0x22>
 8000af6:	461a      	mov	r2, r3
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	b10b      	cbz	r3, 8000b00 <_free_r+0x50>
 8000afc:	42a3      	cmp	r3, r4
 8000afe:	d9fa      	bls.n	8000af6 <_free_r+0x46>
 8000b00:	6811      	ldr	r1, [r2, #0]
 8000b02:	1855      	adds	r5, r2, r1
 8000b04:	42a5      	cmp	r5, r4
 8000b06:	d10b      	bne.n	8000b20 <_free_r+0x70>
 8000b08:	6824      	ldr	r4, [r4, #0]
 8000b0a:	4421      	add	r1, r4
 8000b0c:	1854      	adds	r4, r2, r1
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	6011      	str	r1, [r2, #0]
 8000b12:	d1e0      	bne.n	8000ad6 <_free_r+0x26>
 8000b14:	681c      	ldr	r4, [r3, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	6053      	str	r3, [r2, #4]
 8000b1a:	440c      	add	r4, r1
 8000b1c:	6014      	str	r4, [r2, #0]
 8000b1e:	e7da      	b.n	8000ad6 <_free_r+0x26>
 8000b20:	d902      	bls.n	8000b28 <_free_r+0x78>
 8000b22:	230c      	movs	r3, #12
 8000b24:	6003      	str	r3, [r0, #0]
 8000b26:	e7d6      	b.n	8000ad6 <_free_r+0x26>
 8000b28:	6825      	ldr	r5, [r4, #0]
 8000b2a:	1961      	adds	r1, r4, r5
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	bf04      	itt	eq
 8000b30:	6819      	ldreq	r1, [r3, #0]
 8000b32:	685b      	ldreq	r3, [r3, #4]
 8000b34:	6063      	str	r3, [r4, #4]
 8000b36:	bf04      	itt	eq
 8000b38:	1949      	addeq	r1, r1, r5
 8000b3a:	6021      	streq	r1, [r4, #0]
 8000b3c:	6054      	str	r4, [r2, #4]
 8000b3e:	e7ca      	b.n	8000ad6 <_free_r+0x26>
 8000b40:	b003      	add	sp, #12
 8000b42:	bd30      	pop	{r4, r5, pc}
 8000b44:	200001c0 	.word	0x200001c0

08000b48 <sbrk_aligned>:
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	4e0e      	ldr	r6, [pc, #56]	; (8000b84 <sbrk_aligned+0x3c>)
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	6831      	ldr	r1, [r6, #0]
 8000b50:	4605      	mov	r5, r0
 8000b52:	b911      	cbnz	r1, 8000b5a <sbrk_aligned+0x12>
 8000b54:	f000 f9d6 	bl	8000f04 <_sbrk_r>
 8000b58:	6030      	str	r0, [r6, #0]
 8000b5a:	4621      	mov	r1, r4
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f9d1 	bl	8000f04 <_sbrk_r>
 8000b62:	1c43      	adds	r3, r0, #1
 8000b64:	d00a      	beq.n	8000b7c <sbrk_aligned+0x34>
 8000b66:	1cc4      	adds	r4, r0, #3
 8000b68:	f024 0403 	bic.w	r4, r4, #3
 8000b6c:	42a0      	cmp	r0, r4
 8000b6e:	d007      	beq.n	8000b80 <sbrk_aligned+0x38>
 8000b70:	1a21      	subs	r1, r4, r0
 8000b72:	4628      	mov	r0, r5
 8000b74:	f000 f9c6 	bl	8000f04 <_sbrk_r>
 8000b78:	3001      	adds	r0, #1
 8000b7a:	d101      	bne.n	8000b80 <sbrk_aligned+0x38>
 8000b7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000b80:	4620      	mov	r0, r4
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	200001c4 	.word	0x200001c4

08000b88 <_malloc_r>:
 8000b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b8c:	1ccd      	adds	r5, r1, #3
 8000b8e:	f025 0503 	bic.w	r5, r5, #3
 8000b92:	3508      	adds	r5, #8
 8000b94:	2d0c      	cmp	r5, #12
 8000b96:	bf38      	it	cc
 8000b98:	250c      	movcc	r5, #12
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	4607      	mov	r7, r0
 8000b9e:	db01      	blt.n	8000ba4 <_malloc_r+0x1c>
 8000ba0:	42a9      	cmp	r1, r5
 8000ba2:	d905      	bls.n	8000bb0 <_malloc_r+0x28>
 8000ba4:	230c      	movs	r3, #12
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	2600      	movs	r6, #0
 8000baa:	4630      	mov	r0, r6
 8000bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c84 <_malloc_r+0xfc>
 8000bb4:	f000 f868 	bl	8000c88 <__malloc_lock>
 8000bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bbc:	461c      	mov	r4, r3
 8000bbe:	bb5c      	cbnz	r4, 8000c18 <_malloc_r+0x90>
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	f7ff ffc0 	bl	8000b48 <sbrk_aligned>
 8000bc8:	1c43      	adds	r3, r0, #1
 8000bca:	4604      	mov	r4, r0
 8000bcc:	d155      	bne.n	8000c7a <_malloc_r+0xf2>
 8000bce:	f8d8 4000 	ldr.w	r4, [r8]
 8000bd2:	4626      	mov	r6, r4
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d145      	bne.n	8000c64 <_malloc_r+0xdc>
 8000bd8:	2c00      	cmp	r4, #0
 8000bda:	d048      	beq.n	8000c6e <_malloc_r+0xe6>
 8000bdc:	6823      	ldr	r3, [r4, #0]
 8000bde:	4631      	mov	r1, r6
 8000be0:	4638      	mov	r0, r7
 8000be2:	eb04 0903 	add.w	r9, r4, r3
 8000be6:	f000 f98d 	bl	8000f04 <_sbrk_r>
 8000bea:	4581      	cmp	r9, r0
 8000bec:	d13f      	bne.n	8000c6e <_malloc_r+0xe6>
 8000bee:	6821      	ldr	r1, [r4, #0]
 8000bf0:	1a6d      	subs	r5, r5, r1
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	f7ff ffa7 	bl	8000b48 <sbrk_aligned>
 8000bfa:	3001      	adds	r0, #1
 8000bfc:	d037      	beq.n	8000c6e <_malloc_r+0xe6>
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	442b      	add	r3, r5
 8000c02:	6023      	str	r3, [r4, #0]
 8000c04:	f8d8 3000 	ldr.w	r3, [r8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d038      	beq.n	8000c7e <_malloc_r+0xf6>
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	42a2      	cmp	r2, r4
 8000c10:	d12b      	bne.n	8000c6a <_malloc_r+0xe2>
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	e00f      	b.n	8000c38 <_malloc_r+0xb0>
 8000c18:	6822      	ldr	r2, [r4, #0]
 8000c1a:	1b52      	subs	r2, r2, r5
 8000c1c:	d41f      	bmi.n	8000c5e <_malloc_r+0xd6>
 8000c1e:	2a0b      	cmp	r2, #11
 8000c20:	d917      	bls.n	8000c52 <_malloc_r+0xca>
 8000c22:	1961      	adds	r1, r4, r5
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	6025      	str	r5, [r4, #0]
 8000c28:	bf18      	it	ne
 8000c2a:	6059      	strne	r1, [r3, #4]
 8000c2c:	6863      	ldr	r3, [r4, #4]
 8000c2e:	bf08      	it	eq
 8000c30:	f8c8 1000 	streq.w	r1, [r8]
 8000c34:	5162      	str	r2, [r4, r5]
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	4638      	mov	r0, r7
 8000c3a:	f104 060b 	add.w	r6, r4, #11
 8000c3e:	f000 f829 	bl	8000c94 <__malloc_unlock>
 8000c42:	f026 0607 	bic.w	r6, r6, #7
 8000c46:	1d23      	adds	r3, r4, #4
 8000c48:	1af2      	subs	r2, r6, r3
 8000c4a:	d0ae      	beq.n	8000baa <_malloc_r+0x22>
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	50a3      	str	r3, [r4, r2]
 8000c50:	e7ab      	b.n	8000baa <_malloc_r+0x22>
 8000c52:	42a3      	cmp	r3, r4
 8000c54:	6862      	ldr	r2, [r4, #4]
 8000c56:	d1dd      	bne.n	8000c14 <_malloc_r+0x8c>
 8000c58:	f8c8 2000 	str.w	r2, [r8]
 8000c5c:	e7ec      	b.n	8000c38 <_malloc_r+0xb0>
 8000c5e:	4623      	mov	r3, r4
 8000c60:	6864      	ldr	r4, [r4, #4]
 8000c62:	e7ac      	b.n	8000bbe <_malloc_r+0x36>
 8000c64:	4634      	mov	r4, r6
 8000c66:	6876      	ldr	r6, [r6, #4]
 8000c68:	e7b4      	b.n	8000bd4 <_malloc_r+0x4c>
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	e7cc      	b.n	8000c08 <_malloc_r+0x80>
 8000c6e:	230c      	movs	r3, #12
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	4638      	mov	r0, r7
 8000c74:	f000 f80e 	bl	8000c94 <__malloc_unlock>
 8000c78:	e797      	b.n	8000baa <_malloc_r+0x22>
 8000c7a:	6025      	str	r5, [r4, #0]
 8000c7c:	e7dc      	b.n	8000c38 <_malloc_r+0xb0>
 8000c7e:	605b      	str	r3, [r3, #4]
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	bf00      	nop
 8000c84:	200001c0 	.word	0x200001c0

08000c88 <__malloc_lock>:
 8000c88:	4801      	ldr	r0, [pc, #4]	; (8000c90 <__malloc_lock+0x8>)
 8000c8a:	f7ff bf0f 	b.w	8000aac <__retarget_lock_acquire_recursive>
 8000c8e:	bf00      	nop
 8000c90:	200001bc 	.word	0x200001bc

08000c94 <__malloc_unlock>:
 8000c94:	4801      	ldr	r0, [pc, #4]	; (8000c9c <__malloc_unlock+0x8>)
 8000c96:	f7ff bf0a 	b.w	8000aae <__retarget_lock_release_recursive>
 8000c9a:	bf00      	nop
 8000c9c:	200001bc 	.word	0x200001bc

08000ca0 <__sflush_r>:
 8000ca0:	898a      	ldrh	r2, [r1, #12]
 8000ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca6:	4605      	mov	r5, r0
 8000ca8:	0710      	lsls	r0, r2, #28
 8000caa:	460c      	mov	r4, r1
 8000cac:	d458      	bmi.n	8000d60 <__sflush_r+0xc0>
 8000cae:	684b      	ldr	r3, [r1, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	dc05      	bgt.n	8000cc0 <__sflush_r+0x20>
 8000cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dc02      	bgt.n	8000cc0 <__sflush_r+0x20>
 8000cba:	2000      	movs	r0, #0
 8000cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0f9      	beq.n	8000cba <__sflush_r+0x1a>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ccc:	682f      	ldr	r7, [r5, #0]
 8000cce:	6a21      	ldr	r1, [r4, #32]
 8000cd0:	602b      	str	r3, [r5, #0]
 8000cd2:	d032      	beq.n	8000d3a <__sflush_r+0x9a>
 8000cd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	075a      	lsls	r2, r3, #29
 8000cda:	d505      	bpl.n	8000ce8 <__sflush_r+0x48>
 8000cdc:	6863      	ldr	r3, [r4, #4]
 8000cde:	1ac0      	subs	r0, r0, r3
 8000ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ce2:	b10b      	cbz	r3, 8000ce8 <__sflush_r+0x48>
 8000ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ce6:	1ac0      	subs	r0, r0, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4602      	mov	r2, r0
 8000cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cee:	6a21      	ldr	r1, [r4, #32]
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	47b0      	blx	r6
 8000cf4:	1c43      	adds	r3, r0, #1
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	d106      	bne.n	8000d08 <__sflush_r+0x68>
 8000cfa:	6829      	ldr	r1, [r5, #0]
 8000cfc:	291d      	cmp	r1, #29
 8000cfe:	d82b      	bhi.n	8000d58 <__sflush_r+0xb8>
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <__sflush_r+0x108>)
 8000d02:	410a      	asrs	r2, r1
 8000d04:	07d6      	lsls	r6, r2, #31
 8000d06:	d427      	bmi.n	8000d58 <__sflush_r+0xb8>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	6062      	str	r2, [r4, #4]
 8000d0c:	04d9      	lsls	r1, r3, #19
 8000d0e:	6922      	ldr	r2, [r4, #16]
 8000d10:	6022      	str	r2, [r4, #0]
 8000d12:	d504      	bpl.n	8000d1e <__sflush_r+0x7e>
 8000d14:	1c42      	adds	r2, r0, #1
 8000d16:	d101      	bne.n	8000d1c <__sflush_r+0x7c>
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	b903      	cbnz	r3, 8000d1e <__sflush_r+0x7e>
 8000d1c:	6560      	str	r0, [r4, #84]	; 0x54
 8000d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d20:	602f      	str	r7, [r5, #0]
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d0c9      	beq.n	8000cba <__sflush_r+0x1a>
 8000d26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d002      	beq.n	8000d34 <__sflush_r+0x94>
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f7ff febe 	bl	8000ab0 <_free_r>
 8000d34:	2000      	movs	r0, #0
 8000d36:	6360      	str	r0, [r4, #52]	; 0x34
 8000d38:	e7c0      	b.n	8000cbc <__sflush_r+0x1c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	47b0      	blx	r6
 8000d40:	1c41      	adds	r1, r0, #1
 8000d42:	d1c8      	bne.n	8000cd6 <__sflush_r+0x36>
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0c5      	beq.n	8000cd6 <__sflush_r+0x36>
 8000d4a:	2b1d      	cmp	r3, #29
 8000d4c:	d001      	beq.n	8000d52 <__sflush_r+0xb2>
 8000d4e:	2b16      	cmp	r3, #22
 8000d50:	d101      	bne.n	8000d56 <__sflush_r+0xb6>
 8000d52:	602f      	str	r7, [r5, #0]
 8000d54:	e7b1      	b.n	8000cba <__sflush_r+0x1a>
 8000d56:	89a3      	ldrh	r3, [r4, #12]
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	81a3      	strh	r3, [r4, #12]
 8000d5e:	e7ad      	b.n	8000cbc <__sflush_r+0x1c>
 8000d60:	690f      	ldr	r7, [r1, #16]
 8000d62:	2f00      	cmp	r7, #0
 8000d64:	d0a9      	beq.n	8000cba <__sflush_r+0x1a>
 8000d66:	0793      	lsls	r3, r2, #30
 8000d68:	680e      	ldr	r6, [r1, #0]
 8000d6a:	bf08      	it	eq
 8000d6c:	694b      	ldreq	r3, [r1, #20]
 8000d6e:	600f      	str	r7, [r1, #0]
 8000d70:	bf18      	it	ne
 8000d72:	2300      	movne	r3, #0
 8000d74:	eba6 0807 	sub.w	r8, r6, r7
 8000d78:	608b      	str	r3, [r1, #8]
 8000d7a:	f1b8 0f00 	cmp.w	r8, #0
 8000d7e:	dd9c      	ble.n	8000cba <__sflush_r+0x1a>
 8000d80:	6a21      	ldr	r1, [r4, #32]
 8000d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d84:	4643      	mov	r3, r8
 8000d86:	463a      	mov	r2, r7
 8000d88:	4628      	mov	r0, r5
 8000d8a:	47b0      	blx	r6
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	dc06      	bgt.n	8000d9e <__sflush_r+0xfe>
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d96:	81a3      	strh	r3, [r4, #12]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9c:	e78e      	b.n	8000cbc <__sflush_r+0x1c>
 8000d9e:	4407      	add	r7, r0
 8000da0:	eba8 0800 	sub.w	r8, r8, r0
 8000da4:	e7e9      	b.n	8000d7a <__sflush_r+0xda>
 8000da6:	bf00      	nop
 8000da8:	dfbffffe 	.word	0xdfbffffe

08000dac <_fflush_r>:
 8000dac:	b538      	push	{r3, r4, r5, lr}
 8000dae:	690b      	ldr	r3, [r1, #16]
 8000db0:	4605      	mov	r5, r0
 8000db2:	460c      	mov	r4, r1
 8000db4:	b913      	cbnz	r3, 8000dbc <_fflush_r+0x10>
 8000db6:	2500      	movs	r5, #0
 8000db8:	4628      	mov	r0, r5
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	b118      	cbz	r0, 8000dc6 <_fflush_r+0x1a>
 8000dbe:	6a03      	ldr	r3, [r0, #32]
 8000dc0:	b90b      	cbnz	r3, 8000dc6 <_fflush_r+0x1a>
 8000dc2:	f7ff fc91 	bl	80006e8 <__sinit>
 8000dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f3      	beq.n	8000db6 <_fflush_r+0xa>
 8000dce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000dd0:	07d0      	lsls	r0, r2, #31
 8000dd2:	d404      	bmi.n	8000dde <_fflush_r+0x32>
 8000dd4:	0599      	lsls	r1, r3, #22
 8000dd6:	d402      	bmi.n	8000dde <_fflush_r+0x32>
 8000dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dda:	f7ff fe67 	bl	8000aac <__retarget_lock_acquire_recursive>
 8000dde:	4628      	mov	r0, r5
 8000de0:	4621      	mov	r1, r4
 8000de2:	f7ff ff5d 	bl	8000ca0 <__sflush_r>
 8000de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000de8:	07da      	lsls	r2, r3, #31
 8000dea:	4605      	mov	r5, r0
 8000dec:	d4e4      	bmi.n	8000db8 <_fflush_r+0xc>
 8000dee:	89a3      	ldrh	r3, [r4, #12]
 8000df0:	059b      	lsls	r3, r3, #22
 8000df2:	d4e1      	bmi.n	8000db8 <_fflush_r+0xc>
 8000df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000df6:	f7ff fe5a 	bl	8000aae <__retarget_lock_release_recursive>
 8000dfa:	e7dd      	b.n	8000db8 <_fflush_r+0xc>

08000dfc <__swhatbuf_r>:
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	460c      	mov	r4, r1
 8000e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e04:	2900      	cmp	r1, #0
 8000e06:	b096      	sub	sp, #88	; 0x58
 8000e08:	4615      	mov	r5, r2
 8000e0a:	461e      	mov	r6, r3
 8000e0c:	da0d      	bge.n	8000e2a <__swhatbuf_r+0x2e>
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e14:	f04f 0100 	mov.w	r1, #0
 8000e18:	bf0c      	ite	eq
 8000e1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000e1e:	2340      	movne	r3, #64	; 0x40
 8000e20:	2000      	movs	r0, #0
 8000e22:	6031      	str	r1, [r6, #0]
 8000e24:	602b      	str	r3, [r5, #0]
 8000e26:	b016      	add	sp, #88	; 0x58
 8000e28:	bd70      	pop	{r4, r5, r6, pc}
 8000e2a:	466a      	mov	r2, sp
 8000e2c:	f000 f848 	bl	8000ec0 <_fstat_r>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	dbec      	blt.n	8000e0e <__swhatbuf_r+0x12>
 8000e34:	9901      	ldr	r1, [sp, #4]
 8000e36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000e3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000e3e:	4259      	negs	r1, r3
 8000e40:	4159      	adcs	r1, r3
 8000e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e46:	e7eb      	b.n	8000e20 <__swhatbuf_r+0x24>

08000e48 <__smakebuf_r>:
 8000e48:	898b      	ldrh	r3, [r1, #12]
 8000e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e4c:	079d      	lsls	r5, r3, #30
 8000e4e:	4606      	mov	r6, r0
 8000e50:	460c      	mov	r4, r1
 8000e52:	d507      	bpl.n	8000e64 <__smakebuf_r+0x1c>
 8000e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	6123      	str	r3, [r4, #16]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	6163      	str	r3, [r4, #20]
 8000e60:	b002      	add	sp, #8
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	ab01      	add	r3, sp, #4
 8000e66:	466a      	mov	r2, sp
 8000e68:	f7ff ffc8 	bl	8000dfc <__swhatbuf_r>
 8000e6c:	9900      	ldr	r1, [sp, #0]
 8000e6e:	4605      	mov	r5, r0
 8000e70:	4630      	mov	r0, r6
 8000e72:	f7ff fe89 	bl	8000b88 <_malloc_r>
 8000e76:	b948      	cbnz	r0, 8000e8c <__smakebuf_r+0x44>
 8000e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e7c:	059a      	lsls	r2, r3, #22
 8000e7e:	d4ef      	bmi.n	8000e60 <__smakebuf_r+0x18>
 8000e80:	f023 0303 	bic.w	r3, r3, #3
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	81a3      	strh	r3, [r4, #12]
 8000e8a:	e7e3      	b.n	8000e54 <__smakebuf_r+0xc>
 8000e8c:	89a3      	ldrh	r3, [r4, #12]
 8000e8e:	6020      	str	r0, [r4, #0]
 8000e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e94:	81a3      	strh	r3, [r4, #12]
 8000e96:	9b00      	ldr	r3, [sp, #0]
 8000e98:	6163      	str	r3, [r4, #20]
 8000e9a:	9b01      	ldr	r3, [sp, #4]
 8000e9c:	6120      	str	r0, [r4, #16]
 8000e9e:	b15b      	cbz	r3, 8000eb8 <__smakebuf_r+0x70>
 8000ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	f000 f81d 	bl	8000ee4 <_isatty_r>
 8000eaa:	b128      	cbz	r0, 8000eb8 <__smakebuf_r+0x70>
 8000eac:	89a3      	ldrh	r3, [r4, #12]
 8000eae:	f023 0303 	bic.w	r3, r3, #3
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	81a3      	strh	r3, [r4, #12]
 8000eb8:	89a3      	ldrh	r3, [r4, #12]
 8000eba:	431d      	orrs	r5, r3
 8000ebc:	81a5      	strh	r5, [r4, #12]
 8000ebe:	e7cf      	b.n	8000e60 <__smakebuf_r+0x18>

08000ec0 <_fstat_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4d07      	ldr	r5, [pc, #28]	; (8000ee0 <_fstat_r+0x20>)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	4611      	mov	r1, r2
 8000ecc:	602b      	str	r3, [r5, #0]
 8000ece:	f7ff fa06 	bl	80002de <_fstat>
 8000ed2:	1c43      	adds	r3, r0, #1
 8000ed4:	d102      	bne.n	8000edc <_fstat_r+0x1c>
 8000ed6:	682b      	ldr	r3, [r5, #0]
 8000ed8:	b103      	cbz	r3, 8000edc <_fstat_r+0x1c>
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001b8 	.word	0x200001b8

08000ee4 <_isatty_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	4d06      	ldr	r5, [pc, #24]	; (8000f00 <_isatty_r+0x1c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	602b      	str	r3, [r5, #0]
 8000ef0:	f7ff fa05 	bl	80002fe <_isatty>
 8000ef4:	1c43      	adds	r3, r0, #1
 8000ef6:	d102      	bne.n	8000efe <_isatty_r+0x1a>
 8000ef8:	682b      	ldr	r3, [r5, #0]
 8000efa:	b103      	cbz	r3, 8000efe <_isatty_r+0x1a>
 8000efc:	6023      	str	r3, [r4, #0]
 8000efe:	bd38      	pop	{r3, r4, r5, pc}
 8000f00:	200001b8 	.word	0x200001b8

08000f04 <_sbrk_r>:
 8000f04:	b538      	push	{r3, r4, r5, lr}
 8000f06:	4d06      	ldr	r5, [pc, #24]	; (8000f20 <_sbrk_r+0x1c>)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	602b      	str	r3, [r5, #0]
 8000f10:	f7ff fa0e 	bl	8000330 <_sbrk>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	d102      	bne.n	8000f1e <_sbrk_r+0x1a>
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	b103      	cbz	r3, 8000f1e <_sbrk_r+0x1a>
 8000f1c:	6023      	str	r3, [r4, #0]
 8000f1e:	bd38      	pop	{r3, r4, r5, pc}
 8000f20:	200001b8 	.word	0x200001b8

08000f24 <_init>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	bf00      	nop
 8000f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2a:	bc08      	pop	{r3}
 8000f2c:	469e      	mov	lr, r3
 8000f2e:	4770      	bx	lr

08000f30 <_fini>:
 8000f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f32:	bf00      	nop
 8000f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f36:	bc08      	pop	{r3}
 8000f38:	469e      	mov	lr, r3
 8000f3a:	4770      	bx	lr
