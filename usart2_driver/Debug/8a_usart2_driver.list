
8a_usart2_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e94  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800102c  0800102c  0001102c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800104c  0800104c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800104c  0800104c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800104c  0800104c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001050  08001050  00011050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080010b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080010b0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000138d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000617  00000000  00000000  0002145c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000012e  00000000  00000000  00021c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc7c  00000000  00000000  00021d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001e8e  00000000  00000000  000319da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055bfe  00000000  00000000  00033868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c0c  00000000  00000000  00089468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0008a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001014 	.word	0x08001014

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08001014 	.word	0x08001014

080001d8 <enable_gpio_clock>:


#include "gpio.h"


void enable_gpio_clock(uint8_t port){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	if 	(port == PORT_A){
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d106      	bne.n	80001f6 <enable_gpio_clock+0x1e>
		RCC->AHB1ENR |= (1 << 0);
 80001e8:	4b1e      	ldr	r3, [pc, #120]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a1d      	ldr	r2, [pc, #116]	; (8000264 <enable_gpio_clock+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (1 << 4);
	}
	else if (port == PORT_H){
		RCC->AHB1ENR |= (1 << 7);
	}
}
 80001f4:	e030      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_B){
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d106      	bne.n	800020a <enable_gpio_clock+0x32>
		RCC->AHB1ENR |= (1 << 1);
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <enable_gpio_clock+0x8c>)
 80001fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000200:	4a18      	ldr	r2, [pc, #96]	; (8000264 <enable_gpio_clock+0x8c>)
 8000202:	f043 0302 	orr.w	r3, r3, #2
 8000206:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000208:	e026      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_C){
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	2b02      	cmp	r3, #2
 800020e:	d106      	bne.n	800021e <enable_gpio_clock+0x46>
		RCC->AHB1ENR |= (1 << 2);
 8000210:	4b14      	ldr	r3, [pc, #80]	; (8000264 <enable_gpio_clock+0x8c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <enable_gpio_clock+0x8c>)
 8000216:	f043 0304 	orr.w	r3, r3, #4
 800021a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021c:	e01c      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_D){
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2b03      	cmp	r3, #3
 8000222:	d106      	bne.n	8000232 <enable_gpio_clock+0x5a>
		RCC->AHB1ENR |= (1 << 3);
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <enable_gpio_clock+0x8c>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <enable_gpio_clock+0x8c>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e012      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_E){
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	2b04      	cmp	r3, #4
 8000236:	d106      	bne.n	8000246 <enable_gpio_clock+0x6e>
		RCC->AHB1ENR |= (1 << 4);
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <enable_gpio_clock+0x8c>)
 800023a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <enable_gpio_clock+0x8c>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000244:	e008      	b.n	8000258 <enable_gpio_clock+0x80>
	else if (port == PORT_H){
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b05      	cmp	r3, #5
 800024a:	d105      	bne.n	8000258 <enable_gpio_clock+0x80>
		RCC->AHB1ENR |= (1 << 7);
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <enable_gpio_clock+0x8c>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <enable_gpio_clock+0x8c>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <gpio_config>:

void gpio_config(GPIO_TypeDef *pGPIO, uint32_t direction_mode, uint32_t pin_number){
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	60f8      	str	r0, [r7, #12]
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
	pGPIO->MODER &=~ ((uint32_t)3 << pin_number*2);
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	pGPIO->MODER |= (direction_mode << pin_number*2);
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	68b9      	ldr	r1, [r7, #8]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	431a      	orrs	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]

}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <gpio_bit_toggle>:

void gpio_load_value(GPIO_TypeDef *pGPIO, uint32_t value){
	pGPIO->ODR = value;
}

void gpio_bit_toggle(GPIO_TypeDef *pGPIO, uint32_t pin_number){
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	6039      	str	r1, [r7, #0]
	pGPIO->ODR ^= (1 << pin_number);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	2101      	movs	r1, #1
 80002ba:	683a      	ldr	r2, [r7, #0]
 80002bc:	fa01 f202 	lsl.w	r2, r1, r2
 80002c0:	405a      	eors	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	615a      	str	r2, [r3, #20]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <alternate_function_setup>:

uint32_t read_gpio_pin(GPIO_TypeDef *pGPIO, uint32_t pin_number){
	return (pGPIO->IDR & pin_number);
}

void alternate_function_setup(GPIO_TypeDef *pGPIO, uint32_t pin_number, uint32_t alternate_function_value){
 80002d2:	b480      	push	{r7}
 80002d4:	b085      	sub	sp, #20
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	60f8      	str	r0, [r7, #12]
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
	if (pin_number > PIN7){
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d918      	bls.n	8000316 <alternate_function_setup+0x44>
		pin_number = pin_number - 8;
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	3b08      	subs	r3, #8
 80002e8:	60bb      	str	r3, [r7, #8]
		pGPIO->AFR[1] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	210f      	movs	r1, #15
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	43db      	mvns	r3, r3
 80002fa:	401a      	ands	r2, r3
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	625a      	str	r2, [r3, #36]	; 0x24
		pGPIO->AFR[1] |=  (alternate_function_value << pin_number*4);  //Set alternate value
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	6879      	ldr	r1, [r7, #4]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	431a      	orrs	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
	}else{
		pGPIO->AFR[0] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
		pGPIO->AFR[0] |=  (alternate_function_value << pin_number*4);  //Set alternate value
	}
}
 8000314:	e014      	b.n	8000340 <alternate_function_setup+0x6e>
		pGPIO->AFR[0] &=~ ((uint32_t)15 << pin_number*4);  //Clear all AFR bits of pin
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6a1a      	ldr	r2, [r3, #32]
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	210f      	movs	r1, #15
 8000320:	fa01 f303 	lsl.w	r3, r1, r3
 8000324:	43db      	mvns	r3, r3
 8000326:	401a      	ands	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	621a      	str	r2, [r3, #32]
		pGPIO->AFR[0] |=  (alternate_function_value << pin_number*4);  //Set alternate value
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	6a1a      	ldr	r2, [r3, #32]
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	6879      	ldr	r1, [r7, #4]
 8000336:	fa01 f303 	lsl.w	r3, r1, r3
 800033a:	431a      	orrs	r2, r3
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	621a      	str	r2, [r3, #32]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <main>:
#define UART_BAUDRATE	115200

char key;

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA --LED
	enable_gpio_clock(PORT_A);
 8000350:	2000      	movs	r0, #0
 8000352:	f7ff ff41 	bl	80001d8 <enable_gpio_clock>

	// Set PA5 as output
	gpio_config(GPIOA, OUTPUT_MODE, PIN5);
 8000356:	2205      	movs	r2, #5
 8000358:	2101      	movs	r1, #1
 800035a:	481c      	ldr	r0, [pc, #112]	; (80003cc <main+0x80>)
 800035c:	f7ff ff84 	bl	8000268 <gpio_config>


	/****************Configure usart gpio pin***************/
	/*Enable clock access to gpioa */
	enable_gpio_clock(PORT_A);
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ff39 	bl	80001d8 <enable_gpio_clock>

	/*Set PA2 mode to alternate function mode*/
	gpio_config(GPIOA, ALTERNATE_FUNCTION, PIN2);
 8000366:	2202      	movs	r2, #2
 8000368:	210a      	movs	r1, #10
 800036a:	4818      	ldr	r0, [pc, #96]	; (80003cc <main+0x80>)
 800036c:	f7ff ff7c 	bl	8000268 <gpio_config>

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	alternate_function_setup(GPIOA, PIN2, 07);
 8000370:	2207      	movs	r2, #7
 8000372:	2102      	movs	r1, #2
 8000374:	4815      	ldr	r0, [pc, #84]	; (80003cc <main+0x80>)
 8000376:	f7ff ffac 	bl	80002d2 <alternate_function_setup>

	/*Set PA3 mode to alternate function mode*/
	gpio_config(GPIOA, ALTERNATE_FUNCTION, PIN3);
 800037a:	2203      	movs	r2, #3
 800037c:	210a      	movs	r1, #10
 800037e:	4813      	ldr	r0, [pc, #76]	; (80003cc <main+0x80>)
 8000380:	f7ff ff72 	bl	8000268 <gpio_config>

	/*Set PA3 alternate function type to UART_TX (AF07)*/
	alternate_function_setup(GPIOA, PIN3, 07);
 8000384:	2207      	movs	r2, #7
 8000386:	2103      	movs	r1, #3
 8000388:	4810      	ldr	r0, [pc, #64]	; (80003cc <main+0x80>)
 800038a:	f7ff ffa2 	bl	80002d2 <alternate_function_setup>

	enable_usart_clock(USART_2);
 800038e:	2002      	movs	r0, #2
 8000390:	f000 f944 	bl	800061c <enable_usart_clock>
	uart2_rxtx_init(USART2, UART_BAUDRATE);
 8000394:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <main+0x84>)
 800039a:	f000 f8c3 	bl	8000524 <uart2_rxtx_init>
	output_default_usart_stream(USART2);	//To use with printf funcion
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <main+0x84>)
 80003a0:	f000 f966 	bl	8000670 <output_default_usart_stream>
	while(1)
	{
		key = usart_read(USART2);
 80003a4:	480a      	ldr	r0, [pc, #40]	; (80003d0 <main+0x84>)
 80003a6:	f000 f8d7 	bl	8000558 <usart_read>
 80003aa:	4603      	mov	r3, r0
 80003ac:	461a      	mov	r2, r3
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <main+0x88>)
 80003b0:	701a      	strb	r2, [r3, #0]
		if (key == '1'){
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <main+0x88>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b31      	cmp	r3, #49	; 0x31
 80003b8:	d1f4      	bne.n	80003a4 <main+0x58>
			gpio_bit_toggle(GPIOA, PIN5);	//Led pin
 80003ba:	2105      	movs	r1, #5
 80003bc:	4803      	ldr	r0, [pc, #12]	; (80003cc <main+0x80>)
 80003be:	f7ff ff74 	bl	80002aa <gpio_bit_toggle>
			printf("You receiver a special key. \n");
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <main+0x8c>)
 80003c4:	f000 fa92 	bl	80008ec <puts>
		key = usart_read(USART2);
 80003c8:	e7ec      	b.n	80003a4 <main+0x58>
 80003ca:	bf00      	nop
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40004400 	.word	0x40004400
 80003d4:	20000078 	.word	0x20000078
 80003d8:	0800102c 	.word	0x0800102c

080003dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e00a      	b.n	8000404 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ee:	f3af 8000 	nop.w
 80003f2:	4601      	mov	r1, r0
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	1c5a      	adds	r2, r3, #1
 80003f8:	60ba      	str	r2, [r7, #8]
 80003fa:	b2ca      	uxtb	r2, r1
 80003fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	dbf0      	blt.n	80003ee <_read+0x12>
  }

  return len;
 800040c:	687b      	ldr	r3, [r7, #4]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b086      	sub	sp, #24
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e009      	b.n	800043c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	60ba      	str	r2, [r7, #8]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f8bb 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	dbf1      	blt.n	8000428 <_write+0x12>
  }
  return len;
 8000444:	687b      	ldr	r3, [r7, #4]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_close>:

int _close(int file)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000476:	605a      	str	r2, [r3, #4]
  return 0;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <_isatty>:

int _isatty(int file)
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f000 fb2e 	bl	8000b48 <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <_sbrk+0x64>)
 8000508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20020000 	.word	0x20020000
 8000518:	00000400 	.word	0x00000400
 800051c:	2000007c 	.word	0x2000007c
 8000520:	200001d0 	.word	0x200001d0

08000524 <uart2_rxtx_init>:
int __io_putchar(int ch);

uint32_t *usart_stream;		//Global pointer to usart out stream function

// Functions definitions
void uart2_rxtx_init(USART_TypeDef *pUSART, uint32_t UsartBaudRate){
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]

	/*Configure baudrate*/
	uart_set_baudrate(pUSART,APB1_CLK,UsartBaudRate);
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	4908      	ldr	r1, [pc, #32]	; (8000554 <uart2_rxtx_init+0x30>)
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f000 f84c 	bl	80005d0 <uart_set_baudrate>

	/*Configure the transfer direction*/
	// Enable transmitter and receiver
	 pUSART->CR1 =  (CR1_TE | CR1_RE);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	220c      	movs	r2, #12
 800053c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 pUSART->CR1 |= CR1_UE;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	60da      	str	r2, [r3, #12]
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	00f42400 	.word	0x00f42400

08000558 <usart_read>:


char usart_read(USART_TypeDef *pUSART){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	/*Make sure the receive data register is not empty*/
	while(!(pUSART->SR & SR_RXNE)){}
 8000560:	bf00      	nop
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <usart_read+0xa>

	/* Read data */
	return pUSART->DR;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	b2db      	uxtb	r3, r3
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <uart2_write>:


void uart2_write(USART_TypeDef *pUSART, int ch){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  /*Make sure the transmit data register is empty*/
	while(!(pUSART->SR & SR_TXE)){}
 800058a:	bf00      	nop
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <uart2_write+0xc>

  /*Write to transmit data register*/
	pUSART->DR	=  (ch & 0xFF);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	605a      	str	r2, [r3, #4]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <__io_putchar>:

//It's necessary to declare this function to use with printf
int __io_putchar(int ch){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uart2_write((USART_TypeDef*) usart_stream, ch);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <__io_putchar+0x20>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ffe0 	bl	8000580 <uart2_write>
	return ch;
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000080 	.word	0x20000080

080005d0 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80005dc:	6879      	ldr	r1, [r7, #4]
 80005de:	68b8      	ldr	r0, [r7, #8]
 80005e0:	f000 f808 	bl	80005f4 <compute_uart_bd>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	609a      	str	r2, [r3, #8]
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	085a      	lsrs	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	441a      	add	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	fbb2 f3f3 	udiv	r3, r2, r3
 800060c:	b29b      	uxth	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <enable_usart_clock>:

void enable_usart_clock(uint8_t usart_number){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	if 	(usart_number == USART_1){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d106      	bne.n	800063a <enable_usart_clock+0x1e>
		RCC->APB2ENR |= (1 << 4);
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <enable_usart_clock+0x50>)
 800062e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <enable_usart_clock+0x50>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB1ENR |= (1 << 17);
	}
	else if (usart_number == USART_6){
		RCC->APB2ENR |= (1 << 5);
	}
}
 8000638:	e012      	b.n	8000660 <enable_usart_clock+0x44>
	else if (usart_number == USART_2){
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d106      	bne.n	800064e <enable_usart_clock+0x32>
		RCC->APB1ENR |= (1 << 17);
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <enable_usart_clock+0x50>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a09      	ldr	r2, [pc, #36]	; (800066c <enable_usart_clock+0x50>)
 8000646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064c:	e008      	b.n	8000660 <enable_usart_clock+0x44>
	else if (usart_number == USART_6){
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b06      	cmp	r3, #6
 8000652:	d105      	bne.n	8000660 <enable_usart_clock+0x44>
		RCC->APB2ENR |= (1 << 5);
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <enable_usart_clock+0x50>)
 8000656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <enable_usart_clock+0x50>)
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	40023800 	.word	0x40023800

08000670 <output_default_usart_stream>:

void output_default_usart_stream(USART_TypeDef *pUSART){
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	usart_stream = (uint32_t*) pUSART;	//Cast and global save
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <output_default_usart_stream+0x1c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000080 	.word	0x20000080

08000690 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000692:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000694:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000698:	480c      	ldr	r0, [pc, #48]	; (80006cc <LoopForever+0x6>)
  ldr r1, =_edata
 800069a:	490d      	ldr	r1, [pc, #52]	; (80006d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800069c:	4a0d      	ldr	r2, [pc, #52]	; (80006d4 <LoopForever+0xe>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b0:	4c0a      	ldr	r4, [pc, #40]	; (80006dc <LoopForever+0x16>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006be:	f000 fa49 	bl	8000b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c2:	f7ff fe43 	bl	800034c <main>

080006c6 <LoopForever>:

LoopForever:
  b LoopForever
 80006c6:	e7fe      	b.n	80006c6 <LoopForever>
  ldr   r0, =_estack
 80006c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006d4:	08001054 	.word	0x08001054
  ldr r2, =_sbss
 80006d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006dc:	200001d0 	.word	0x200001d0

080006e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC_IRQHandler>
	...

080006e4 <std>:
 80006e4:	2300      	movs	r3, #0
 80006e6:	b510      	push	{r4, lr}
 80006e8:	4604      	mov	r4, r0
 80006ea:	e9c0 3300 	strd	r3, r3, [r0]
 80006ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006f2:	6083      	str	r3, [r0, #8]
 80006f4:	8181      	strh	r1, [r0, #12]
 80006f6:	6643      	str	r3, [r0, #100]	; 0x64
 80006f8:	81c2      	strh	r2, [r0, #14]
 80006fa:	6183      	str	r3, [r0, #24]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2208      	movs	r2, #8
 8000700:	305c      	adds	r0, #92	; 0x5c
 8000702:	f000 f9d3 	bl	8000aac <memset>
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <std+0x38>)
 8000708:	6263      	str	r3, [r4, #36]	; 0x24
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <std+0x3c>)
 800070c:	62a3      	str	r3, [r4, #40]	; 0x28
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <std+0x40>)
 8000710:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <std+0x44>)
 8000714:	6224      	str	r4, [r4, #32]
 8000716:	6323      	str	r3, [r4, #48]	; 0x30
 8000718:	bd10      	pop	{r4, pc}
 800071a:	bf00      	nop
 800071c:	080008fd 	.word	0x080008fd
 8000720:	0800091f 	.word	0x0800091f
 8000724:	08000957 	.word	0x08000957
 8000728:	0800097b 	.word	0x0800097b

0800072c <stdio_exit_handler>:
 800072c:	4a02      	ldr	r2, [pc, #8]	; (8000738 <stdio_exit_handler+0xc>)
 800072e:	4903      	ldr	r1, [pc, #12]	; (800073c <stdio_exit_handler+0x10>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <stdio_exit_handler+0x14>)
 8000732:	f000 b869 	b.w	8000808 <_fwalk_sglue>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	08000e9d 	.word	0x08000e9d
 8000740:	2000000c 	.word	0x2000000c

08000744 <cleanup_stdio>:
 8000744:	6841      	ldr	r1, [r0, #4]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <cleanup_stdio+0x34>)
 8000748:	4299      	cmp	r1, r3
 800074a:	b510      	push	{r4, lr}
 800074c:	4604      	mov	r4, r0
 800074e:	d001      	beq.n	8000754 <cleanup_stdio+0x10>
 8000750:	f000 fba4 	bl	8000e9c <_fflush_r>
 8000754:	68a1      	ldr	r1, [r4, #8]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <cleanup_stdio+0x38>)
 8000758:	4299      	cmp	r1, r3
 800075a:	d002      	beq.n	8000762 <cleanup_stdio+0x1e>
 800075c:	4620      	mov	r0, r4
 800075e:	f000 fb9d 	bl	8000e9c <_fflush_r>
 8000762:	68e1      	ldr	r1, [r4, #12]
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <cleanup_stdio+0x3c>)
 8000766:	4299      	cmp	r1, r3
 8000768:	d004      	beq.n	8000774 <cleanup_stdio+0x30>
 800076a:	4620      	mov	r0, r4
 800076c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000770:	f000 bb94 	b.w	8000e9c <_fflush_r>
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	20000084 	.word	0x20000084
 800077c:	200000ec 	.word	0x200000ec
 8000780:	20000154 	.word	0x20000154

08000784 <global_stdio_init.part.0>:
 8000784:	b510      	push	{r4, lr}
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <global_stdio_init.part.0+0x30>)
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <global_stdio_init.part.0+0x34>)
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <global_stdio_init.part.0+0x38>)
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	4620      	mov	r0, r4
 8000790:	2200      	movs	r2, #0
 8000792:	2104      	movs	r1, #4
 8000794:	f7ff ffa6 	bl	80006e4 <std>
 8000798:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800079c:	2201      	movs	r2, #1
 800079e:	2109      	movs	r1, #9
 80007a0:	f7ff ffa0 	bl	80006e4 <std>
 80007a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007a8:	2202      	movs	r2, #2
 80007aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ae:	2112      	movs	r1, #18
 80007b0:	f7ff bf98 	b.w	80006e4 <std>
 80007b4:	200001bc 	.word	0x200001bc
 80007b8:	20000084 	.word	0x20000084
 80007bc:	0800072d 	.word	0x0800072d

080007c0 <__sfp_lock_acquire>:
 80007c0:	4801      	ldr	r0, [pc, #4]	; (80007c8 <__sfp_lock_acquire+0x8>)
 80007c2:	f000 b9eb 	b.w	8000b9c <__retarget_lock_acquire_recursive>
 80007c6:	bf00      	nop
 80007c8:	200001c5 	.word	0x200001c5

080007cc <__sfp_lock_release>:
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <__sfp_lock_release+0x8>)
 80007ce:	f000 b9e6 	b.w	8000b9e <__retarget_lock_release_recursive>
 80007d2:	bf00      	nop
 80007d4:	200001c5 	.word	0x200001c5

080007d8 <__sinit>:
 80007d8:	b510      	push	{r4, lr}
 80007da:	4604      	mov	r4, r0
 80007dc:	f7ff fff0 	bl	80007c0 <__sfp_lock_acquire>
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	b11b      	cbz	r3, 80007ec <__sinit+0x14>
 80007e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e8:	f7ff bff0 	b.w	80007cc <__sfp_lock_release>
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <__sinit+0x28>)
 80007ee:	6223      	str	r3, [r4, #32]
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__sinit+0x2c>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d1f5      	bne.n	80007e4 <__sinit+0xc>
 80007f8:	f7ff ffc4 	bl	8000784 <global_stdio_init.part.0>
 80007fc:	e7f2      	b.n	80007e4 <__sinit+0xc>
 80007fe:	bf00      	nop
 8000800:	08000745 	.word	0x08000745
 8000804:	200001bc 	.word	0x200001bc

08000808 <_fwalk_sglue>:
 8000808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800080c:	4607      	mov	r7, r0
 800080e:	4688      	mov	r8, r1
 8000810:	4614      	mov	r4, r2
 8000812:	2600      	movs	r6, #0
 8000814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000818:	f1b9 0901 	subs.w	r9, r9, #1
 800081c:	d505      	bpl.n	800082a <_fwalk_sglue+0x22>
 800081e:	6824      	ldr	r4, [r4, #0]
 8000820:	2c00      	cmp	r4, #0
 8000822:	d1f7      	bne.n	8000814 <_fwalk_sglue+0xc>
 8000824:	4630      	mov	r0, r6
 8000826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800082a:	89ab      	ldrh	r3, [r5, #12]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d907      	bls.n	8000840 <_fwalk_sglue+0x38>
 8000830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000834:	3301      	adds	r3, #1
 8000836:	d003      	beq.n	8000840 <_fwalk_sglue+0x38>
 8000838:	4629      	mov	r1, r5
 800083a:	4638      	mov	r0, r7
 800083c:	47c0      	blx	r8
 800083e:	4306      	orrs	r6, r0
 8000840:	3568      	adds	r5, #104	; 0x68
 8000842:	e7e9      	b.n	8000818 <_fwalk_sglue+0x10>

08000844 <_puts_r>:
 8000844:	6a03      	ldr	r3, [r0, #32]
 8000846:	b570      	push	{r4, r5, r6, lr}
 8000848:	6884      	ldr	r4, [r0, #8]
 800084a:	4605      	mov	r5, r0
 800084c:	460e      	mov	r6, r1
 800084e:	b90b      	cbnz	r3, 8000854 <_puts_r+0x10>
 8000850:	f7ff ffc2 	bl	80007d8 <__sinit>
 8000854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000856:	07db      	lsls	r3, r3, #31
 8000858:	d405      	bmi.n	8000866 <_puts_r+0x22>
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	0598      	lsls	r0, r3, #22
 800085e:	d402      	bmi.n	8000866 <_puts_r+0x22>
 8000860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000862:	f000 f99b 	bl	8000b9c <__retarget_lock_acquire_recursive>
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	0719      	lsls	r1, r3, #28
 800086a:	d513      	bpl.n	8000894 <_puts_r+0x50>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	b18b      	cbz	r3, 8000894 <_puts_r+0x50>
 8000870:	3e01      	subs	r6, #1
 8000872:	68a3      	ldr	r3, [r4, #8]
 8000874:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000878:	3b01      	subs	r3, #1
 800087a:	60a3      	str	r3, [r4, #8]
 800087c:	b9e9      	cbnz	r1, 80008ba <_puts_r+0x76>
 800087e:	2b00      	cmp	r3, #0
 8000880:	da2e      	bge.n	80008e0 <_puts_r+0x9c>
 8000882:	4622      	mov	r2, r4
 8000884:	210a      	movs	r1, #10
 8000886:	4628      	mov	r0, r5
 8000888:	f000 f87b 	bl	8000982 <__swbuf_r>
 800088c:	3001      	adds	r0, #1
 800088e:	d007      	beq.n	80008a0 <_puts_r+0x5c>
 8000890:	250a      	movs	r5, #10
 8000892:	e007      	b.n	80008a4 <_puts_r+0x60>
 8000894:	4621      	mov	r1, r4
 8000896:	4628      	mov	r0, r5
 8000898:	f000 f8b0 	bl	80009fc <__swsetup_r>
 800089c:	2800      	cmp	r0, #0
 800089e:	d0e7      	beq.n	8000870 <_puts_r+0x2c>
 80008a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80008a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008a6:	07da      	lsls	r2, r3, #31
 80008a8:	d405      	bmi.n	80008b6 <_puts_r+0x72>
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	059b      	lsls	r3, r3, #22
 80008ae:	d402      	bmi.n	80008b6 <_puts_r+0x72>
 80008b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008b2:	f000 f974 	bl	8000b9e <__retarget_lock_release_recursive>
 80008b6:	4628      	mov	r0, r5
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da04      	bge.n	80008c8 <_puts_r+0x84>
 80008be:	69a2      	ldr	r2, [r4, #24]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dc06      	bgt.n	80008d2 <_puts_r+0x8e>
 80008c4:	290a      	cmp	r1, #10
 80008c6:	d004      	beq.n	80008d2 <_puts_r+0x8e>
 80008c8:	6823      	ldr	r3, [r4, #0]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	6022      	str	r2, [r4, #0]
 80008ce:	7019      	strb	r1, [r3, #0]
 80008d0:	e7cf      	b.n	8000872 <_puts_r+0x2e>
 80008d2:	4622      	mov	r2, r4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f000 f854 	bl	8000982 <__swbuf_r>
 80008da:	3001      	adds	r0, #1
 80008dc:	d1c9      	bne.n	8000872 <_puts_r+0x2e>
 80008de:	e7df      	b.n	80008a0 <_puts_r+0x5c>
 80008e0:	6823      	ldr	r3, [r4, #0]
 80008e2:	250a      	movs	r5, #10
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	6022      	str	r2, [r4, #0]
 80008e8:	701d      	strb	r5, [r3, #0]
 80008ea:	e7db      	b.n	80008a4 <_puts_r+0x60>

080008ec <puts>:
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <puts+0xc>)
 80008ee:	4601      	mov	r1, r0
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f7ff bfa7 	b.w	8000844 <_puts_r>
 80008f6:	bf00      	nop
 80008f8:	20000058 	.word	0x20000058

080008fc <__sread>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	460c      	mov	r4, r1
 8000900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000904:	f000 f8fc 	bl	8000b00 <_read_r>
 8000908:	2800      	cmp	r0, #0
 800090a:	bfab      	itete	ge
 800090c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800090e:	89a3      	ldrhlt	r3, [r4, #12]
 8000910:	181b      	addge	r3, r3, r0
 8000912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000916:	bfac      	ite	ge
 8000918:	6563      	strge	r3, [r4, #84]	; 0x54
 800091a:	81a3      	strhlt	r3, [r4, #12]
 800091c:	bd10      	pop	{r4, pc}

0800091e <__swrite>:
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000922:	461f      	mov	r7, r3
 8000924:	898b      	ldrh	r3, [r1, #12]
 8000926:	05db      	lsls	r3, r3, #23
 8000928:	4605      	mov	r5, r0
 800092a:	460c      	mov	r4, r1
 800092c:	4616      	mov	r6, r2
 800092e:	d505      	bpl.n	800093c <__swrite+0x1e>
 8000930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000934:	2302      	movs	r3, #2
 8000936:	2200      	movs	r2, #0
 8000938:	f000 f8d0 	bl	8000adc <_lseek_r>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000946:	81a3      	strh	r3, [r4, #12]
 8000948:	4632      	mov	r2, r6
 800094a:	463b      	mov	r3, r7
 800094c:	4628      	mov	r0, r5
 800094e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	f000 b8e7 	b.w	8000b24 <_write_r>

08000956 <__sseek>:
 8000956:	b510      	push	{r4, lr}
 8000958:	460c      	mov	r4, r1
 800095a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095e:	f000 f8bd 	bl	8000adc <_lseek_r>
 8000962:	1c43      	adds	r3, r0, #1
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	bf15      	itete	ne
 8000968:	6560      	strne	r0, [r4, #84]	; 0x54
 800096a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800096e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000972:	81a3      	strheq	r3, [r4, #12]
 8000974:	bf18      	it	ne
 8000976:	81a3      	strhne	r3, [r4, #12]
 8000978:	bd10      	pop	{r4, pc}

0800097a <__sclose>:
 800097a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800097e:	f000 b89d 	b.w	8000abc <_close_r>

08000982 <__swbuf_r>:
 8000982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000984:	460e      	mov	r6, r1
 8000986:	4614      	mov	r4, r2
 8000988:	4605      	mov	r5, r0
 800098a:	b118      	cbz	r0, 8000994 <__swbuf_r+0x12>
 800098c:	6a03      	ldr	r3, [r0, #32]
 800098e:	b90b      	cbnz	r3, 8000994 <__swbuf_r+0x12>
 8000990:	f7ff ff22 	bl	80007d8 <__sinit>
 8000994:	69a3      	ldr	r3, [r4, #24]
 8000996:	60a3      	str	r3, [r4, #8]
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	071a      	lsls	r2, r3, #28
 800099c:	d525      	bpl.n	80009ea <__swbuf_r+0x68>
 800099e:	6923      	ldr	r3, [r4, #16]
 80009a0:	b31b      	cbz	r3, 80009ea <__swbuf_r+0x68>
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	6922      	ldr	r2, [r4, #16]
 80009a6:	1a98      	subs	r0, r3, r2
 80009a8:	6963      	ldr	r3, [r4, #20]
 80009aa:	b2f6      	uxtb	r6, r6
 80009ac:	4283      	cmp	r3, r0
 80009ae:	4637      	mov	r7, r6
 80009b0:	dc04      	bgt.n	80009bc <__swbuf_r+0x3a>
 80009b2:	4621      	mov	r1, r4
 80009b4:	4628      	mov	r0, r5
 80009b6:	f000 fa71 	bl	8000e9c <_fflush_r>
 80009ba:	b9e0      	cbnz	r0, 80009f6 <__swbuf_r+0x74>
 80009bc:	68a3      	ldr	r3, [r4, #8]
 80009be:	3b01      	subs	r3, #1
 80009c0:	60a3      	str	r3, [r4, #8]
 80009c2:	6823      	ldr	r3, [r4, #0]
 80009c4:	1c5a      	adds	r2, r3, #1
 80009c6:	6022      	str	r2, [r4, #0]
 80009c8:	701e      	strb	r6, [r3, #0]
 80009ca:	6962      	ldr	r2, [r4, #20]
 80009cc:	1c43      	adds	r3, r0, #1
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d004      	beq.n	80009dc <__swbuf_r+0x5a>
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	07db      	lsls	r3, r3, #31
 80009d6:	d506      	bpl.n	80009e6 <__swbuf_r+0x64>
 80009d8:	2e0a      	cmp	r6, #10
 80009da:	d104      	bne.n	80009e6 <__swbuf_r+0x64>
 80009dc:	4621      	mov	r1, r4
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 fa5c 	bl	8000e9c <_fflush_r>
 80009e4:	b938      	cbnz	r0, 80009f6 <__swbuf_r+0x74>
 80009e6:	4638      	mov	r0, r7
 80009e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ea:	4621      	mov	r1, r4
 80009ec:	4628      	mov	r0, r5
 80009ee:	f000 f805 	bl	80009fc <__swsetup_r>
 80009f2:	2800      	cmp	r0, #0
 80009f4:	d0d5      	beq.n	80009a2 <__swbuf_r+0x20>
 80009f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009fa:	e7f4      	b.n	80009e6 <__swbuf_r+0x64>

080009fc <__swsetup_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <__swsetup_r+0xac>)
 8000a00:	4605      	mov	r5, r0
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	460c      	mov	r4, r1
 8000a06:	b118      	cbz	r0, 8000a10 <__swsetup_r+0x14>
 8000a08:	6a03      	ldr	r3, [r0, #32]
 8000a0a:	b90b      	cbnz	r3, 8000a10 <__swsetup_r+0x14>
 8000a0c:	f7ff fee4 	bl	80007d8 <__sinit>
 8000a10:	89a3      	ldrh	r3, [r4, #12]
 8000a12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a16:	0718      	lsls	r0, r3, #28
 8000a18:	d422      	bmi.n	8000a60 <__swsetup_r+0x64>
 8000a1a:	06d9      	lsls	r1, r3, #27
 8000a1c:	d407      	bmi.n	8000a2e <__swsetup_r+0x32>
 8000a1e:	2309      	movs	r3, #9
 8000a20:	602b      	str	r3, [r5, #0]
 8000a22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a26:	81a3      	strh	r3, [r4, #12]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	e034      	b.n	8000a98 <__swsetup_r+0x9c>
 8000a2e:	0758      	lsls	r0, r3, #29
 8000a30:	d512      	bpl.n	8000a58 <__swsetup_r+0x5c>
 8000a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a34:	b141      	cbz	r1, 8000a48 <__swsetup_r+0x4c>
 8000a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d002      	beq.n	8000a44 <__swsetup_r+0x48>
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f000 f8ae 	bl	8000ba0 <_free_r>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6363      	str	r3, [r4, #52]	; 0x34
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a4e:	81a3      	strh	r3, [r4, #12]
 8000a50:	2300      	movs	r3, #0
 8000a52:	6063      	str	r3, [r4, #4]
 8000a54:	6923      	ldr	r3, [r4, #16]
 8000a56:	6023      	str	r3, [r4, #0]
 8000a58:	89a3      	ldrh	r3, [r4, #12]
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	81a3      	strh	r3, [r4, #12]
 8000a60:	6923      	ldr	r3, [r4, #16]
 8000a62:	b94b      	cbnz	r3, 8000a78 <__swsetup_r+0x7c>
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a6e:	d003      	beq.n	8000a78 <__swsetup_r+0x7c>
 8000a70:	4621      	mov	r1, r4
 8000a72:	4628      	mov	r0, r5
 8000a74:	f000 fa60 	bl	8000f38 <__smakebuf_r>
 8000a78:	89a0      	ldrh	r0, [r4, #12]
 8000a7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a7e:	f010 0301 	ands.w	r3, r0, #1
 8000a82:	d00a      	beq.n	8000a9a <__swsetup_r+0x9e>
 8000a84:	2300      	movs	r3, #0
 8000a86:	60a3      	str	r3, [r4, #8]
 8000a88:	6963      	ldr	r3, [r4, #20]
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	61a3      	str	r3, [r4, #24]
 8000a8e:	6923      	ldr	r3, [r4, #16]
 8000a90:	b943      	cbnz	r3, 8000aa4 <__swsetup_r+0xa8>
 8000a92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a96:	d1c4      	bne.n	8000a22 <__swsetup_r+0x26>
 8000a98:	bd38      	pop	{r3, r4, r5, pc}
 8000a9a:	0781      	lsls	r1, r0, #30
 8000a9c:	bf58      	it	pl
 8000a9e:	6963      	ldrpl	r3, [r4, #20]
 8000aa0:	60a3      	str	r3, [r4, #8]
 8000aa2:	e7f4      	b.n	8000a8e <__swsetup_r+0x92>
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e7f7      	b.n	8000a98 <__swsetup_r+0x9c>
 8000aa8:	20000058 	.word	0x20000058

08000aac <memset>:
 8000aac:	4402      	add	r2, r0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d100      	bne.n	8000ab6 <memset+0xa>
 8000ab4:	4770      	bx	lr
 8000ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aba:	e7f9      	b.n	8000ab0 <memset+0x4>

08000abc <_close_r>:
 8000abc:	b538      	push	{r3, r4, r5, lr}
 8000abe:	4d06      	ldr	r5, [pc, #24]	; (8000ad8 <_close_r+0x1c>)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	602b      	str	r3, [r5, #0]
 8000ac8:	f7ff fcc1 	bl	800044e <_close>
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	d102      	bne.n	8000ad6 <_close_r+0x1a>
 8000ad0:	682b      	ldr	r3, [r5, #0]
 8000ad2:	b103      	cbz	r3, 8000ad6 <_close_r+0x1a>
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
 8000ad8:	200001c0 	.word	0x200001c0

08000adc <_lseek_r>:
 8000adc:	b538      	push	{r3, r4, r5, lr}
 8000ade:	4d07      	ldr	r5, [pc, #28]	; (8000afc <_lseek_r+0x20>)
 8000ae0:	4604      	mov	r4, r0
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	f7ff fcd6 	bl	800049c <_lseek>
 8000af0:	1c43      	adds	r3, r0, #1
 8000af2:	d102      	bne.n	8000afa <_lseek_r+0x1e>
 8000af4:	682b      	ldr	r3, [r5, #0]
 8000af6:	b103      	cbz	r3, 8000afa <_lseek_r+0x1e>
 8000af8:	6023      	str	r3, [r4, #0]
 8000afa:	bd38      	pop	{r3, r4, r5, pc}
 8000afc:	200001c0 	.word	0x200001c0

08000b00 <_read_r>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	4d07      	ldr	r5, [pc, #28]	; (8000b20 <_read_r+0x20>)
 8000b04:	4604      	mov	r4, r0
 8000b06:	4608      	mov	r0, r1
 8000b08:	4611      	mov	r1, r2
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	602a      	str	r2, [r5, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	f7ff fc64 	bl	80003dc <_read>
 8000b14:	1c43      	adds	r3, r0, #1
 8000b16:	d102      	bne.n	8000b1e <_read_r+0x1e>
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	b103      	cbz	r3, 8000b1e <_read_r+0x1e>
 8000b1c:	6023      	str	r3, [r4, #0]
 8000b1e:	bd38      	pop	{r3, r4, r5, pc}
 8000b20:	200001c0 	.word	0x200001c0

08000b24 <_write_r>:
 8000b24:	b538      	push	{r3, r4, r5, lr}
 8000b26:	4d07      	ldr	r5, [pc, #28]	; (8000b44 <_write_r+0x20>)
 8000b28:	4604      	mov	r4, r0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	2200      	movs	r2, #0
 8000b30:	602a      	str	r2, [r5, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	f7ff fc6f 	bl	8000416 <_write>
 8000b38:	1c43      	adds	r3, r0, #1
 8000b3a:	d102      	bne.n	8000b42 <_write_r+0x1e>
 8000b3c:	682b      	ldr	r3, [r5, #0]
 8000b3e:	b103      	cbz	r3, 8000b42 <_write_r+0x1e>
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	bd38      	pop	{r3, r4, r5, pc}
 8000b44:	200001c0 	.word	0x200001c0

08000b48 <__errno>:
 8000b48:	4b01      	ldr	r3, [pc, #4]	; (8000b50 <__errno+0x8>)
 8000b4a:	6818      	ldr	r0, [r3, #0]
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000058 	.word	0x20000058

08000b54 <__libc_init_array>:
 8000b54:	b570      	push	{r4, r5, r6, lr}
 8000b56:	4d0d      	ldr	r5, [pc, #52]	; (8000b8c <__libc_init_array+0x38>)
 8000b58:	4c0d      	ldr	r4, [pc, #52]	; (8000b90 <__libc_init_array+0x3c>)
 8000b5a:	1b64      	subs	r4, r4, r5
 8000b5c:	10a4      	asrs	r4, r4, #2
 8000b5e:	2600      	movs	r6, #0
 8000b60:	42a6      	cmp	r6, r4
 8000b62:	d109      	bne.n	8000b78 <__libc_init_array+0x24>
 8000b64:	4d0b      	ldr	r5, [pc, #44]	; (8000b94 <__libc_init_array+0x40>)
 8000b66:	4c0c      	ldr	r4, [pc, #48]	; (8000b98 <__libc_init_array+0x44>)
 8000b68:	f000 fa54 	bl	8001014 <_init>
 8000b6c:	1b64      	subs	r4, r4, r5
 8000b6e:	10a4      	asrs	r4, r4, #2
 8000b70:	2600      	movs	r6, #0
 8000b72:	42a6      	cmp	r6, r4
 8000b74:	d105      	bne.n	8000b82 <__libc_init_array+0x2e>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b7c:	4798      	blx	r3
 8000b7e:	3601      	adds	r6, #1
 8000b80:	e7ee      	b.n	8000b60 <__libc_init_array+0xc>
 8000b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b86:	4798      	blx	r3
 8000b88:	3601      	adds	r6, #1
 8000b8a:	e7f2      	b.n	8000b72 <__libc_init_array+0x1e>
 8000b8c:	0800104c 	.word	0x0800104c
 8000b90:	0800104c 	.word	0x0800104c
 8000b94:	0800104c 	.word	0x0800104c
 8000b98:	08001050 	.word	0x08001050

08000b9c <__retarget_lock_acquire_recursive>:
 8000b9c:	4770      	bx	lr

08000b9e <__retarget_lock_release_recursive>:
 8000b9e:	4770      	bx	lr

08000ba0 <_free_r>:
 8000ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d044      	beq.n	8000c30 <_free_r+0x90>
 8000ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000baa:	9001      	str	r0, [sp, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f1a1 0404 	sub.w	r4, r1, #4
 8000bb2:	bfb8      	it	lt
 8000bb4:	18e4      	addlt	r4, r4, r3
 8000bb6:	f000 f8df 	bl	8000d78 <__malloc_lock>
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <_free_r+0x94>)
 8000bbc:	9801      	ldr	r0, [sp, #4]
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	b933      	cbnz	r3, 8000bd0 <_free_r+0x30>
 8000bc2:	6063      	str	r3, [r4, #4]
 8000bc4:	6014      	str	r4, [r2, #0]
 8000bc6:	b003      	add	sp, #12
 8000bc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bcc:	f000 b8da 	b.w	8000d84 <__malloc_unlock>
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	d908      	bls.n	8000be6 <_free_r+0x46>
 8000bd4:	6825      	ldr	r5, [r4, #0]
 8000bd6:	1961      	adds	r1, r4, r5
 8000bd8:	428b      	cmp	r3, r1
 8000bda:	bf01      	itttt	eq
 8000bdc:	6819      	ldreq	r1, [r3, #0]
 8000bde:	685b      	ldreq	r3, [r3, #4]
 8000be0:	1949      	addeq	r1, r1, r5
 8000be2:	6021      	streq	r1, [r4, #0]
 8000be4:	e7ed      	b.n	8000bc2 <_free_r+0x22>
 8000be6:	461a      	mov	r2, r3
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	b10b      	cbz	r3, 8000bf0 <_free_r+0x50>
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d9fa      	bls.n	8000be6 <_free_r+0x46>
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	1855      	adds	r5, r2, r1
 8000bf4:	42a5      	cmp	r5, r4
 8000bf6:	d10b      	bne.n	8000c10 <_free_r+0x70>
 8000bf8:	6824      	ldr	r4, [r4, #0]
 8000bfa:	4421      	add	r1, r4
 8000bfc:	1854      	adds	r4, r2, r1
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	6011      	str	r1, [r2, #0]
 8000c02:	d1e0      	bne.n	8000bc6 <_free_r+0x26>
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	6053      	str	r3, [r2, #4]
 8000c0a:	440c      	add	r4, r1
 8000c0c:	6014      	str	r4, [r2, #0]
 8000c0e:	e7da      	b.n	8000bc6 <_free_r+0x26>
 8000c10:	d902      	bls.n	8000c18 <_free_r+0x78>
 8000c12:	230c      	movs	r3, #12
 8000c14:	6003      	str	r3, [r0, #0]
 8000c16:	e7d6      	b.n	8000bc6 <_free_r+0x26>
 8000c18:	6825      	ldr	r5, [r4, #0]
 8000c1a:	1961      	adds	r1, r4, r5
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	bf04      	itt	eq
 8000c20:	6819      	ldreq	r1, [r3, #0]
 8000c22:	685b      	ldreq	r3, [r3, #4]
 8000c24:	6063      	str	r3, [r4, #4]
 8000c26:	bf04      	itt	eq
 8000c28:	1949      	addeq	r1, r1, r5
 8000c2a:	6021      	streq	r1, [r4, #0]
 8000c2c:	6054      	str	r4, [r2, #4]
 8000c2e:	e7ca      	b.n	8000bc6 <_free_r+0x26>
 8000c30:	b003      	add	sp, #12
 8000c32:	bd30      	pop	{r4, r5, pc}
 8000c34:	200001c8 	.word	0x200001c8

08000c38 <sbrk_aligned>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	4e0e      	ldr	r6, [pc, #56]	; (8000c74 <sbrk_aligned+0x3c>)
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	6831      	ldr	r1, [r6, #0]
 8000c40:	4605      	mov	r5, r0
 8000c42:	b911      	cbnz	r1, 8000c4a <sbrk_aligned+0x12>
 8000c44:	f000 f9d6 	bl	8000ff4 <_sbrk_r>
 8000c48:	6030      	str	r0, [r6, #0]
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	4628      	mov	r0, r5
 8000c4e:	f000 f9d1 	bl	8000ff4 <_sbrk_r>
 8000c52:	1c43      	adds	r3, r0, #1
 8000c54:	d00a      	beq.n	8000c6c <sbrk_aligned+0x34>
 8000c56:	1cc4      	adds	r4, r0, #3
 8000c58:	f024 0403 	bic.w	r4, r4, #3
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d007      	beq.n	8000c70 <sbrk_aligned+0x38>
 8000c60:	1a21      	subs	r1, r4, r0
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 f9c6 	bl	8000ff4 <_sbrk_r>
 8000c68:	3001      	adds	r0, #1
 8000c6a:	d101      	bne.n	8000c70 <sbrk_aligned+0x38>
 8000c6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000c70:	4620      	mov	r0, r4
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	200001cc 	.word	0x200001cc

08000c78 <_malloc_r>:
 8000c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c7c:	1ccd      	adds	r5, r1, #3
 8000c7e:	f025 0503 	bic.w	r5, r5, #3
 8000c82:	3508      	adds	r5, #8
 8000c84:	2d0c      	cmp	r5, #12
 8000c86:	bf38      	it	cc
 8000c88:	250c      	movcc	r5, #12
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	4607      	mov	r7, r0
 8000c8e:	db01      	blt.n	8000c94 <_malloc_r+0x1c>
 8000c90:	42a9      	cmp	r1, r5
 8000c92:	d905      	bls.n	8000ca0 <_malloc_r+0x28>
 8000c94:	230c      	movs	r3, #12
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	2600      	movs	r6, #0
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d74 <_malloc_r+0xfc>
 8000ca4:	f000 f868 	bl	8000d78 <__malloc_lock>
 8000ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8000cac:	461c      	mov	r4, r3
 8000cae:	bb5c      	cbnz	r4, 8000d08 <_malloc_r+0x90>
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	f7ff ffc0 	bl	8000c38 <sbrk_aligned>
 8000cb8:	1c43      	adds	r3, r0, #1
 8000cba:	4604      	mov	r4, r0
 8000cbc:	d155      	bne.n	8000d6a <_malloc_r+0xf2>
 8000cbe:	f8d8 4000 	ldr.w	r4, [r8]
 8000cc2:	4626      	mov	r6, r4
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d145      	bne.n	8000d54 <_malloc_r+0xdc>
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	d048      	beq.n	8000d5e <_malloc_r+0xe6>
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	4631      	mov	r1, r6
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	eb04 0903 	add.w	r9, r4, r3
 8000cd6:	f000 f98d 	bl	8000ff4 <_sbrk_r>
 8000cda:	4581      	cmp	r9, r0
 8000cdc:	d13f      	bne.n	8000d5e <_malloc_r+0xe6>
 8000cde:	6821      	ldr	r1, [r4, #0]
 8000ce0:	1a6d      	subs	r5, r5, r1
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f7ff ffa7 	bl	8000c38 <sbrk_aligned>
 8000cea:	3001      	adds	r0, #1
 8000cec:	d037      	beq.n	8000d5e <_malloc_r+0xe6>
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	442b      	add	r3, r5
 8000cf2:	6023      	str	r3, [r4, #0]
 8000cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d038      	beq.n	8000d6e <_malloc_r+0xf6>
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	42a2      	cmp	r2, r4
 8000d00:	d12b      	bne.n	8000d5a <_malloc_r+0xe2>
 8000d02:	2200      	movs	r2, #0
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	e00f      	b.n	8000d28 <_malloc_r+0xb0>
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	1b52      	subs	r2, r2, r5
 8000d0c:	d41f      	bmi.n	8000d4e <_malloc_r+0xd6>
 8000d0e:	2a0b      	cmp	r2, #11
 8000d10:	d917      	bls.n	8000d42 <_malloc_r+0xca>
 8000d12:	1961      	adds	r1, r4, r5
 8000d14:	42a3      	cmp	r3, r4
 8000d16:	6025      	str	r5, [r4, #0]
 8000d18:	bf18      	it	ne
 8000d1a:	6059      	strne	r1, [r3, #4]
 8000d1c:	6863      	ldr	r3, [r4, #4]
 8000d1e:	bf08      	it	eq
 8000d20:	f8c8 1000 	streq.w	r1, [r8]
 8000d24:	5162      	str	r2, [r4, r5]
 8000d26:	604b      	str	r3, [r1, #4]
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f104 060b 	add.w	r6, r4, #11
 8000d2e:	f000 f829 	bl	8000d84 <__malloc_unlock>
 8000d32:	f026 0607 	bic.w	r6, r6, #7
 8000d36:	1d23      	adds	r3, r4, #4
 8000d38:	1af2      	subs	r2, r6, r3
 8000d3a:	d0ae      	beq.n	8000c9a <_malloc_r+0x22>
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	50a3      	str	r3, [r4, r2]
 8000d40:	e7ab      	b.n	8000c9a <_malloc_r+0x22>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	6862      	ldr	r2, [r4, #4]
 8000d46:	d1dd      	bne.n	8000d04 <_malloc_r+0x8c>
 8000d48:	f8c8 2000 	str.w	r2, [r8]
 8000d4c:	e7ec      	b.n	8000d28 <_malloc_r+0xb0>
 8000d4e:	4623      	mov	r3, r4
 8000d50:	6864      	ldr	r4, [r4, #4]
 8000d52:	e7ac      	b.n	8000cae <_malloc_r+0x36>
 8000d54:	4634      	mov	r4, r6
 8000d56:	6876      	ldr	r6, [r6, #4]
 8000d58:	e7b4      	b.n	8000cc4 <_malloc_r+0x4c>
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	e7cc      	b.n	8000cf8 <_malloc_r+0x80>
 8000d5e:	230c      	movs	r3, #12
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4638      	mov	r0, r7
 8000d64:	f000 f80e 	bl	8000d84 <__malloc_unlock>
 8000d68:	e797      	b.n	8000c9a <_malloc_r+0x22>
 8000d6a:	6025      	str	r5, [r4, #0]
 8000d6c:	e7dc      	b.n	8000d28 <_malloc_r+0xb0>
 8000d6e:	605b      	str	r3, [r3, #4]
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	bf00      	nop
 8000d74:	200001c8 	.word	0x200001c8

08000d78 <__malloc_lock>:
 8000d78:	4801      	ldr	r0, [pc, #4]	; (8000d80 <__malloc_lock+0x8>)
 8000d7a:	f7ff bf0f 	b.w	8000b9c <__retarget_lock_acquire_recursive>
 8000d7e:	bf00      	nop
 8000d80:	200001c4 	.word	0x200001c4

08000d84 <__malloc_unlock>:
 8000d84:	4801      	ldr	r0, [pc, #4]	; (8000d8c <__malloc_unlock+0x8>)
 8000d86:	f7ff bf0a 	b.w	8000b9e <__retarget_lock_release_recursive>
 8000d8a:	bf00      	nop
 8000d8c:	200001c4 	.word	0x200001c4

08000d90 <__sflush_r>:
 8000d90:	898a      	ldrh	r2, [r1, #12]
 8000d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d96:	4605      	mov	r5, r0
 8000d98:	0710      	lsls	r0, r2, #28
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	d458      	bmi.n	8000e50 <__sflush_r+0xc0>
 8000d9e:	684b      	ldr	r3, [r1, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dc05      	bgt.n	8000db0 <__sflush_r+0x20>
 8000da4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dc02      	bgt.n	8000db0 <__sflush_r+0x20>
 8000daa:	2000      	movs	r0, #0
 8000dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0f9      	beq.n	8000daa <__sflush_r+0x1a>
 8000db6:	2300      	movs	r3, #0
 8000db8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000dbc:	682f      	ldr	r7, [r5, #0]
 8000dbe:	6a21      	ldr	r1, [r4, #32]
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	d032      	beq.n	8000e2a <__sflush_r+0x9a>
 8000dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000dc6:	89a3      	ldrh	r3, [r4, #12]
 8000dc8:	075a      	lsls	r2, r3, #29
 8000dca:	d505      	bpl.n	8000dd8 <__sflush_r+0x48>
 8000dcc:	6863      	ldr	r3, [r4, #4]
 8000dce:	1ac0      	subs	r0, r0, r3
 8000dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dd2:	b10b      	cbz	r3, 8000dd8 <__sflush_r+0x48>
 8000dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dd6:	1ac0      	subs	r0, r0, r3
 8000dd8:	2300      	movs	r3, #0
 8000dda:	4602      	mov	r2, r0
 8000ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000dde:	6a21      	ldr	r1, [r4, #32]
 8000de0:	4628      	mov	r0, r5
 8000de2:	47b0      	blx	r6
 8000de4:	1c43      	adds	r3, r0, #1
 8000de6:	89a3      	ldrh	r3, [r4, #12]
 8000de8:	d106      	bne.n	8000df8 <__sflush_r+0x68>
 8000dea:	6829      	ldr	r1, [r5, #0]
 8000dec:	291d      	cmp	r1, #29
 8000dee:	d82b      	bhi.n	8000e48 <__sflush_r+0xb8>
 8000df0:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <__sflush_r+0x108>)
 8000df2:	410a      	asrs	r2, r1
 8000df4:	07d6      	lsls	r6, r2, #31
 8000df6:	d427      	bmi.n	8000e48 <__sflush_r+0xb8>
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6062      	str	r2, [r4, #4]
 8000dfc:	04d9      	lsls	r1, r3, #19
 8000dfe:	6922      	ldr	r2, [r4, #16]
 8000e00:	6022      	str	r2, [r4, #0]
 8000e02:	d504      	bpl.n	8000e0e <__sflush_r+0x7e>
 8000e04:	1c42      	adds	r2, r0, #1
 8000e06:	d101      	bne.n	8000e0c <__sflush_r+0x7c>
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	b903      	cbnz	r3, 8000e0e <__sflush_r+0x7e>
 8000e0c:	6560      	str	r0, [r4, #84]	; 0x54
 8000e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e10:	602f      	str	r7, [r5, #0]
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d0c9      	beq.n	8000daa <__sflush_r+0x1a>
 8000e16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d002      	beq.n	8000e24 <__sflush_r+0x94>
 8000e1e:	4628      	mov	r0, r5
 8000e20:	f7ff febe 	bl	8000ba0 <_free_r>
 8000e24:	2000      	movs	r0, #0
 8000e26:	6360      	str	r0, [r4, #52]	; 0x34
 8000e28:	e7c0      	b.n	8000dac <__sflush_r+0x1c>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4628      	mov	r0, r5
 8000e2e:	47b0      	blx	r6
 8000e30:	1c41      	adds	r1, r0, #1
 8000e32:	d1c8      	bne.n	8000dc6 <__sflush_r+0x36>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0c5      	beq.n	8000dc6 <__sflush_r+0x36>
 8000e3a:	2b1d      	cmp	r3, #29
 8000e3c:	d001      	beq.n	8000e42 <__sflush_r+0xb2>
 8000e3e:	2b16      	cmp	r3, #22
 8000e40:	d101      	bne.n	8000e46 <__sflush_r+0xb6>
 8000e42:	602f      	str	r7, [r5, #0]
 8000e44:	e7b1      	b.n	8000daa <__sflush_r+0x1a>
 8000e46:	89a3      	ldrh	r3, [r4, #12]
 8000e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4c:	81a3      	strh	r3, [r4, #12]
 8000e4e:	e7ad      	b.n	8000dac <__sflush_r+0x1c>
 8000e50:	690f      	ldr	r7, [r1, #16]
 8000e52:	2f00      	cmp	r7, #0
 8000e54:	d0a9      	beq.n	8000daa <__sflush_r+0x1a>
 8000e56:	0793      	lsls	r3, r2, #30
 8000e58:	680e      	ldr	r6, [r1, #0]
 8000e5a:	bf08      	it	eq
 8000e5c:	694b      	ldreq	r3, [r1, #20]
 8000e5e:	600f      	str	r7, [r1, #0]
 8000e60:	bf18      	it	ne
 8000e62:	2300      	movne	r3, #0
 8000e64:	eba6 0807 	sub.w	r8, r6, r7
 8000e68:	608b      	str	r3, [r1, #8]
 8000e6a:	f1b8 0f00 	cmp.w	r8, #0
 8000e6e:	dd9c      	ble.n	8000daa <__sflush_r+0x1a>
 8000e70:	6a21      	ldr	r1, [r4, #32]
 8000e72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e74:	4643      	mov	r3, r8
 8000e76:	463a      	mov	r2, r7
 8000e78:	4628      	mov	r0, r5
 8000e7a:	47b0      	blx	r6
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	dc06      	bgt.n	8000e8e <__sflush_r+0xfe>
 8000e80:	89a3      	ldrh	r3, [r4, #12]
 8000e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e86:	81a3      	strh	r3, [r4, #12]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e8c:	e78e      	b.n	8000dac <__sflush_r+0x1c>
 8000e8e:	4407      	add	r7, r0
 8000e90:	eba8 0800 	sub.w	r8, r8, r0
 8000e94:	e7e9      	b.n	8000e6a <__sflush_r+0xda>
 8000e96:	bf00      	nop
 8000e98:	dfbffffe 	.word	0xdfbffffe

08000e9c <_fflush_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	690b      	ldr	r3, [r1, #16]
 8000ea0:	4605      	mov	r5, r0
 8000ea2:	460c      	mov	r4, r1
 8000ea4:	b913      	cbnz	r3, 8000eac <_fflush_r+0x10>
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	b118      	cbz	r0, 8000eb6 <_fflush_r+0x1a>
 8000eae:	6a03      	ldr	r3, [r0, #32]
 8000eb0:	b90b      	cbnz	r3, 8000eb6 <_fflush_r+0x1a>
 8000eb2:	f7ff fc91 	bl	80007d8 <__sinit>
 8000eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f3      	beq.n	8000ea6 <_fflush_r+0xa>
 8000ebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ec0:	07d0      	lsls	r0, r2, #31
 8000ec2:	d404      	bmi.n	8000ece <_fflush_r+0x32>
 8000ec4:	0599      	lsls	r1, r3, #22
 8000ec6:	d402      	bmi.n	8000ece <_fflush_r+0x32>
 8000ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eca:	f7ff fe67 	bl	8000b9c <__retarget_lock_acquire_recursive>
 8000ece:	4628      	mov	r0, r5
 8000ed0:	4621      	mov	r1, r4
 8000ed2:	f7ff ff5d 	bl	8000d90 <__sflush_r>
 8000ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ed8:	07da      	lsls	r2, r3, #31
 8000eda:	4605      	mov	r5, r0
 8000edc:	d4e4      	bmi.n	8000ea8 <_fflush_r+0xc>
 8000ede:	89a3      	ldrh	r3, [r4, #12]
 8000ee0:	059b      	lsls	r3, r3, #22
 8000ee2:	d4e1      	bmi.n	8000ea8 <_fflush_r+0xc>
 8000ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ee6:	f7ff fe5a 	bl	8000b9e <__retarget_lock_release_recursive>
 8000eea:	e7dd      	b.n	8000ea8 <_fflush_r+0xc>

08000eec <__swhatbuf_r>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	460c      	mov	r4, r1
 8000ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef4:	2900      	cmp	r1, #0
 8000ef6:	b096      	sub	sp, #88	; 0x58
 8000ef8:	4615      	mov	r5, r2
 8000efa:	461e      	mov	r6, r3
 8000efc:	da0d      	bge.n	8000f1a <__swhatbuf_r+0x2e>
 8000efe:	89a3      	ldrh	r3, [r4, #12]
 8000f00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f04:	f04f 0100 	mov.w	r1, #0
 8000f08:	bf0c      	ite	eq
 8000f0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000f0e:	2340      	movne	r3, #64	; 0x40
 8000f10:	2000      	movs	r0, #0
 8000f12:	6031      	str	r1, [r6, #0]
 8000f14:	602b      	str	r3, [r5, #0]
 8000f16:	b016      	add	sp, #88	; 0x58
 8000f18:	bd70      	pop	{r4, r5, r6, pc}
 8000f1a:	466a      	mov	r2, sp
 8000f1c:	f000 f848 	bl	8000fb0 <_fstat_r>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	dbec      	blt.n	8000efe <__swhatbuf_r+0x12>
 8000f24:	9901      	ldr	r1, [sp, #4]
 8000f26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f2e:	4259      	negs	r1, r3
 8000f30:	4159      	adcs	r1, r3
 8000f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f36:	e7eb      	b.n	8000f10 <__swhatbuf_r+0x24>

08000f38 <__smakebuf_r>:
 8000f38:	898b      	ldrh	r3, [r1, #12]
 8000f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f3c:	079d      	lsls	r5, r3, #30
 8000f3e:	4606      	mov	r6, r0
 8000f40:	460c      	mov	r4, r1
 8000f42:	d507      	bpl.n	8000f54 <__smakebuf_r+0x1c>
 8000f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	6123      	str	r3, [r4, #16]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	6163      	str	r3, [r4, #20]
 8000f50:	b002      	add	sp, #8
 8000f52:	bd70      	pop	{r4, r5, r6, pc}
 8000f54:	ab01      	add	r3, sp, #4
 8000f56:	466a      	mov	r2, sp
 8000f58:	f7ff ffc8 	bl	8000eec <__swhatbuf_r>
 8000f5c:	9900      	ldr	r1, [sp, #0]
 8000f5e:	4605      	mov	r5, r0
 8000f60:	4630      	mov	r0, r6
 8000f62:	f7ff fe89 	bl	8000c78 <_malloc_r>
 8000f66:	b948      	cbnz	r0, 8000f7c <__smakebuf_r+0x44>
 8000f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f6c:	059a      	lsls	r2, r3, #22
 8000f6e:	d4ef      	bmi.n	8000f50 <__smakebuf_r+0x18>
 8000f70:	f023 0303 	bic.w	r3, r3, #3
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	e7e3      	b.n	8000f44 <__smakebuf_r+0xc>
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	6020      	str	r0, [r4, #0]
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	81a3      	strh	r3, [r4, #12]
 8000f86:	9b00      	ldr	r3, [sp, #0]
 8000f88:	6163      	str	r3, [r4, #20]
 8000f8a:	9b01      	ldr	r3, [sp, #4]
 8000f8c:	6120      	str	r0, [r4, #16]
 8000f8e:	b15b      	cbz	r3, 8000fa8 <__smakebuf_r+0x70>
 8000f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f94:	4630      	mov	r0, r6
 8000f96:	f000 f81d 	bl	8000fd4 <_isatty_r>
 8000f9a:	b128      	cbz	r0, 8000fa8 <__smakebuf_r+0x70>
 8000f9c:	89a3      	ldrh	r3, [r4, #12]
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	81a3      	strh	r3, [r4, #12]
 8000fa8:	89a3      	ldrh	r3, [r4, #12]
 8000faa:	431d      	orrs	r5, r3
 8000fac:	81a5      	strh	r5, [r4, #12]
 8000fae:	e7cf      	b.n	8000f50 <__smakebuf_r+0x18>

08000fb0 <_fstat_r>:
 8000fb0:	b538      	push	{r3, r4, r5, lr}
 8000fb2:	4d07      	ldr	r5, [pc, #28]	; (8000fd0 <_fstat_r+0x20>)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	602b      	str	r3, [r5, #0]
 8000fbe:	f7ff fa52 	bl	8000466 <_fstat>
 8000fc2:	1c43      	adds	r3, r0, #1
 8000fc4:	d102      	bne.n	8000fcc <_fstat_r+0x1c>
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	b103      	cbz	r3, 8000fcc <_fstat_r+0x1c>
 8000fca:	6023      	str	r3, [r4, #0]
 8000fcc:	bd38      	pop	{r3, r4, r5, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001c0 	.word	0x200001c0

08000fd4 <_isatty_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	; (8000ff0 <_isatty_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f7ff fa51 	bl	8000486 <_isatty>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_isatty_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_isatty_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	200001c0 	.word	0x200001c0

08000ff4 <_sbrk_r>:
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4d06      	ldr	r5, [pc, #24]	; (8001010 <_sbrk_r+0x1c>)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	602b      	str	r3, [r5, #0]
 8001000:	f7ff fa5a 	bl	80004b8 <_sbrk>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d102      	bne.n	800100e <_sbrk_r+0x1a>
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	b103      	cbz	r3, 800100e <_sbrk_r+0x1a>
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	200001c0 	.word	0x200001c0

08001014 <_init>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr

08001020 <_fini>:
 8001020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001022:	bf00      	nop
 8001024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001026:	bc08      	pop	{r3}
 8001028:	469e      	mov	lr, r3
 800102a:	4770      	bx	lr
