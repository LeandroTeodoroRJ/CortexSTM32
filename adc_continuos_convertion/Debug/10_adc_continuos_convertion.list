
10_adc_continuos_convertion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000134c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080014ec  080014ec  000114ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001534  08001534  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001534  08001534  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001534  08001534  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001534  08001534  00011534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001538  08001538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800153c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08001598  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08001598  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000132f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000613  00000000  00000000  000213fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00021a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000109  00000000  00000000  00021ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fb3c  00000000  00000000  00021ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d83  00000000  00000000  000317e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055b3e  00000000  00000000  00033568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c2c  00000000  00000000  000890a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00089cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014d4 	.word	0x080014d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014d4 	.word	0x080014d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pa1_adc_init>:
#define CR2_SWSTART		(1U << 30)
#define CR2_CONT		(1U << 1)
#define SR_EOC			(1U << 1)


void pa1_adc_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <pa1_adc_init+0x60>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <pa1_adc_init+0x60>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA1 input mode analog
	GPIOA->MODER |= (1U << 2);
 8000290:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <pa1_adc_init+0x64>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <pa1_adc_init+0x64>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 3);
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <pa1_adc_init+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	; (80002e4 <pa1_adc_init+0x64>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6013      	str	r3, [r2, #0]

	// Enable clock to ADC module
	RCC->APB2ENR |= ADC1EN;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <pa1_adc_init+0x60>)
 80002aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <pa1_adc_init+0x60>)
 80002ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b2:	6453      	str	r3, [r2, #68]	; 0x44

	// Configure ADC parameters
	// 1-Conversion sequence start
	ADC1->SQR3 |= ADC_CH1;  //Put one in SQ1 group (channel 1)
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <pa1_adc_init+0x68>)
 80002b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <pa1_adc_init+0x68>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6353      	str	r3, [r2, #52]	; 0x34

	// 2-Conservion length
	ADC1->SQR1 |= ADC_SEQ_LEN_1;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <pa1_adc_init+0x68>)
 80002c2:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <pa1_adc_init+0x68>)
 80002c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002c6:	62d3      	str	r3, [r2, #44]	; 0x2c

	// 3-Enable adc module
	ADC1->CR2 |= CR2_ADON;
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <pa1_adc_init+0x68>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a06      	ldr	r2, [pc, #24]	; (80002e8 <pa1_adc_init+0x68>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6093      	str	r3, [r2, #8]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40012000 	.word	0x40012000

080002ec <start_conversion>:


void start_conversion(void){
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	// Enable continuos conversion
	ADC1->CR2 |= CR2_CONT;
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <start_conversion+0x28>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <start_conversion+0x28>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6093      	str	r3, [r2, #8]
	// Start ADC conversion
	ADC1->CR2 |= CR2_SWSTART;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <start_conversion+0x28>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <start_conversion+0x28>)
 8000302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000306:	6093      	str	r3, [r2, #8]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40012000 	.word	0x40012000

08000318 <adc_read>:

uint32_t adc_read(void){
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	// Waiting for convertion completed
	while (!(ADC1->SR & SR_EOC)) {}  // EOC returns 1 if conversion is completed
 800031c:	bf00      	nop
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <adc_read+0x20>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <adc_read+0x6>

	// Read conversion result
	return ADC1->DR;
 800032a:	4b03      	ldr	r3, [pc, #12]	; (8000338 <adc_read+0x20>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40012000 	.word	0x40012000

0800033c <main>:
#define GPIOAEN			(1U<<0)

uint32_t sensor_value;

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 8000340:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <main+0x34>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <main+0x34>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6313      	str	r3, [r2, #48]	; 0x30

	// Init the peripherals
	uart2_rxtx_init();
 800034c:	f000 f8c6 	bl	80004dc <uart2_rxtx_init>
	pa1_adc_init();
 8000350:	f7ff ff96 	bl	8000280 <pa1_adc_init>

	// Start the conversion
	start_conversion();
 8000354:	f7ff ffca 	bl	80002ec <start_conversion>

	while(1)
	{
		sensor_value = adc_read();
 8000358:	f7ff ffde 	bl	8000318 <adc_read>
 800035c:	4603      	mov	r3, r0
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <main+0x38>)
 8000360:	6013      	str	r3, [r2, #0]
		printf("Sensor value: %d \n \r", (int)sensor_value);
 8000362:	4b04      	ldr	r3, [pc, #16]	; (8000374 <main+0x38>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4619      	mov	r1, r3
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <main+0x3c>)
 800036a:	f000 fa3f 	bl	80007ec <iprintf>
		sensor_value = adc_read();
 800036e:	e7f3      	b.n	8000358 <main+0x1c>
 8000370:	40023800 	.word	0x40023800
 8000374:	20000078 	.word	0x20000078
 8000378:	080014ec 	.word	0x080014ec

0800037c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	60f8      	str	r0, [r7, #12]
 8000384:	60b9      	str	r1, [r7, #8]
 8000386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	e00a      	b.n	80003a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800038e:	f3af 8000 	nop.w
 8000392:	4601      	mov	r1, r0
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	b2ca      	uxtb	r2, r1
 800039c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	3301      	adds	r3, #1
 80003a2:	617b      	str	r3, [r7, #20]
 80003a4:	697a      	ldr	r2, [r7, #20]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dbf0      	blt.n	800038e <_read+0x12>
  }

  return len;
 80003ac:	687b      	ldr	r3, [r7, #4]
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e009      	b.n	80003dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	1c5a      	adds	r2, r3, #1
 80003cc:	60ba      	str	r2, [r7, #8]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f877 	bl	80004c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf1      	blt.n	80003c8 <_write+0x12>
  }
  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_close>:

int _close(int file)
{
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000416:	605a      	str	r2, [r3, #4]
  return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <_isatty>:

int _isatty(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr

0800043c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000448:	2300      	movs	r3, #0
}
 800044a:	4618      	mov	r0, r3
 800044c:	3714      	adds	r7, #20
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b086      	sub	sp, #24
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <_sbrk+0x5c>)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <_sbrk+0x60>)
 8000464:	1ad3      	subs	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <_sbrk+0x64>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <_sbrk+0x64>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <_sbrk+0x68>)
 8000478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <_sbrk+0x64>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	429a      	cmp	r2, r3
 8000486:	d207      	bcs.n	8000498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000488:	f000 fa54 	bl	8000934 <__errno>
 800048c:	4603      	mov	r3, r0
 800048e:	220c      	movs	r2, #12
 8000490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000496:	e009      	b.n	80004ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <_sbrk+0x64>)
 80004a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20020000 	.word	0x20020000
 80004b8:	00000400 	.word	0x00000400
 80004bc:	2000007c 	.word	0x2000007c
 80004c0:	200001d0 	.word	0x200001d0

080004c4 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

//It's necessary to declare this function to use with printf
int __io_putchar(int ch){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 f875 	bl	80005bc <uart2_write>
	return ch;
 80004d2:	687b      	ldr	r3, [r7, #4]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <uart2_rxtx_init>:


void uart2_rxtx_init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80004e0:	4b32      	ldr	r3, [pc, #200]	; (80005ac <uart2_rxtx_init+0xd0>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e4:	4a31      	ldr	r2, [pc, #196]	; (80005ac <uart2_rxtx_init+0xd0>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80004ec:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <uart2_rxtx_init+0xd4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <uart2_rxtx_init+0xd4>)
 80004f2:	f023 0310 	bic.w	r3, r3, #16
 80004f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <uart2_rxtx_init+0xd4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a2c      	ldr	r2, [pc, #176]	; (80005b0 <uart2_rxtx_init+0xd4>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a29      	ldr	r2, [pc, #164]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800050a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000510:	4b27      	ldr	r3, [pc, #156]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000512:	6a1b      	ldr	r3, [r3, #32]
 8000514:	4a26      	ldr	r2, [pc, #152]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	4a23      	ldr	r2, [pc, #140]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000528:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	4a20      	ldr	r2, [pc, #128]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800052e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000532:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000534:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1d      	ldr	r2, [pc, #116]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800053a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800053e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000540:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800054a:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a17      	ldr	r2, [pc, #92]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000552:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000556:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800055e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000562:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <uart2_rxtx_init+0xd4>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000572:	6a1b      	ldr	r3, [r3, #32]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <uart2_rxtx_init+0xd4>)
 8000576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800057a:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <uart2_rxtx_init+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <uart2_rxtx_init+0xd0>)
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <uart2_rxtx_init+0xd8>)
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <uart2_rxtx_init+0xdc>)
 8000590:	f000 f82c 	bl	80005ec <uart_set_baudrate>

	/*Configure the transfer direction*/
	// Enable transmitter and receiver
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <uart2_rxtx_init+0xdc>)
 8000596:	220c      	movs	r2, #12
 8000598:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <uart2_rxtx_init+0xdc>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <uart2_rxtx_init+0xdc>)
 80005a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005a4:	60d3      	str	r3, [r2, #12]


}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000
 80005b4:	00f42400 	.word	0x00f42400
 80005b8:	40004400 	.word	0x40004400

080005bc <uart2_write>:
	return USART2->DR;
}


void uart2_write(int ch)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80005c4:	bf00      	nop
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <uart2_write+0x2c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <uart2_write+0x2c>)
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	6053      	str	r3, [r2, #4]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40004400 	.word	0x40004400

080005ec <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f000 f808 	bl	8000610 <compute_uart_bd>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	609a      	str	r2, [r3, #8]
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	085a      	lsrs	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	441a      	add	r2, r3
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	fbb2 f3f3 	udiv	r3, r2, r3
 8000628:	b29b      	uxth	r3, r3
}
 800062a:	4618      	mov	r0, r3
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
	...

08000638 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800063a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800063c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <LoopForever+0x6>)
  ldr r1, =_edata
 8000642:	490d      	ldr	r1, [pc, #52]	; (8000678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <LoopForever+0xe>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000648:	e002      	b.n	8000650 <LoopCopyDataInit>

0800064a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000658:	4c0a      	ldr	r4, [pc, #40]	; (8000684 <LoopForever+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800065c:	e001      	b.n	8000662 <LoopFillZerobss>

0800065e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000660:	3204      	adds	r2, #4

08000662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000664:	d3fb      	bcc.n	800065e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000666:	f000 f96b 	bl	8000940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066a:	f7ff fe67 	bl	800033c <main>

0800066e <LoopForever>:

LoopForever:
  b LoopForever
 800066e:	e7fe      	b.n	800066e <LoopForever>
  ldr   r0, =_estack
 8000670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800067c:	0800153c 	.word	0x0800153c
  ldr r2, =_sbss
 8000680:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000684:	200001cc 	.word	0x200001cc

08000688 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC_IRQHandler>
	...

0800068c <std>:
 800068c:	2300      	movs	r3, #0
 800068e:	b510      	push	{r4, lr}
 8000690:	4604      	mov	r4, r0
 8000692:	e9c0 3300 	strd	r3, r3, [r0]
 8000696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800069a:	6083      	str	r3, [r0, #8]
 800069c:	8181      	strh	r1, [r0, #12]
 800069e:	6643      	str	r3, [r0, #100]	; 0x64
 80006a0:	81c2      	strh	r2, [r0, #14]
 80006a2:	6183      	str	r3, [r0, #24]
 80006a4:	4619      	mov	r1, r3
 80006a6:	2208      	movs	r2, #8
 80006a8:	305c      	adds	r0, #92	; 0x5c
 80006aa:	f000 f8f4 	bl	8000896 <memset>
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <std+0x38>)
 80006b0:	6263      	str	r3, [r4, #36]	; 0x24
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <std+0x3c>)
 80006b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <std+0x40>)
 80006b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <std+0x44>)
 80006bc:	6224      	str	r4, [r4, #32]
 80006be:	6323      	str	r3, [r4, #48]	; 0x30
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	bf00      	nop
 80006c4:	08000811 	.word	0x08000811
 80006c8:	08000833 	.word	0x08000833
 80006cc:	0800086b 	.word	0x0800086b
 80006d0:	0800088f 	.word	0x0800088f

080006d4 <stdio_exit_handler>:
 80006d4:	4a02      	ldr	r2, [pc, #8]	; (80006e0 <stdio_exit_handler+0xc>)
 80006d6:	4903      	ldr	r1, [pc, #12]	; (80006e4 <stdio_exit_handler+0x10>)
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <stdio_exit_handler+0x14>)
 80006da:	f000 b869 	b.w	80007b0 <_fwalk_sglue>
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	08001231 	.word	0x08001231
 80006e8:	2000000c 	.word	0x2000000c

080006ec <cleanup_stdio>:
 80006ec:	6841      	ldr	r1, [r0, #4]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <cleanup_stdio+0x34>)
 80006f0:	4299      	cmp	r1, r3
 80006f2:	b510      	push	{r4, lr}
 80006f4:	4604      	mov	r4, r0
 80006f6:	d001      	beq.n	80006fc <cleanup_stdio+0x10>
 80006f8:	f000 fd9a 	bl	8001230 <_fflush_r>
 80006fc:	68a1      	ldr	r1, [r4, #8]
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <cleanup_stdio+0x38>)
 8000700:	4299      	cmp	r1, r3
 8000702:	d002      	beq.n	800070a <cleanup_stdio+0x1e>
 8000704:	4620      	mov	r0, r4
 8000706:	f000 fd93 	bl	8001230 <_fflush_r>
 800070a:	68e1      	ldr	r1, [r4, #12]
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <cleanup_stdio+0x3c>)
 800070e:	4299      	cmp	r1, r3
 8000710:	d004      	beq.n	800071c <cleanup_stdio+0x30>
 8000712:	4620      	mov	r0, r4
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f000 bd8a 	b.w	8001230 <_fflush_r>
 800071c:	bd10      	pop	{r4, pc}
 800071e:	bf00      	nop
 8000720:	20000080 	.word	0x20000080
 8000724:	200000e8 	.word	0x200000e8
 8000728:	20000150 	.word	0x20000150

0800072c <global_stdio_init.part.0>:
 800072c:	b510      	push	{r4, lr}
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <global_stdio_init.part.0+0x30>)
 8000730:	4c0b      	ldr	r4, [pc, #44]	; (8000760 <global_stdio_init.part.0+0x34>)
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <global_stdio_init.part.0+0x38>)
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	4620      	mov	r0, r4
 8000738:	2200      	movs	r2, #0
 800073a:	2104      	movs	r1, #4
 800073c:	f7ff ffa6 	bl	800068c <std>
 8000740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000744:	2201      	movs	r2, #1
 8000746:	2109      	movs	r1, #9
 8000748:	f7ff ffa0 	bl	800068c <std>
 800074c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000750:	2202      	movs	r2, #2
 8000752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000756:	2112      	movs	r1, #18
 8000758:	f7ff bf98 	b.w	800068c <std>
 800075c:	200001b8 	.word	0x200001b8
 8000760:	20000080 	.word	0x20000080
 8000764:	080006d5 	.word	0x080006d5

08000768 <__sfp_lock_acquire>:
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <__sfp_lock_acquire+0x8>)
 800076a:	f000 b90d 	b.w	8000988 <__retarget_lock_acquire_recursive>
 800076e:	bf00      	nop
 8000770:	200001c1 	.word	0x200001c1

08000774 <__sfp_lock_release>:
 8000774:	4801      	ldr	r0, [pc, #4]	; (800077c <__sfp_lock_release+0x8>)
 8000776:	f000 b908 	b.w	800098a <__retarget_lock_release_recursive>
 800077a:	bf00      	nop
 800077c:	200001c1 	.word	0x200001c1

08000780 <__sinit>:
 8000780:	b510      	push	{r4, lr}
 8000782:	4604      	mov	r4, r0
 8000784:	f7ff fff0 	bl	8000768 <__sfp_lock_acquire>
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	b11b      	cbz	r3, 8000794 <__sinit+0x14>
 800078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000790:	f7ff bff0 	b.w	8000774 <__sfp_lock_release>
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__sinit+0x28>)
 8000796:	6223      	str	r3, [r4, #32]
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <__sinit+0x2c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1f5      	bne.n	800078c <__sinit+0xc>
 80007a0:	f7ff ffc4 	bl	800072c <global_stdio_init.part.0>
 80007a4:	e7f2      	b.n	800078c <__sinit+0xc>
 80007a6:	bf00      	nop
 80007a8:	080006ed 	.word	0x080006ed
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <_fwalk_sglue>:
 80007b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b4:	4607      	mov	r7, r0
 80007b6:	4688      	mov	r8, r1
 80007b8:	4614      	mov	r4, r2
 80007ba:	2600      	movs	r6, #0
 80007bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007c0:	f1b9 0901 	subs.w	r9, r9, #1
 80007c4:	d505      	bpl.n	80007d2 <_fwalk_sglue+0x22>
 80007c6:	6824      	ldr	r4, [r4, #0]
 80007c8:	2c00      	cmp	r4, #0
 80007ca:	d1f7      	bne.n	80007bc <_fwalk_sglue+0xc>
 80007cc:	4630      	mov	r0, r6
 80007ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007d2:	89ab      	ldrh	r3, [r5, #12]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d907      	bls.n	80007e8 <_fwalk_sglue+0x38>
 80007d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	d003      	beq.n	80007e8 <_fwalk_sglue+0x38>
 80007e0:	4629      	mov	r1, r5
 80007e2:	4638      	mov	r0, r7
 80007e4:	47c0      	blx	r8
 80007e6:	4306      	orrs	r6, r0
 80007e8:	3568      	adds	r5, #104	; 0x68
 80007ea:	e7e9      	b.n	80007c0 <_fwalk_sglue+0x10>

080007ec <iprintf>:
 80007ec:	b40f      	push	{r0, r1, r2, r3}
 80007ee:	b507      	push	{r0, r1, r2, lr}
 80007f0:	4906      	ldr	r1, [pc, #24]	; (800080c <iprintf+0x20>)
 80007f2:	ab04      	add	r3, sp, #16
 80007f4:	6808      	ldr	r0, [r1, #0]
 80007f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80007fa:	6881      	ldr	r1, [r0, #8]
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	f000 f9e7 	bl	8000bd0 <_vfiprintf_r>
 8000802:	b003      	add	sp, #12
 8000804:	f85d eb04 	ldr.w	lr, [sp], #4
 8000808:	b004      	add	sp, #16
 800080a:	4770      	bx	lr
 800080c:	20000058 	.word	0x20000058

08000810 <__sread>:
 8000810:	b510      	push	{r4, lr}
 8000812:	460c      	mov	r4, r1
 8000814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000818:	f000 f868 	bl	80008ec <_read_r>
 800081c:	2800      	cmp	r0, #0
 800081e:	bfab      	itete	ge
 8000820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000822:	89a3      	ldrhlt	r3, [r4, #12]
 8000824:	181b      	addge	r3, r3, r0
 8000826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800082a:	bfac      	ite	ge
 800082c:	6563      	strge	r3, [r4, #84]	; 0x54
 800082e:	81a3      	strhlt	r3, [r4, #12]
 8000830:	bd10      	pop	{r4, pc}

08000832 <__swrite>:
 8000832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000836:	461f      	mov	r7, r3
 8000838:	898b      	ldrh	r3, [r1, #12]
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	4605      	mov	r5, r0
 800083e:	460c      	mov	r4, r1
 8000840:	4616      	mov	r6, r2
 8000842:	d505      	bpl.n	8000850 <__swrite+0x1e>
 8000844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000848:	2302      	movs	r3, #2
 800084a:	2200      	movs	r2, #0
 800084c:	f000 f83c 	bl	80008c8 <_lseek_r>
 8000850:	89a3      	ldrh	r3, [r4, #12]
 8000852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800085a:	81a3      	strh	r3, [r4, #12]
 800085c:	4632      	mov	r2, r6
 800085e:	463b      	mov	r3, r7
 8000860:	4628      	mov	r0, r5
 8000862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	f000 b853 	b.w	8000910 <_write_r>

0800086a <__sseek>:
 800086a:	b510      	push	{r4, lr}
 800086c:	460c      	mov	r4, r1
 800086e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000872:	f000 f829 	bl	80008c8 <_lseek_r>
 8000876:	1c43      	adds	r3, r0, #1
 8000878:	89a3      	ldrh	r3, [r4, #12]
 800087a:	bf15      	itete	ne
 800087c:	6560      	strne	r0, [r4, #84]	; 0x54
 800087e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000886:	81a3      	strheq	r3, [r4, #12]
 8000888:	bf18      	it	ne
 800088a:	81a3      	strhne	r3, [r4, #12]
 800088c:	bd10      	pop	{r4, pc}

0800088e <__sclose>:
 800088e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000892:	f000 b809 	b.w	80008a8 <_close_r>

08000896 <memset>:
 8000896:	4402      	add	r2, r0
 8000898:	4603      	mov	r3, r0
 800089a:	4293      	cmp	r3, r2
 800089c:	d100      	bne.n	80008a0 <memset+0xa>
 800089e:	4770      	bx	lr
 80008a0:	f803 1b01 	strb.w	r1, [r3], #1
 80008a4:	e7f9      	b.n	800089a <memset+0x4>
	...

080008a8 <_close_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4d06      	ldr	r5, [pc, #24]	; (80008c4 <_close_r+0x1c>)
 80008ac:	2300      	movs	r3, #0
 80008ae:	4604      	mov	r4, r0
 80008b0:	4608      	mov	r0, r1
 80008b2:	602b      	str	r3, [r5, #0]
 80008b4:	f7ff fd9b 	bl	80003ee <_close>
 80008b8:	1c43      	adds	r3, r0, #1
 80008ba:	d102      	bne.n	80008c2 <_close_r+0x1a>
 80008bc:	682b      	ldr	r3, [r5, #0]
 80008be:	b103      	cbz	r3, 80008c2 <_close_r+0x1a>
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	bd38      	pop	{r3, r4, r5, pc}
 80008c4:	200001bc 	.word	0x200001bc

080008c8 <_lseek_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4d07      	ldr	r5, [pc, #28]	; (80008e8 <_lseek_r+0x20>)
 80008cc:	4604      	mov	r4, r0
 80008ce:	4608      	mov	r0, r1
 80008d0:	4611      	mov	r1, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	602a      	str	r2, [r5, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	f7ff fdb0 	bl	800043c <_lseek>
 80008dc:	1c43      	adds	r3, r0, #1
 80008de:	d102      	bne.n	80008e6 <_lseek_r+0x1e>
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	b103      	cbz	r3, 80008e6 <_lseek_r+0x1e>
 80008e4:	6023      	str	r3, [r4, #0]
 80008e6:	bd38      	pop	{r3, r4, r5, pc}
 80008e8:	200001bc 	.word	0x200001bc

080008ec <_read_r>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4d07      	ldr	r5, [pc, #28]	; (800090c <_read_r+0x20>)
 80008f0:	4604      	mov	r4, r0
 80008f2:	4608      	mov	r0, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	602a      	str	r2, [r5, #0]
 80008fa:	461a      	mov	r2, r3
 80008fc:	f7ff fd3e 	bl	800037c <_read>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d102      	bne.n	800090a <_read_r+0x1e>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	b103      	cbz	r3, 800090a <_read_r+0x1e>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	200001bc 	.word	0x200001bc

08000910 <_write_r>:
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4d07      	ldr	r5, [pc, #28]	; (8000930 <_write_r+0x20>)
 8000914:	4604      	mov	r4, r0
 8000916:	4608      	mov	r0, r1
 8000918:	4611      	mov	r1, r2
 800091a:	2200      	movs	r2, #0
 800091c:	602a      	str	r2, [r5, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	f7ff fd49 	bl	80003b6 <_write>
 8000924:	1c43      	adds	r3, r0, #1
 8000926:	d102      	bne.n	800092e <_write_r+0x1e>
 8000928:	682b      	ldr	r3, [r5, #0]
 800092a:	b103      	cbz	r3, 800092e <_write_r+0x1e>
 800092c:	6023      	str	r3, [r4, #0]
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	200001bc 	.word	0x200001bc

08000934 <__errno>:
 8000934:	4b01      	ldr	r3, [pc, #4]	; (800093c <__errno+0x8>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000058 	.word	0x20000058

08000940 <__libc_init_array>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4d0d      	ldr	r5, [pc, #52]	; (8000978 <__libc_init_array+0x38>)
 8000944:	4c0d      	ldr	r4, [pc, #52]	; (800097c <__libc_init_array+0x3c>)
 8000946:	1b64      	subs	r4, r4, r5
 8000948:	10a4      	asrs	r4, r4, #2
 800094a:	2600      	movs	r6, #0
 800094c:	42a6      	cmp	r6, r4
 800094e:	d109      	bne.n	8000964 <__libc_init_array+0x24>
 8000950:	4d0b      	ldr	r5, [pc, #44]	; (8000980 <__libc_init_array+0x40>)
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__libc_init_array+0x44>)
 8000954:	f000 fdbe 	bl	80014d4 <_init>
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	2600      	movs	r6, #0
 800095e:	42a6      	cmp	r6, r4
 8000960:	d105      	bne.n	800096e <__libc_init_array+0x2e>
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f855 3b04 	ldr.w	r3, [r5], #4
 8000968:	4798      	blx	r3
 800096a:	3601      	adds	r6, #1
 800096c:	e7ee      	b.n	800094c <__libc_init_array+0xc>
 800096e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000972:	4798      	blx	r3
 8000974:	3601      	adds	r6, #1
 8000976:	e7f2      	b.n	800095e <__libc_init_array+0x1e>
 8000978:	08001534 	.word	0x08001534
 800097c:	08001534 	.word	0x08001534
 8000980:	08001534 	.word	0x08001534
 8000984:	08001538 	.word	0x08001538

08000988 <__retarget_lock_acquire_recursive>:
 8000988:	4770      	bx	lr

0800098a <__retarget_lock_release_recursive>:
 800098a:	4770      	bx	lr

0800098c <_free_r>:
 800098c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800098e:	2900      	cmp	r1, #0
 8000990:	d044      	beq.n	8000a1c <_free_r+0x90>
 8000992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000996:	9001      	str	r0, [sp, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	f1a1 0404 	sub.w	r4, r1, #4
 800099e:	bfb8      	it	lt
 80009a0:	18e4      	addlt	r4, r4, r3
 80009a2:	f000 f8df 	bl	8000b64 <__malloc_lock>
 80009a6:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <_free_r+0x94>)
 80009a8:	9801      	ldr	r0, [sp, #4]
 80009aa:	6813      	ldr	r3, [r2, #0]
 80009ac:	b933      	cbnz	r3, 80009bc <_free_r+0x30>
 80009ae:	6063      	str	r3, [r4, #4]
 80009b0:	6014      	str	r4, [r2, #0]
 80009b2:	b003      	add	sp, #12
 80009b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80009b8:	f000 b8da 	b.w	8000b70 <__malloc_unlock>
 80009bc:	42a3      	cmp	r3, r4
 80009be:	d908      	bls.n	80009d2 <_free_r+0x46>
 80009c0:	6825      	ldr	r5, [r4, #0]
 80009c2:	1961      	adds	r1, r4, r5
 80009c4:	428b      	cmp	r3, r1
 80009c6:	bf01      	itttt	eq
 80009c8:	6819      	ldreq	r1, [r3, #0]
 80009ca:	685b      	ldreq	r3, [r3, #4]
 80009cc:	1949      	addeq	r1, r1, r5
 80009ce:	6021      	streq	r1, [r4, #0]
 80009d0:	e7ed      	b.n	80009ae <_free_r+0x22>
 80009d2:	461a      	mov	r2, r3
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	b10b      	cbz	r3, 80009dc <_free_r+0x50>
 80009d8:	42a3      	cmp	r3, r4
 80009da:	d9fa      	bls.n	80009d2 <_free_r+0x46>
 80009dc:	6811      	ldr	r1, [r2, #0]
 80009de:	1855      	adds	r5, r2, r1
 80009e0:	42a5      	cmp	r5, r4
 80009e2:	d10b      	bne.n	80009fc <_free_r+0x70>
 80009e4:	6824      	ldr	r4, [r4, #0]
 80009e6:	4421      	add	r1, r4
 80009e8:	1854      	adds	r4, r2, r1
 80009ea:	42a3      	cmp	r3, r4
 80009ec:	6011      	str	r1, [r2, #0]
 80009ee:	d1e0      	bne.n	80009b2 <_free_r+0x26>
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	6053      	str	r3, [r2, #4]
 80009f6:	440c      	add	r4, r1
 80009f8:	6014      	str	r4, [r2, #0]
 80009fa:	e7da      	b.n	80009b2 <_free_r+0x26>
 80009fc:	d902      	bls.n	8000a04 <_free_r+0x78>
 80009fe:	230c      	movs	r3, #12
 8000a00:	6003      	str	r3, [r0, #0]
 8000a02:	e7d6      	b.n	80009b2 <_free_r+0x26>
 8000a04:	6825      	ldr	r5, [r4, #0]
 8000a06:	1961      	adds	r1, r4, r5
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf04      	itt	eq
 8000a0c:	6819      	ldreq	r1, [r3, #0]
 8000a0e:	685b      	ldreq	r3, [r3, #4]
 8000a10:	6063      	str	r3, [r4, #4]
 8000a12:	bf04      	itt	eq
 8000a14:	1949      	addeq	r1, r1, r5
 8000a16:	6021      	streq	r1, [r4, #0]
 8000a18:	6054      	str	r4, [r2, #4]
 8000a1a:	e7ca      	b.n	80009b2 <_free_r+0x26>
 8000a1c:	b003      	add	sp, #12
 8000a1e:	bd30      	pop	{r4, r5, pc}
 8000a20:	200001c4 	.word	0x200001c4

08000a24 <sbrk_aligned>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4e0e      	ldr	r6, [pc, #56]	; (8000a60 <sbrk_aligned+0x3c>)
 8000a28:	460c      	mov	r4, r1
 8000a2a:	6831      	ldr	r1, [r6, #0]
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	b911      	cbnz	r1, 8000a36 <sbrk_aligned+0x12>
 8000a30:	f000 fcbc 	bl	80013ac <_sbrk_r>
 8000a34:	6030      	str	r0, [r6, #0]
 8000a36:	4621      	mov	r1, r4
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f000 fcb7 	bl	80013ac <_sbrk_r>
 8000a3e:	1c43      	adds	r3, r0, #1
 8000a40:	d00a      	beq.n	8000a58 <sbrk_aligned+0x34>
 8000a42:	1cc4      	adds	r4, r0, #3
 8000a44:	f024 0403 	bic.w	r4, r4, #3
 8000a48:	42a0      	cmp	r0, r4
 8000a4a:	d007      	beq.n	8000a5c <sbrk_aligned+0x38>
 8000a4c:	1a21      	subs	r1, r4, r0
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f000 fcac 	bl	80013ac <_sbrk_r>
 8000a54:	3001      	adds	r0, #1
 8000a56:	d101      	bne.n	8000a5c <sbrk_aligned+0x38>
 8000a58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	200001c8 	.word	0x200001c8

08000a64 <_malloc_r>:
 8000a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a68:	1ccd      	adds	r5, r1, #3
 8000a6a:	f025 0503 	bic.w	r5, r5, #3
 8000a6e:	3508      	adds	r5, #8
 8000a70:	2d0c      	cmp	r5, #12
 8000a72:	bf38      	it	cc
 8000a74:	250c      	movcc	r5, #12
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	4607      	mov	r7, r0
 8000a7a:	db01      	blt.n	8000a80 <_malloc_r+0x1c>
 8000a7c:	42a9      	cmp	r1, r5
 8000a7e:	d905      	bls.n	8000a8c <_malloc_r+0x28>
 8000a80:	230c      	movs	r3, #12
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	2600      	movs	r6, #0
 8000a86:	4630      	mov	r0, r6
 8000a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b60 <_malloc_r+0xfc>
 8000a90:	f000 f868 	bl	8000b64 <__malloc_lock>
 8000a94:	f8d8 3000 	ldr.w	r3, [r8]
 8000a98:	461c      	mov	r4, r3
 8000a9a:	bb5c      	cbnz	r4, 8000af4 <_malloc_r+0x90>
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	f7ff ffc0 	bl	8000a24 <sbrk_aligned>
 8000aa4:	1c43      	adds	r3, r0, #1
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	d155      	bne.n	8000b56 <_malloc_r+0xf2>
 8000aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8000aae:	4626      	mov	r6, r4
 8000ab0:	2e00      	cmp	r6, #0
 8000ab2:	d145      	bne.n	8000b40 <_malloc_r+0xdc>
 8000ab4:	2c00      	cmp	r4, #0
 8000ab6:	d048      	beq.n	8000b4a <_malloc_r+0xe6>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	4631      	mov	r1, r6
 8000abc:	4638      	mov	r0, r7
 8000abe:	eb04 0903 	add.w	r9, r4, r3
 8000ac2:	f000 fc73 	bl	80013ac <_sbrk_r>
 8000ac6:	4581      	cmp	r9, r0
 8000ac8:	d13f      	bne.n	8000b4a <_malloc_r+0xe6>
 8000aca:	6821      	ldr	r1, [r4, #0]
 8000acc:	1a6d      	subs	r5, r5, r1
 8000ace:	4629      	mov	r1, r5
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	f7ff ffa7 	bl	8000a24 <sbrk_aligned>
 8000ad6:	3001      	adds	r0, #1
 8000ad8:	d037      	beq.n	8000b4a <_malloc_r+0xe6>
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	442b      	add	r3, r5
 8000ade:	6023      	str	r3, [r4, #0]
 8000ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d038      	beq.n	8000b5a <_malloc_r+0xf6>
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	42a2      	cmp	r2, r4
 8000aec:	d12b      	bne.n	8000b46 <_malloc_r+0xe2>
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	e00f      	b.n	8000b14 <_malloc_r+0xb0>
 8000af4:	6822      	ldr	r2, [r4, #0]
 8000af6:	1b52      	subs	r2, r2, r5
 8000af8:	d41f      	bmi.n	8000b3a <_malloc_r+0xd6>
 8000afa:	2a0b      	cmp	r2, #11
 8000afc:	d917      	bls.n	8000b2e <_malloc_r+0xca>
 8000afe:	1961      	adds	r1, r4, r5
 8000b00:	42a3      	cmp	r3, r4
 8000b02:	6025      	str	r5, [r4, #0]
 8000b04:	bf18      	it	ne
 8000b06:	6059      	strne	r1, [r3, #4]
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	bf08      	it	eq
 8000b0c:	f8c8 1000 	streq.w	r1, [r8]
 8000b10:	5162      	str	r2, [r4, r5]
 8000b12:	604b      	str	r3, [r1, #4]
 8000b14:	4638      	mov	r0, r7
 8000b16:	f104 060b 	add.w	r6, r4, #11
 8000b1a:	f000 f829 	bl	8000b70 <__malloc_unlock>
 8000b1e:	f026 0607 	bic.w	r6, r6, #7
 8000b22:	1d23      	adds	r3, r4, #4
 8000b24:	1af2      	subs	r2, r6, r3
 8000b26:	d0ae      	beq.n	8000a86 <_malloc_r+0x22>
 8000b28:	1b9b      	subs	r3, r3, r6
 8000b2a:	50a3      	str	r3, [r4, r2]
 8000b2c:	e7ab      	b.n	8000a86 <_malloc_r+0x22>
 8000b2e:	42a3      	cmp	r3, r4
 8000b30:	6862      	ldr	r2, [r4, #4]
 8000b32:	d1dd      	bne.n	8000af0 <_malloc_r+0x8c>
 8000b34:	f8c8 2000 	str.w	r2, [r8]
 8000b38:	e7ec      	b.n	8000b14 <_malloc_r+0xb0>
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	6864      	ldr	r4, [r4, #4]
 8000b3e:	e7ac      	b.n	8000a9a <_malloc_r+0x36>
 8000b40:	4634      	mov	r4, r6
 8000b42:	6876      	ldr	r6, [r6, #4]
 8000b44:	e7b4      	b.n	8000ab0 <_malloc_r+0x4c>
 8000b46:	4613      	mov	r3, r2
 8000b48:	e7cc      	b.n	8000ae4 <_malloc_r+0x80>
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4638      	mov	r0, r7
 8000b50:	f000 f80e 	bl	8000b70 <__malloc_unlock>
 8000b54:	e797      	b.n	8000a86 <_malloc_r+0x22>
 8000b56:	6025      	str	r5, [r4, #0]
 8000b58:	e7dc      	b.n	8000b14 <_malloc_r+0xb0>
 8000b5a:	605b      	str	r3, [r3, #4]
 8000b5c:	deff      	udf	#255	; 0xff
 8000b5e:	bf00      	nop
 8000b60:	200001c4 	.word	0x200001c4

08000b64 <__malloc_lock>:
 8000b64:	4801      	ldr	r0, [pc, #4]	; (8000b6c <__malloc_lock+0x8>)
 8000b66:	f7ff bf0f 	b.w	8000988 <__retarget_lock_acquire_recursive>
 8000b6a:	bf00      	nop
 8000b6c:	200001c0 	.word	0x200001c0

08000b70 <__malloc_unlock>:
 8000b70:	4801      	ldr	r0, [pc, #4]	; (8000b78 <__malloc_unlock+0x8>)
 8000b72:	f7ff bf0a 	b.w	800098a <__retarget_lock_release_recursive>
 8000b76:	bf00      	nop
 8000b78:	200001c0 	.word	0x200001c0

08000b7c <__sfputc_r>:
 8000b7c:	6893      	ldr	r3, [r2, #8]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	b410      	push	{r4}
 8000b84:	6093      	str	r3, [r2, #8]
 8000b86:	da08      	bge.n	8000b9a <__sfputc_r+0x1e>
 8000b88:	6994      	ldr	r4, [r2, #24]
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	db01      	blt.n	8000b92 <__sfputc_r+0x16>
 8000b8e:	290a      	cmp	r1, #10
 8000b90:	d103      	bne.n	8000b9a <__sfputc_r+0x1e>
 8000b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b96:	f000 bb73 	b.w	8001280 <__swbuf_r>
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	1c58      	adds	r0, r3, #1
 8000b9e:	6010      	str	r0, [r2, #0]
 8000ba0:	7019      	strb	r1, [r3, #0]
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <__sfputs_r>:
 8000baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bac:	4606      	mov	r6, r0
 8000bae:	460f      	mov	r7, r1
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	18d5      	adds	r5, r2, r3
 8000bb4:	42ac      	cmp	r4, r5
 8000bb6:	d101      	bne.n	8000bbc <__sfputs_r+0x12>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e007      	b.n	8000bcc <__sfputs_r+0x22>
 8000bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc0:	463a      	mov	r2, r7
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f7ff ffda 	bl	8000b7c <__sfputc_r>
 8000bc8:	1c43      	adds	r3, r0, #1
 8000bca:	d1f3      	bne.n	8000bb4 <__sfputs_r+0xa>
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bd0 <_vfiprintf_r>:
 8000bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd4:	460d      	mov	r5, r1
 8000bd6:	b09d      	sub	sp, #116	; 0x74
 8000bd8:	4614      	mov	r4, r2
 8000bda:	4698      	mov	r8, r3
 8000bdc:	4606      	mov	r6, r0
 8000bde:	b118      	cbz	r0, 8000be8 <_vfiprintf_r+0x18>
 8000be0:	6a03      	ldr	r3, [r0, #32]
 8000be2:	b90b      	cbnz	r3, 8000be8 <_vfiprintf_r+0x18>
 8000be4:	f7ff fdcc 	bl	8000780 <__sinit>
 8000be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bea:	07d9      	lsls	r1, r3, #31
 8000bec:	d405      	bmi.n	8000bfa <_vfiprintf_r+0x2a>
 8000bee:	89ab      	ldrh	r3, [r5, #12]
 8000bf0:	059a      	lsls	r2, r3, #22
 8000bf2:	d402      	bmi.n	8000bfa <_vfiprintf_r+0x2a>
 8000bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bf6:	f7ff fec7 	bl	8000988 <__retarget_lock_acquire_recursive>
 8000bfa:	89ab      	ldrh	r3, [r5, #12]
 8000bfc:	071b      	lsls	r3, r3, #28
 8000bfe:	d501      	bpl.n	8000c04 <_vfiprintf_r+0x34>
 8000c00:	692b      	ldr	r3, [r5, #16]
 8000c02:	b99b      	cbnz	r3, 8000c2c <_vfiprintf_r+0x5c>
 8000c04:	4629      	mov	r1, r5
 8000c06:	4630      	mov	r0, r6
 8000c08:	f000 fb78 	bl	80012fc <__swsetup_r>
 8000c0c:	b170      	cbz	r0, 8000c2c <_vfiprintf_r+0x5c>
 8000c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c10:	07dc      	lsls	r4, r3, #31
 8000c12:	d504      	bpl.n	8000c1e <_vfiprintf_r+0x4e>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c18:	b01d      	add	sp, #116	; 0x74
 8000c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c1e:	89ab      	ldrh	r3, [r5, #12]
 8000c20:	0598      	lsls	r0, r3, #22
 8000c22:	d4f7      	bmi.n	8000c14 <_vfiprintf_r+0x44>
 8000c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c26:	f7ff feb0 	bl	800098a <__retarget_lock_release_recursive>
 8000c2a:	e7f3      	b.n	8000c14 <_vfiprintf_r+0x44>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c30:	2320      	movs	r3, #32
 8000c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c3a:	2330      	movs	r3, #48	; 0x30
 8000c3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000df0 <_vfiprintf_r+0x220>
 8000c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c44:	f04f 0901 	mov.w	r9, #1
 8000c48:	4623      	mov	r3, r4
 8000c4a:	469a      	mov	sl, r3
 8000c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c50:	b10a      	cbz	r2, 8000c56 <_vfiprintf_r+0x86>
 8000c52:	2a25      	cmp	r2, #37	; 0x25
 8000c54:	d1f9      	bne.n	8000c4a <_vfiprintf_r+0x7a>
 8000c56:	ebba 0b04 	subs.w	fp, sl, r4
 8000c5a:	d00b      	beq.n	8000c74 <_vfiprintf_r+0xa4>
 8000c5c:	465b      	mov	r3, fp
 8000c5e:	4622      	mov	r2, r4
 8000c60:	4629      	mov	r1, r5
 8000c62:	4630      	mov	r0, r6
 8000c64:	f7ff ffa1 	bl	8000baa <__sfputs_r>
 8000c68:	3001      	adds	r0, #1
 8000c6a:	f000 80a9 	beq.w	8000dc0 <_vfiprintf_r+0x1f0>
 8000c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c70:	445a      	add	r2, fp
 8000c72:	9209      	str	r2, [sp, #36]	; 0x24
 8000c74:	f89a 3000 	ldrb.w	r3, [sl]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 80a1 	beq.w	8000dc0 <_vfiprintf_r+0x1f0>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c88:	f10a 0a01 	add.w	sl, sl, #1
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	9307      	str	r3, [sp, #28]
 8000c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c94:	931a      	str	r3, [sp, #104]	; 0x68
 8000c96:	4654      	mov	r4, sl
 8000c98:	2205      	movs	r2, #5
 8000c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c9e:	4854      	ldr	r0, [pc, #336]	; (8000df0 <_vfiprintf_r+0x220>)
 8000ca0:	f7ff fa9e 	bl	80001e0 <memchr>
 8000ca4:	9a04      	ldr	r2, [sp, #16]
 8000ca6:	b9d8      	cbnz	r0, 8000ce0 <_vfiprintf_r+0x110>
 8000ca8:	06d1      	lsls	r1, r2, #27
 8000caa:	bf44      	itt	mi
 8000cac:	2320      	movmi	r3, #32
 8000cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cb2:	0713      	lsls	r3, r2, #28
 8000cb4:	bf44      	itt	mi
 8000cb6:	232b      	movmi	r3, #43	; 0x2b
 8000cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8000cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc2:	d015      	beq.n	8000cf0 <_vfiprintf_r+0x120>
 8000cc4:	9a07      	ldr	r2, [sp, #28]
 8000cc6:	4654      	mov	r4, sl
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f04f 0c0a 	mov.w	ip, #10
 8000cce:	4621      	mov	r1, r4
 8000cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	2b09      	cmp	r3, #9
 8000cd8:	d94d      	bls.n	8000d76 <_vfiprintf_r+0x1a6>
 8000cda:	b1b0      	cbz	r0, 8000d0a <_vfiprintf_r+0x13a>
 8000cdc:	9207      	str	r2, [sp, #28]
 8000cde:	e014      	b.n	8000d0a <_vfiprintf_r+0x13a>
 8000ce0:	eba0 0308 	sub.w	r3, r0, r8
 8000ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	46a2      	mov	sl, r4
 8000cee:	e7d2      	b.n	8000c96 <_vfiprintf_r+0xc6>
 8000cf0:	9b03      	ldr	r3, [sp, #12]
 8000cf2:	1d19      	adds	r1, r3, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	9103      	str	r1, [sp, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfbb      	ittet	lt
 8000cfc:	425b      	neglt	r3, r3
 8000cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8000d02:	9307      	strge	r3, [sp, #28]
 8000d04:	9307      	strlt	r3, [sp, #28]
 8000d06:	bfb8      	it	lt
 8000d08:	9204      	strlt	r2, [sp, #16]
 8000d0a:	7823      	ldrb	r3, [r4, #0]
 8000d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d0e:	d10c      	bne.n	8000d2a <_vfiprintf_r+0x15a>
 8000d10:	7863      	ldrb	r3, [r4, #1]
 8000d12:	2b2a      	cmp	r3, #42	; 0x2a
 8000d14:	d134      	bne.n	8000d80 <_vfiprintf_r+0x1b0>
 8000d16:	9b03      	ldr	r3, [sp, #12]
 8000d18:	1d1a      	adds	r2, r3, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	9203      	str	r2, [sp, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bfb8      	it	lt
 8000d22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d26:	3402      	adds	r4, #2
 8000d28:	9305      	str	r3, [sp, #20]
 8000d2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e00 <_vfiprintf_r+0x230>
 8000d2e:	7821      	ldrb	r1, [r4, #0]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4650      	mov	r0, sl
 8000d34:	f7ff fa54 	bl	80001e0 <memchr>
 8000d38:	b138      	cbz	r0, 8000d4a <_vfiprintf_r+0x17a>
 8000d3a:	9b04      	ldr	r3, [sp, #16]
 8000d3c:	eba0 000a 	sub.w	r0, r0, sl
 8000d40:	2240      	movs	r2, #64	; 0x40
 8000d42:	4082      	lsls	r2, r0
 8000d44:	4313      	orrs	r3, r2
 8000d46:	3401      	adds	r4, #1
 8000d48:	9304      	str	r3, [sp, #16]
 8000d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d4e:	4829      	ldr	r0, [pc, #164]	; (8000df4 <_vfiprintf_r+0x224>)
 8000d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d54:	2206      	movs	r2, #6
 8000d56:	f7ff fa43 	bl	80001e0 <memchr>
 8000d5a:	2800      	cmp	r0, #0
 8000d5c:	d03f      	beq.n	8000dde <_vfiprintf_r+0x20e>
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <_vfiprintf_r+0x228>)
 8000d60:	bb1b      	cbnz	r3, 8000daa <_vfiprintf_r+0x1da>
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	3307      	adds	r3, #7
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	3308      	adds	r3, #8
 8000d6c:	9303      	str	r3, [sp, #12]
 8000d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d70:	443b      	add	r3, r7
 8000d72:	9309      	str	r3, [sp, #36]	; 0x24
 8000d74:	e768      	b.n	8000c48 <_vfiprintf_r+0x78>
 8000d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	e7a6      	b.n	8000cce <_vfiprintf_r+0xfe>
 8000d80:	2300      	movs	r3, #0
 8000d82:	3401      	adds	r4, #1
 8000d84:	9305      	str	r3, [sp, #20]
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 0c0a 	mov.w	ip, #10
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d92:	3a30      	subs	r2, #48	; 0x30
 8000d94:	2a09      	cmp	r2, #9
 8000d96:	d903      	bls.n	8000da0 <_vfiprintf_r+0x1d0>
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0c6      	beq.n	8000d2a <_vfiprintf_r+0x15a>
 8000d9c:	9105      	str	r1, [sp, #20]
 8000d9e:	e7c4      	b.n	8000d2a <_vfiprintf_r+0x15a>
 8000da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000da4:	4604      	mov	r4, r0
 8000da6:	2301      	movs	r3, #1
 8000da8:	e7f0      	b.n	8000d8c <_vfiprintf_r+0x1bc>
 8000daa:	ab03      	add	r3, sp, #12
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462a      	mov	r2, r5
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <_vfiprintf_r+0x22c>)
 8000db2:	a904      	add	r1, sp, #16
 8000db4:	4630      	mov	r0, r6
 8000db6:	f3af 8000 	nop.w
 8000dba:	4607      	mov	r7, r0
 8000dbc:	1c78      	adds	r0, r7, #1
 8000dbe:	d1d6      	bne.n	8000d6e <_vfiprintf_r+0x19e>
 8000dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000dc2:	07d9      	lsls	r1, r3, #31
 8000dc4:	d405      	bmi.n	8000dd2 <_vfiprintf_r+0x202>
 8000dc6:	89ab      	ldrh	r3, [r5, #12]
 8000dc8:	059a      	lsls	r2, r3, #22
 8000dca:	d402      	bmi.n	8000dd2 <_vfiprintf_r+0x202>
 8000dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dce:	f7ff fddc 	bl	800098a <__retarget_lock_release_recursive>
 8000dd2:	89ab      	ldrh	r3, [r5, #12]
 8000dd4:	065b      	lsls	r3, r3, #25
 8000dd6:	f53f af1d 	bmi.w	8000c14 <_vfiprintf_r+0x44>
 8000dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ddc:	e71c      	b.n	8000c18 <_vfiprintf_r+0x48>
 8000dde:	ab03      	add	r3, sp, #12
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	462a      	mov	r2, r5
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <_vfiprintf_r+0x22c>)
 8000de6:	a904      	add	r1, sp, #16
 8000de8:	4630      	mov	r0, r6
 8000dea:	f000 f879 	bl	8000ee0 <_printf_i>
 8000dee:	e7e4      	b.n	8000dba <_vfiprintf_r+0x1ea>
 8000df0:	08001501 	.word	0x08001501
 8000df4:	0800150b 	.word	0x0800150b
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	08000bab 	.word	0x08000bab
 8000e00:	08001507 	.word	0x08001507

08000e04 <_printf_common>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	4616      	mov	r6, r2
 8000e0a:	4699      	mov	r9, r3
 8000e0c:	688a      	ldr	r2, [r1, #8]
 8000e0e:	690b      	ldr	r3, [r1, #16]
 8000e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	bfb8      	it	lt
 8000e18:	4613      	movlt	r3, r2
 8000e1a:	6033      	str	r3, [r6, #0]
 8000e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e20:	4607      	mov	r7, r0
 8000e22:	460c      	mov	r4, r1
 8000e24:	b10a      	cbz	r2, 8000e2a <_printf_common+0x26>
 8000e26:	3301      	adds	r3, #1
 8000e28:	6033      	str	r3, [r6, #0]
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	0699      	lsls	r1, r3, #26
 8000e2e:	bf42      	ittt	mi
 8000e30:	6833      	ldrmi	r3, [r6, #0]
 8000e32:	3302      	addmi	r3, #2
 8000e34:	6033      	strmi	r3, [r6, #0]
 8000e36:	6825      	ldr	r5, [r4, #0]
 8000e38:	f015 0506 	ands.w	r5, r5, #6
 8000e3c:	d106      	bne.n	8000e4c <_printf_common+0x48>
 8000e3e:	f104 0a19 	add.w	sl, r4, #25
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	6832      	ldr	r2, [r6, #0]
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	dc26      	bgt.n	8000e9a <_printf_common+0x96>
 8000e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e50:	1e13      	subs	r3, r2, #0
 8000e52:	6822      	ldr	r2, [r4, #0]
 8000e54:	bf18      	it	ne
 8000e56:	2301      	movne	r3, #1
 8000e58:	0692      	lsls	r2, r2, #26
 8000e5a:	d42b      	bmi.n	8000eb4 <_printf_common+0xb0>
 8000e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e60:	4649      	mov	r1, r9
 8000e62:	4638      	mov	r0, r7
 8000e64:	47c0      	blx	r8
 8000e66:	3001      	adds	r0, #1
 8000e68:	d01e      	beq.n	8000ea8 <_printf_common+0xa4>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	6922      	ldr	r2, [r4, #16]
 8000e6e:	f003 0306 	and.w	r3, r3, #6
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf02      	ittt	eq
 8000e76:	68e5      	ldreq	r5, [r4, #12]
 8000e78:	6833      	ldreq	r3, [r6, #0]
 8000e7a:	1aed      	subeq	r5, r5, r3
 8000e7c:	68a3      	ldr	r3, [r4, #8]
 8000e7e:	bf0c      	ite	eq
 8000e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e84:	2500      	movne	r5, #0
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bfc4      	itt	gt
 8000e8a:	1a9b      	subgt	r3, r3, r2
 8000e8c:	18ed      	addgt	r5, r5, r3
 8000e8e:	2600      	movs	r6, #0
 8000e90:	341a      	adds	r4, #26
 8000e92:	42b5      	cmp	r5, r6
 8000e94:	d11a      	bne.n	8000ecc <_printf_common+0xc8>
 8000e96:	2000      	movs	r0, #0
 8000e98:	e008      	b.n	8000eac <_printf_common+0xa8>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	47c0      	blx	r8
 8000ea4:	3001      	adds	r0, #1
 8000ea6:	d103      	bne.n	8000eb0 <_printf_common+0xac>
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	3501      	adds	r5, #1
 8000eb2:	e7c6      	b.n	8000e42 <_printf_common+0x3e>
 8000eb4:	18e1      	adds	r1, r4, r3
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	2030      	movs	r0, #48	; 0x30
 8000eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ebe:	4422      	add	r2, r4
 8000ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ec8:	3302      	adds	r3, #2
 8000eca:	e7c7      	b.n	8000e5c <_printf_common+0x58>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4622      	mov	r2, r4
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	47c0      	blx	r8
 8000ed6:	3001      	adds	r0, #1
 8000ed8:	d0e6      	beq.n	8000ea8 <_printf_common+0xa4>
 8000eda:	3601      	adds	r6, #1
 8000edc:	e7d9      	b.n	8000e92 <_printf_common+0x8e>
	...

08000ee0 <_printf_i>:
 8000ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	7e0f      	ldrb	r7, [r1, #24]
 8000ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ee8:	2f78      	cmp	r7, #120	; 0x78
 8000eea:	4691      	mov	r9, r2
 8000eec:	4680      	mov	r8, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ef6:	d807      	bhi.n	8000f08 <_printf_i+0x28>
 8000ef8:	2f62      	cmp	r7, #98	; 0x62
 8000efa:	d80a      	bhi.n	8000f12 <_printf_i+0x32>
 8000efc:	2f00      	cmp	r7, #0
 8000efe:	f000 80d4 	beq.w	80010aa <_printf_i+0x1ca>
 8000f02:	2f58      	cmp	r7, #88	; 0x58
 8000f04:	f000 80c0 	beq.w	8001088 <_printf_i+0x1a8>
 8000f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f10:	e03a      	b.n	8000f88 <_printf_i+0xa8>
 8000f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f16:	2b15      	cmp	r3, #21
 8000f18:	d8f6      	bhi.n	8000f08 <_printf_i+0x28>
 8000f1a:	a101      	add	r1, pc, #4	; (adr r1, 8000f20 <_printf_i+0x40>)
 8000f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f20:	08000f79 	.word	0x08000f79
 8000f24:	08000f8d 	.word	0x08000f8d
 8000f28:	08000f09 	.word	0x08000f09
 8000f2c:	08000f09 	.word	0x08000f09
 8000f30:	08000f09 	.word	0x08000f09
 8000f34:	08000f09 	.word	0x08000f09
 8000f38:	08000f8d 	.word	0x08000f8d
 8000f3c:	08000f09 	.word	0x08000f09
 8000f40:	08000f09 	.word	0x08000f09
 8000f44:	08000f09 	.word	0x08000f09
 8000f48:	08000f09 	.word	0x08000f09
 8000f4c:	08001091 	.word	0x08001091
 8000f50:	08000fb9 	.word	0x08000fb9
 8000f54:	0800104b 	.word	0x0800104b
 8000f58:	08000f09 	.word	0x08000f09
 8000f5c:	08000f09 	.word	0x08000f09
 8000f60:	080010b3 	.word	0x080010b3
 8000f64:	08000f09 	.word	0x08000f09
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000f09 	.word	0x08000f09
 8000f70:	08000f09 	.word	0x08000f09
 8000f74:	08001053 	.word	0x08001053
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	602a      	str	r2, [r5, #0]
 8000f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e09f      	b.n	80010cc <_printf_i+0x1ec>
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	0607      	lsls	r7, r0, #24
 8000f92:	f103 0104 	add.w	r1, r3, #4
 8000f96:	6029      	str	r1, [r5, #0]
 8000f98:	d501      	bpl.n	8000f9e <_printf_i+0xbe>
 8000f9a:	681e      	ldr	r6, [r3, #0]
 8000f9c:	e003      	b.n	8000fa6 <_printf_i+0xc6>
 8000f9e:	0646      	lsls	r6, r0, #25
 8000fa0:	d5fb      	bpl.n	8000f9a <_printf_i+0xba>
 8000fa2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	da03      	bge.n	8000fb2 <_printf_i+0xd2>
 8000faa:	232d      	movs	r3, #45	; 0x2d
 8000fac:	4276      	negs	r6, r6
 8000fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fb2:	485a      	ldr	r0, [pc, #360]	; (800111c <_printf_i+0x23c>)
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	e012      	b.n	8000fde <_printf_i+0xfe>
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	1d19      	adds	r1, r3, #4
 8000fbe:	6029      	str	r1, [r5, #0]
 8000fc0:	0605      	lsls	r5, r0, #24
 8000fc2:	d501      	bpl.n	8000fc8 <_printf_i+0xe8>
 8000fc4:	681e      	ldr	r6, [r3, #0]
 8000fc6:	e002      	b.n	8000fce <_printf_i+0xee>
 8000fc8:	0641      	lsls	r1, r0, #25
 8000fca:	d5fb      	bpl.n	8000fc4 <_printf_i+0xe4>
 8000fcc:	881e      	ldrh	r6, [r3, #0]
 8000fce:	4853      	ldr	r0, [pc, #332]	; (800111c <_printf_i+0x23c>)
 8000fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2308      	moveq	r3, #8
 8000fd6:	230a      	movne	r3, #10
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fde:	6865      	ldr	r5, [r4, #4]
 8000fe0:	60a5      	str	r5, [r4, #8]
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	bfa2      	ittt	ge
 8000fe6:	6821      	ldrge	r1, [r4, #0]
 8000fe8:	f021 0104 	bicge.w	r1, r1, #4
 8000fec:	6021      	strge	r1, [r4, #0]
 8000fee:	b90e      	cbnz	r6, 8000ff4 <_printf_i+0x114>
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	d04b      	beq.n	800108c <_printf_i+0x1ac>
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8000ffe:	5dc7      	ldrb	r7, [r0, r7]
 8001000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001004:	4637      	mov	r7, r6
 8001006:	42bb      	cmp	r3, r7
 8001008:	460e      	mov	r6, r1
 800100a:	d9f4      	bls.n	8000ff6 <_printf_i+0x116>
 800100c:	2b08      	cmp	r3, #8
 800100e:	d10b      	bne.n	8001028 <_printf_i+0x148>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	07de      	lsls	r6, r3, #31
 8001014:	d508      	bpl.n	8001028 <_printf_i+0x148>
 8001016:	6923      	ldr	r3, [r4, #16]
 8001018:	6861      	ldr	r1, [r4, #4]
 800101a:	4299      	cmp	r1, r3
 800101c:	bfde      	ittt	le
 800101e:	2330      	movle	r3, #48	; 0x30
 8001020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001024:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001028:	1b52      	subs	r2, r2, r5
 800102a:	6122      	str	r2, [r4, #16]
 800102c:	f8cd a000 	str.w	sl, [sp]
 8001030:	464b      	mov	r3, r9
 8001032:	aa03      	add	r2, sp, #12
 8001034:	4621      	mov	r1, r4
 8001036:	4640      	mov	r0, r8
 8001038:	f7ff fee4 	bl	8000e04 <_printf_common>
 800103c:	3001      	adds	r0, #1
 800103e:	d14a      	bne.n	80010d6 <_printf_i+0x1f6>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	b004      	add	sp, #16
 8001046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104a:	6823      	ldr	r3, [r4, #0]
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6023      	str	r3, [r4, #0]
 8001052:	4833      	ldr	r0, [pc, #204]	; (8001120 <_printf_i+0x240>)
 8001054:	2778      	movs	r7, #120	; 0x78
 8001056:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800105a:	6823      	ldr	r3, [r4, #0]
 800105c:	6829      	ldr	r1, [r5, #0]
 800105e:	061f      	lsls	r7, r3, #24
 8001060:	f851 6b04 	ldr.w	r6, [r1], #4
 8001064:	d402      	bmi.n	800106c <_printf_i+0x18c>
 8001066:	065f      	lsls	r7, r3, #25
 8001068:	bf48      	it	mi
 800106a:	b2b6      	uxthmi	r6, r6
 800106c:	07df      	lsls	r7, r3, #31
 800106e:	bf48      	it	mi
 8001070:	f043 0320 	orrmi.w	r3, r3, #32
 8001074:	6029      	str	r1, [r5, #0]
 8001076:	bf48      	it	mi
 8001078:	6023      	strmi	r3, [r4, #0]
 800107a:	b91e      	cbnz	r6, 8001084 <_printf_i+0x1a4>
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	f023 0320 	bic.w	r3, r3, #32
 8001082:	6023      	str	r3, [r4, #0]
 8001084:	2310      	movs	r3, #16
 8001086:	e7a7      	b.n	8000fd8 <_printf_i+0xf8>
 8001088:	4824      	ldr	r0, [pc, #144]	; (800111c <_printf_i+0x23c>)
 800108a:	e7e4      	b.n	8001056 <_printf_i+0x176>
 800108c:	4615      	mov	r5, r2
 800108e:	e7bd      	b.n	800100c <_printf_i+0x12c>
 8001090:	682b      	ldr	r3, [r5, #0]
 8001092:	6826      	ldr	r6, [r4, #0]
 8001094:	6961      	ldr	r1, [r4, #20]
 8001096:	1d18      	adds	r0, r3, #4
 8001098:	6028      	str	r0, [r5, #0]
 800109a:	0635      	lsls	r5, r6, #24
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	d501      	bpl.n	80010a4 <_printf_i+0x1c4>
 80010a0:	6019      	str	r1, [r3, #0]
 80010a2:	e002      	b.n	80010aa <_printf_i+0x1ca>
 80010a4:	0670      	lsls	r0, r6, #25
 80010a6:	d5fb      	bpl.n	80010a0 <_printf_i+0x1c0>
 80010a8:	8019      	strh	r1, [r3, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	6123      	str	r3, [r4, #16]
 80010ae:	4615      	mov	r5, r2
 80010b0:	e7bc      	b.n	800102c <_printf_i+0x14c>
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	1d1a      	adds	r2, r3, #4
 80010b6:	602a      	str	r2, [r5, #0]
 80010b8:	681d      	ldr	r5, [r3, #0]
 80010ba:	6862      	ldr	r2, [r4, #4]
 80010bc:	2100      	movs	r1, #0
 80010be:	4628      	mov	r0, r5
 80010c0:	f7ff f88e 	bl	80001e0 <memchr>
 80010c4:	b108      	cbz	r0, 80010ca <_printf_i+0x1ea>
 80010c6:	1b40      	subs	r0, r0, r5
 80010c8:	6060      	str	r0, [r4, #4]
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	6123      	str	r3, [r4, #16]
 80010ce:	2300      	movs	r3, #0
 80010d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010d4:	e7aa      	b.n	800102c <_printf_i+0x14c>
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	462a      	mov	r2, r5
 80010da:	4649      	mov	r1, r9
 80010dc:	4640      	mov	r0, r8
 80010de:	47d0      	blx	sl
 80010e0:	3001      	adds	r0, #1
 80010e2:	d0ad      	beq.n	8001040 <_printf_i+0x160>
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	079b      	lsls	r3, r3, #30
 80010e8:	d413      	bmi.n	8001112 <_printf_i+0x232>
 80010ea:	68e0      	ldr	r0, [r4, #12]
 80010ec:	9b03      	ldr	r3, [sp, #12]
 80010ee:	4298      	cmp	r0, r3
 80010f0:	bfb8      	it	lt
 80010f2:	4618      	movlt	r0, r3
 80010f4:	e7a6      	b.n	8001044 <_printf_i+0x164>
 80010f6:	2301      	movs	r3, #1
 80010f8:	4632      	mov	r2, r6
 80010fa:	4649      	mov	r1, r9
 80010fc:	4640      	mov	r0, r8
 80010fe:	47d0      	blx	sl
 8001100:	3001      	adds	r0, #1
 8001102:	d09d      	beq.n	8001040 <_printf_i+0x160>
 8001104:	3501      	adds	r5, #1
 8001106:	68e3      	ldr	r3, [r4, #12]
 8001108:	9903      	ldr	r1, [sp, #12]
 800110a:	1a5b      	subs	r3, r3, r1
 800110c:	42ab      	cmp	r3, r5
 800110e:	dcf2      	bgt.n	80010f6 <_printf_i+0x216>
 8001110:	e7eb      	b.n	80010ea <_printf_i+0x20a>
 8001112:	2500      	movs	r5, #0
 8001114:	f104 0619 	add.w	r6, r4, #25
 8001118:	e7f5      	b.n	8001106 <_printf_i+0x226>
 800111a:	bf00      	nop
 800111c:	08001512 	.word	0x08001512
 8001120:	08001523 	.word	0x08001523

08001124 <__sflush_r>:
 8001124:	898a      	ldrh	r2, [r1, #12]
 8001126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	4605      	mov	r5, r0
 800112c:	0710      	lsls	r0, r2, #28
 800112e:	460c      	mov	r4, r1
 8001130:	d458      	bmi.n	80011e4 <__sflush_r+0xc0>
 8001132:	684b      	ldr	r3, [r1, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	dc05      	bgt.n	8001144 <__sflush_r+0x20>
 8001138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	dc02      	bgt.n	8001144 <__sflush_r+0x20>
 800113e:	2000      	movs	r0, #0
 8001140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001146:	2e00      	cmp	r6, #0
 8001148:	d0f9      	beq.n	800113e <__sflush_r+0x1a>
 800114a:	2300      	movs	r3, #0
 800114c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001150:	682f      	ldr	r7, [r5, #0]
 8001152:	6a21      	ldr	r1, [r4, #32]
 8001154:	602b      	str	r3, [r5, #0]
 8001156:	d032      	beq.n	80011be <__sflush_r+0x9a>
 8001158:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800115a:	89a3      	ldrh	r3, [r4, #12]
 800115c:	075a      	lsls	r2, r3, #29
 800115e:	d505      	bpl.n	800116c <__sflush_r+0x48>
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	1ac0      	subs	r0, r0, r3
 8001164:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001166:	b10b      	cbz	r3, 800116c <__sflush_r+0x48>
 8001168:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800116a:	1ac0      	subs	r0, r0, r3
 800116c:	2300      	movs	r3, #0
 800116e:	4602      	mov	r2, r0
 8001170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001172:	6a21      	ldr	r1, [r4, #32]
 8001174:	4628      	mov	r0, r5
 8001176:	47b0      	blx	r6
 8001178:	1c43      	adds	r3, r0, #1
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	d106      	bne.n	800118c <__sflush_r+0x68>
 800117e:	6829      	ldr	r1, [r5, #0]
 8001180:	291d      	cmp	r1, #29
 8001182:	d82b      	bhi.n	80011dc <__sflush_r+0xb8>
 8001184:	4a29      	ldr	r2, [pc, #164]	; (800122c <__sflush_r+0x108>)
 8001186:	410a      	asrs	r2, r1
 8001188:	07d6      	lsls	r6, r2, #31
 800118a:	d427      	bmi.n	80011dc <__sflush_r+0xb8>
 800118c:	2200      	movs	r2, #0
 800118e:	6062      	str	r2, [r4, #4]
 8001190:	04d9      	lsls	r1, r3, #19
 8001192:	6922      	ldr	r2, [r4, #16]
 8001194:	6022      	str	r2, [r4, #0]
 8001196:	d504      	bpl.n	80011a2 <__sflush_r+0x7e>
 8001198:	1c42      	adds	r2, r0, #1
 800119a:	d101      	bne.n	80011a0 <__sflush_r+0x7c>
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	b903      	cbnz	r3, 80011a2 <__sflush_r+0x7e>
 80011a0:	6560      	str	r0, [r4, #84]	; 0x54
 80011a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011a4:	602f      	str	r7, [r5, #0]
 80011a6:	2900      	cmp	r1, #0
 80011a8:	d0c9      	beq.n	800113e <__sflush_r+0x1a>
 80011aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d002      	beq.n	80011b8 <__sflush_r+0x94>
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fbea 	bl	800098c <_free_r>
 80011b8:	2000      	movs	r0, #0
 80011ba:	6360      	str	r0, [r4, #52]	; 0x34
 80011bc:	e7c0      	b.n	8001140 <__sflush_r+0x1c>
 80011be:	2301      	movs	r3, #1
 80011c0:	4628      	mov	r0, r5
 80011c2:	47b0      	blx	r6
 80011c4:	1c41      	adds	r1, r0, #1
 80011c6:	d1c8      	bne.n	800115a <__sflush_r+0x36>
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0c5      	beq.n	800115a <__sflush_r+0x36>
 80011ce:	2b1d      	cmp	r3, #29
 80011d0:	d001      	beq.n	80011d6 <__sflush_r+0xb2>
 80011d2:	2b16      	cmp	r3, #22
 80011d4:	d101      	bne.n	80011da <__sflush_r+0xb6>
 80011d6:	602f      	str	r7, [r5, #0]
 80011d8:	e7b1      	b.n	800113e <__sflush_r+0x1a>
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e0:	81a3      	strh	r3, [r4, #12]
 80011e2:	e7ad      	b.n	8001140 <__sflush_r+0x1c>
 80011e4:	690f      	ldr	r7, [r1, #16]
 80011e6:	2f00      	cmp	r7, #0
 80011e8:	d0a9      	beq.n	800113e <__sflush_r+0x1a>
 80011ea:	0793      	lsls	r3, r2, #30
 80011ec:	680e      	ldr	r6, [r1, #0]
 80011ee:	bf08      	it	eq
 80011f0:	694b      	ldreq	r3, [r1, #20]
 80011f2:	600f      	str	r7, [r1, #0]
 80011f4:	bf18      	it	ne
 80011f6:	2300      	movne	r3, #0
 80011f8:	eba6 0807 	sub.w	r8, r6, r7
 80011fc:	608b      	str	r3, [r1, #8]
 80011fe:	f1b8 0f00 	cmp.w	r8, #0
 8001202:	dd9c      	ble.n	800113e <__sflush_r+0x1a>
 8001204:	6a21      	ldr	r1, [r4, #32]
 8001206:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001208:	4643      	mov	r3, r8
 800120a:	463a      	mov	r2, r7
 800120c:	4628      	mov	r0, r5
 800120e:	47b0      	blx	r6
 8001210:	2800      	cmp	r0, #0
 8001212:	dc06      	bgt.n	8001222 <__sflush_r+0xfe>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	81a3      	strh	r3, [r4, #12]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001220:	e78e      	b.n	8001140 <__sflush_r+0x1c>
 8001222:	4407      	add	r7, r0
 8001224:	eba8 0800 	sub.w	r8, r8, r0
 8001228:	e7e9      	b.n	80011fe <__sflush_r+0xda>
 800122a:	bf00      	nop
 800122c:	dfbffffe 	.word	0xdfbffffe

08001230 <_fflush_r>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	690b      	ldr	r3, [r1, #16]
 8001234:	4605      	mov	r5, r0
 8001236:	460c      	mov	r4, r1
 8001238:	b913      	cbnz	r3, 8001240 <_fflush_r+0x10>
 800123a:	2500      	movs	r5, #0
 800123c:	4628      	mov	r0, r5
 800123e:	bd38      	pop	{r3, r4, r5, pc}
 8001240:	b118      	cbz	r0, 800124a <_fflush_r+0x1a>
 8001242:	6a03      	ldr	r3, [r0, #32]
 8001244:	b90b      	cbnz	r3, 800124a <_fflush_r+0x1a>
 8001246:	f7ff fa9b 	bl	8000780 <__sinit>
 800124a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f3      	beq.n	800123a <_fflush_r+0xa>
 8001252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001254:	07d0      	lsls	r0, r2, #31
 8001256:	d404      	bmi.n	8001262 <_fflush_r+0x32>
 8001258:	0599      	lsls	r1, r3, #22
 800125a:	d402      	bmi.n	8001262 <_fflush_r+0x32>
 800125c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800125e:	f7ff fb93 	bl	8000988 <__retarget_lock_acquire_recursive>
 8001262:	4628      	mov	r0, r5
 8001264:	4621      	mov	r1, r4
 8001266:	f7ff ff5d 	bl	8001124 <__sflush_r>
 800126a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800126c:	07da      	lsls	r2, r3, #31
 800126e:	4605      	mov	r5, r0
 8001270:	d4e4      	bmi.n	800123c <_fflush_r+0xc>
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	059b      	lsls	r3, r3, #22
 8001276:	d4e1      	bmi.n	800123c <_fflush_r+0xc>
 8001278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800127a:	f7ff fb86 	bl	800098a <__retarget_lock_release_recursive>
 800127e:	e7dd      	b.n	800123c <_fflush_r+0xc>

08001280 <__swbuf_r>:
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	460e      	mov	r6, r1
 8001284:	4614      	mov	r4, r2
 8001286:	4605      	mov	r5, r0
 8001288:	b118      	cbz	r0, 8001292 <__swbuf_r+0x12>
 800128a:	6a03      	ldr	r3, [r0, #32]
 800128c:	b90b      	cbnz	r3, 8001292 <__swbuf_r+0x12>
 800128e:	f7ff fa77 	bl	8000780 <__sinit>
 8001292:	69a3      	ldr	r3, [r4, #24]
 8001294:	60a3      	str	r3, [r4, #8]
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	071a      	lsls	r2, r3, #28
 800129a:	d525      	bpl.n	80012e8 <__swbuf_r+0x68>
 800129c:	6923      	ldr	r3, [r4, #16]
 800129e:	b31b      	cbz	r3, 80012e8 <__swbuf_r+0x68>
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	6922      	ldr	r2, [r4, #16]
 80012a4:	1a98      	subs	r0, r3, r2
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	b2f6      	uxtb	r6, r6
 80012aa:	4283      	cmp	r3, r0
 80012ac:	4637      	mov	r7, r6
 80012ae:	dc04      	bgt.n	80012ba <__swbuf_r+0x3a>
 80012b0:	4621      	mov	r1, r4
 80012b2:	4628      	mov	r0, r5
 80012b4:	f7ff ffbc 	bl	8001230 <_fflush_r>
 80012b8:	b9e0      	cbnz	r0, 80012f4 <__swbuf_r+0x74>
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60a3      	str	r3, [r4, #8]
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	6022      	str	r2, [r4, #0]
 80012c6:	701e      	strb	r6, [r3, #0]
 80012c8:	6962      	ldr	r2, [r4, #20]
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d004      	beq.n	80012da <__swbuf_r+0x5a>
 80012d0:	89a3      	ldrh	r3, [r4, #12]
 80012d2:	07db      	lsls	r3, r3, #31
 80012d4:	d506      	bpl.n	80012e4 <__swbuf_r+0x64>
 80012d6:	2e0a      	cmp	r6, #10
 80012d8:	d104      	bne.n	80012e4 <__swbuf_r+0x64>
 80012da:	4621      	mov	r1, r4
 80012dc:	4628      	mov	r0, r5
 80012de:	f7ff ffa7 	bl	8001230 <_fflush_r>
 80012e2:	b938      	cbnz	r0, 80012f4 <__swbuf_r+0x74>
 80012e4:	4638      	mov	r0, r7
 80012e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e8:	4621      	mov	r1, r4
 80012ea:	4628      	mov	r0, r5
 80012ec:	f000 f806 	bl	80012fc <__swsetup_r>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d0d5      	beq.n	80012a0 <__swbuf_r+0x20>
 80012f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80012f8:	e7f4      	b.n	80012e4 <__swbuf_r+0x64>
	...

080012fc <__swsetup_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <__swsetup_r+0xac>)
 8001300:	4605      	mov	r5, r0
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	460c      	mov	r4, r1
 8001306:	b118      	cbz	r0, 8001310 <__swsetup_r+0x14>
 8001308:	6a03      	ldr	r3, [r0, #32]
 800130a:	b90b      	cbnz	r3, 8001310 <__swsetup_r+0x14>
 800130c:	f7ff fa38 	bl	8000780 <__sinit>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001316:	0718      	lsls	r0, r3, #28
 8001318:	d422      	bmi.n	8001360 <__swsetup_r+0x64>
 800131a:	06d9      	lsls	r1, r3, #27
 800131c:	d407      	bmi.n	800132e <__swsetup_r+0x32>
 800131e:	2309      	movs	r3, #9
 8001320:	602b      	str	r3, [r5, #0]
 8001322:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001326:	81a3      	strh	r3, [r4, #12]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800132c:	e034      	b.n	8001398 <__swsetup_r+0x9c>
 800132e:	0758      	lsls	r0, r3, #29
 8001330:	d512      	bpl.n	8001358 <__swsetup_r+0x5c>
 8001332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001334:	b141      	cbz	r1, 8001348 <__swsetup_r+0x4c>
 8001336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800133a:	4299      	cmp	r1, r3
 800133c:	d002      	beq.n	8001344 <__swsetup_r+0x48>
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff fb24 	bl	800098c <_free_r>
 8001344:	2300      	movs	r3, #0
 8001346:	6363      	str	r3, [r4, #52]	; 0x34
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	2300      	movs	r3, #0
 8001352:	6063      	str	r3, [r4, #4]
 8001354:	6923      	ldr	r3, [r4, #16]
 8001356:	6023      	str	r3, [r4, #0]
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	81a3      	strh	r3, [r4, #12]
 8001360:	6923      	ldr	r3, [r4, #16]
 8001362:	b94b      	cbnz	r3, 8001378 <__swsetup_r+0x7c>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800136a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800136e:	d003      	beq.n	8001378 <__swsetup_r+0x7c>
 8001370:	4621      	mov	r1, r4
 8001372:	4628      	mov	r0, r5
 8001374:	f000 f850 	bl	8001418 <__smakebuf_r>
 8001378:	89a0      	ldrh	r0, [r4, #12]
 800137a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800137e:	f010 0301 	ands.w	r3, r0, #1
 8001382:	d00a      	beq.n	800139a <__swsetup_r+0x9e>
 8001384:	2300      	movs	r3, #0
 8001386:	60a3      	str	r3, [r4, #8]
 8001388:	6963      	ldr	r3, [r4, #20]
 800138a:	425b      	negs	r3, r3
 800138c:	61a3      	str	r3, [r4, #24]
 800138e:	6923      	ldr	r3, [r4, #16]
 8001390:	b943      	cbnz	r3, 80013a4 <__swsetup_r+0xa8>
 8001392:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001396:	d1c4      	bne.n	8001322 <__swsetup_r+0x26>
 8001398:	bd38      	pop	{r3, r4, r5, pc}
 800139a:	0781      	lsls	r1, r0, #30
 800139c:	bf58      	it	pl
 800139e:	6963      	ldrpl	r3, [r4, #20]
 80013a0:	60a3      	str	r3, [r4, #8]
 80013a2:	e7f4      	b.n	800138e <__swsetup_r+0x92>
 80013a4:	2000      	movs	r0, #0
 80013a6:	e7f7      	b.n	8001398 <__swsetup_r+0x9c>
 80013a8:	20000058 	.word	0x20000058

080013ac <_sbrk_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	4d06      	ldr	r5, [pc, #24]	; (80013c8 <_sbrk_r+0x1c>)
 80013b0:	2300      	movs	r3, #0
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	f7ff f84e 	bl	8000458 <_sbrk>
 80013bc:	1c43      	adds	r3, r0, #1
 80013be:	d102      	bne.n	80013c6 <_sbrk_r+0x1a>
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	b103      	cbz	r3, 80013c6 <_sbrk_r+0x1a>
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	200001bc 	.word	0x200001bc

080013cc <__swhatbuf_r>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	460c      	mov	r4, r1
 80013d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013d4:	2900      	cmp	r1, #0
 80013d6:	b096      	sub	sp, #88	; 0x58
 80013d8:	4615      	mov	r5, r2
 80013da:	461e      	mov	r6, r3
 80013dc:	da0d      	bge.n	80013fa <__swhatbuf_r+0x2e>
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	bf0c      	ite	eq
 80013ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013ee:	2340      	movne	r3, #64	; 0x40
 80013f0:	2000      	movs	r0, #0
 80013f2:	6031      	str	r1, [r6, #0]
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	b016      	add	sp, #88	; 0x58
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
 80013fa:	466a      	mov	r2, sp
 80013fc:	f000 f848 	bl	8001490 <_fstat_r>
 8001400:	2800      	cmp	r0, #0
 8001402:	dbec      	blt.n	80013de <__swhatbuf_r+0x12>
 8001404:	9901      	ldr	r1, [sp, #4]
 8001406:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800140a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800140e:	4259      	negs	r1, r3
 8001410:	4159      	adcs	r1, r3
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	e7eb      	b.n	80013f0 <__swhatbuf_r+0x24>

08001418 <__smakebuf_r>:
 8001418:	898b      	ldrh	r3, [r1, #12]
 800141a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800141c:	079d      	lsls	r5, r3, #30
 800141e:	4606      	mov	r6, r0
 8001420:	460c      	mov	r4, r1
 8001422:	d507      	bpl.n	8001434 <__smakebuf_r+0x1c>
 8001424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001428:	6023      	str	r3, [r4, #0]
 800142a:	6123      	str	r3, [r4, #16]
 800142c:	2301      	movs	r3, #1
 800142e:	6163      	str	r3, [r4, #20]
 8001430:	b002      	add	sp, #8
 8001432:	bd70      	pop	{r4, r5, r6, pc}
 8001434:	ab01      	add	r3, sp, #4
 8001436:	466a      	mov	r2, sp
 8001438:	f7ff ffc8 	bl	80013cc <__swhatbuf_r>
 800143c:	9900      	ldr	r1, [sp, #0]
 800143e:	4605      	mov	r5, r0
 8001440:	4630      	mov	r0, r6
 8001442:	f7ff fb0f 	bl	8000a64 <_malloc_r>
 8001446:	b948      	cbnz	r0, 800145c <__smakebuf_r+0x44>
 8001448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800144c:	059a      	lsls	r2, r3, #22
 800144e:	d4ef      	bmi.n	8001430 <__smakebuf_r+0x18>
 8001450:	f023 0303 	bic.w	r3, r3, #3
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	81a3      	strh	r3, [r4, #12]
 800145a:	e7e3      	b.n	8001424 <__smakebuf_r+0xc>
 800145c:	89a3      	ldrh	r3, [r4, #12]
 800145e:	6020      	str	r0, [r4, #0]
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	81a3      	strh	r3, [r4, #12]
 8001466:	9b00      	ldr	r3, [sp, #0]
 8001468:	6163      	str	r3, [r4, #20]
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	6120      	str	r0, [r4, #16]
 800146e:	b15b      	cbz	r3, 8001488 <__smakebuf_r+0x70>
 8001470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001474:	4630      	mov	r0, r6
 8001476:	f000 f81d 	bl	80014b4 <_isatty_r>
 800147a:	b128      	cbz	r0, 8001488 <__smakebuf_r+0x70>
 800147c:	89a3      	ldrh	r3, [r4, #12]
 800147e:	f023 0303 	bic.w	r3, r3, #3
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	89a3      	ldrh	r3, [r4, #12]
 800148a:	431d      	orrs	r5, r3
 800148c:	81a5      	strh	r5, [r4, #12]
 800148e:	e7cf      	b.n	8001430 <__smakebuf_r+0x18>

08001490 <_fstat_r>:
 8001490:	b538      	push	{r3, r4, r5, lr}
 8001492:	4d07      	ldr	r5, [pc, #28]	; (80014b0 <_fstat_r+0x20>)
 8001494:	2300      	movs	r3, #0
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	602b      	str	r3, [r5, #0]
 800149e:	f7fe ffb2 	bl	8000406 <_fstat>
 80014a2:	1c43      	adds	r3, r0, #1
 80014a4:	d102      	bne.n	80014ac <_fstat_r+0x1c>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	b103      	cbz	r3, 80014ac <_fstat_r+0x1c>
 80014aa:	6023      	str	r3, [r4, #0]
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
 80014ae:	bf00      	nop
 80014b0:	200001bc 	.word	0x200001bc

080014b4 <_isatty_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4d06      	ldr	r5, [pc, #24]	; (80014d0 <_isatty_r+0x1c>)
 80014b8:	2300      	movs	r3, #0
 80014ba:	4604      	mov	r4, r0
 80014bc:	4608      	mov	r0, r1
 80014be:	602b      	str	r3, [r5, #0]
 80014c0:	f7fe ffb1 	bl	8000426 <_isatty>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	d102      	bne.n	80014ce <_isatty_r+0x1a>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	b103      	cbz	r3, 80014ce <_isatty_r+0x1a>
 80014cc:	6023      	str	r3, [r4, #0]
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	200001bc 	.word	0x200001bc

080014d4 <_init>:
 80014d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d6:	bf00      	nop
 80014d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014da:	bc08      	pop	{r3}
 80014dc:	469e      	mov	lr, r3
 80014de:	4770      	bx	lr

080014e0 <_fini>:
 80014e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e2:	bf00      	nop
 80014e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014e6:	bc08      	pop	{r3}
 80014e8:	469e      	mov	lr, r3
 80014ea:	4770      	bx	lr
