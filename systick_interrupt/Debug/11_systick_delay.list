
11_systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d40  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000eec  08000eec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000eec  08000eec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eec  08000eec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eec  08000eec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f50  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f50  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010b1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b2  00000000  00000000  00021180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00021738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  000218b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fea  00000000  00000000  000219ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001d86  00000000  00000000  00023997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055ad5  00000000  00000000  0002571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000abc  00000000  00000000  0007b1f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0007bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000ec0 	.word	0x08000ec0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000ec0 	.word	0x08000ec0

080001d8 <main>:
#define LED_PIN		PIN5

uint32_t sensor_value;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	// Enable clock to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <main+0x48>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <main+0x48>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	// Configure Pin
	GPIOA->MODER |= (1U << 10);
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <main+0x4c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <main+0x4c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U << 11);
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <main+0x4c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <main+0x4c>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	// Init the peripherals
	uart2_rxtx_init();
 8000200:	f000 f8ee 	bl	80003e0 <uart2_rxtx_init>
	// Start the conversion
//	start_conversion();

	while(1)
	{
		systickDelayMs(1000);
 8000204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000208:	f000 f8b4 	bl	8000374 <systickDelayMs>
		GPIOA->ODR ^= LED_PIN;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <main+0x4c>)
 800020e:	695b      	ldr	r3, [r3, #20]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <main+0x4c>)
 8000212:	f083 0320 	eor.w	r3, r3, #32
 8000216:	6153      	str	r3, [r2, #20]
		printf("A second passed!! \n");
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <main+0x50>)
 800021a:	f000 fabd 	bl	8000798 <puts>
		systickDelayMs(1000);
 800021e:	e7f1      	b.n	8000204 <main+0x2c>
 8000220:	40023800 	.word	0x40023800
 8000224:	40020000 	.word	0x40020000
 8000228:	08000ed8 	.word	0x08000ed8

0800022c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	e00a      	b.n	8000254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800023e:	f3af 8000 	nop.w
 8000242:	4601      	mov	r1, r0
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	1c5a      	adds	r2, r3, #1
 8000248:	60ba      	str	r2, [r7, #8]
 800024a:	b2ca      	uxtb	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	3301      	adds	r3, #1
 8000252:	617b      	str	r3, [r7, #20]
 8000254:	697a      	ldr	r2, [r7, #20]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	dbf0      	blt.n	800023e <_read+0x12>
  }

  return len;
 800025c:	687b      	ldr	r3, [r7, #4]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3718      	adds	r7, #24
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b086      	sub	sp, #24
 800026a:	af00      	add	r7, sp, #0
 800026c:	60f8      	str	r0, [r7, #12]
 800026e:	60b9      	str	r1, [r7, #8]
 8000270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]
 8000276:	e009      	b.n	800028c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	1c5a      	adds	r2, r3, #1
 800027c:	60ba      	str	r2, [r7, #8]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f8a1 	bl	80003c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	3301      	adds	r3, #1
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	697a      	ldr	r2, [r7, #20]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	429a      	cmp	r2, r3
 8000292:	dbf1      	blt.n	8000278 <_write+0x12>
  }
  return len;
 8000294:	687b      	ldr	r3, [r7, #4]
}
 8000296:	4618      	mov	r0, r3
 8000298:	3718      	adds	r7, #24
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}

0800029e <_close>:

int _close(int file)
{
 800029e:	b480      	push	{r7}
 80002a0:	b083      	sub	sp, #12
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002b6:	b480      	push	{r7}
 80002b8:	b083      	sub	sp, #12
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002c6:	605a      	str	r2, [r3, #4]
  return 0;
 80002c8:	2300      	movs	r3, #0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr

080002d6 <_isatty>:

int _isatty(int file)
{
 80002d6:	b480      	push	{r7}
 80002d8:	b083      	sub	sp, #12
 80002da:	af00      	add	r7, sp, #0
 80002dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002de:	2301      	movs	r3, #1
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002f8:	2300      	movs	r3, #0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
	...

08000308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <_sbrk+0x5c>)
 8000312:	4b15      	ldr	r3, [pc, #84]	; (8000368 <_sbrk+0x60>)
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <_sbrk+0x64>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d102      	bne.n	800032a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <_sbrk+0x64>)
 8000326:	4a12      	ldr	r2, [pc, #72]	; (8000370 <_sbrk+0x68>)
 8000328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <_sbrk+0x64>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	693a      	ldr	r2, [r7, #16]
 8000334:	429a      	cmp	r2, r3
 8000336:	d207      	bcs.n	8000348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000338:	f000 fb5c 	bl	80009f4 <__errno>
 800033c:	4603      	mov	r3, r0
 800033e:	220c      	movs	r2, #12
 8000340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000346:	e009      	b.n	800035c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <_sbrk+0x64>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <_sbrk+0x64>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	4a05      	ldr	r2, [pc, #20]	; (800036c <_sbrk+0x64>)
 8000358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	4618      	mov	r0, r3
 800035e:	3718      	adds	r7, #24
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20020000 	.word	0x20020000
 8000368:	00000400 	.word	0x00000400
 800036c:	20000078 	.word	0x20000078
 8000370:	200001c8 	.word	0x200001c8

08000374 <systickDelayMs>:
 *      Author: leandro
 */

#include "systick.h"

void systickDelayMs(int delay){
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	// Reaload with number of clock in miliseconds
	SysTick->LOAD = SYSTICK_LOAD_VAL_MS;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <systickDelayMs+0x50>)
 800037e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000382:	605a      	str	r2, [r3, #4]

	// Clear systick current value
	SysTick->VAL = 0;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <systickDelayMs+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	609a      	str	r2, [r3, #8]

	// Enable systick end select internal clock source
	SysTick->CTRL = CRTL_ENABLE | CTRL_CLKSRC;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <systickDelayMs+0x50>)
 800038c:	2205      	movs	r2, #5
 800038e:	601a      	str	r2, [r3, #0]

	for (int i=0; i < delay; i++){
 8000390:	2300      	movs	r3, #0
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	e009      	b.n	80003aa <systickDelayMs+0x36>
		// Wait until COUNTFLAG is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0){ }
 8000396:	bf00      	nop
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <systickDelayMs+0x50>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0f9      	beq.n	8000398 <systickDelayMs+0x24>
	for (int i=0; i < delay; i++){
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dbf1      	blt.n	8000396 <systickDelayMs+0x22>
	}

	SysTick->CTRL = 0;
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <systickDelayMs+0x50>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
}
 80003b8:	bf00      	nop
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

//It's necessary to declare this function to use with printf
int __io_putchar(int ch){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f000 f875 	bl	80004c0 <uart2_write>
	return ch;
 80003d6:	687b      	ldr	r3, [r7, #4]
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <uart2_rxtx_init>:


void uart2_rxtx_init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <uart2_rxtx_init+0xd0>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <uart2_rxtx_init+0xd0>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 80003f0:	4b30      	ldr	r3, [pc, #192]	; (80004b4 <uart2_rxtx_init+0xd4>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a2f      	ldr	r2, [pc, #188]	; (80004b4 <uart2_rxtx_init+0xd4>)
 80003f6:	f023 0310 	bic.w	r3, r3, #16
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80003fc:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <uart2_rxtx_init+0xd4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a2c      	ldr	r2, [pc, #176]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4a29      	ldr	r2, [pc, #164]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800040e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000412:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000416:	6a1b      	ldr	r3, [r3, #32]
 8000418:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800041a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000422:	6a1b      	ldr	r3, [r3, #32]
 8000424:	4a23      	ldr	r2, [pc, #140]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	4a20      	ldr	r2, [pc, #128]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000436:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800043e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000442:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800044a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044e:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000452:	6a1b      	ldr	r3, [r3, #32]
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800045e:	6a1b      	ldr	r3, [r3, #32]
 8000460:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000466:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800046e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000472:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <uart2_rxtx_init+0xd4>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <uart2_rxtx_init+0xd4>)
 800047a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800047e:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <uart2_rxtx_init+0xd0>)
 8000482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000484:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <uart2_rxtx_init+0xd0>)
 8000486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800048a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 800048c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000490:	4909      	ldr	r1, [pc, #36]	; (80004b8 <uart2_rxtx_init+0xd8>)
 8000492:	480a      	ldr	r0, [pc, #40]	; (80004bc <uart2_rxtx_init+0xdc>)
 8000494:	f000 f82c 	bl	80004f0 <uart_set_baudrate>

	/*Configure the transfer direction*/
	// Enable transmitter and receiver
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <uart2_rxtx_init+0xdc>)
 800049a:	220c      	movs	r2, #12
 800049c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <uart2_rxtx_init+0xdc>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	4a06      	ldr	r2, [pc, #24]	; (80004bc <uart2_rxtx_init+0xdc>)
 80004a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a8:	60d3      	str	r3, [r2, #12]


}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020000 	.word	0x40020000
 80004b8:	00f42400 	.word	0x00f42400
 80004bc:	40004400 	.word	0x40004400

080004c0 <uart2_write>:
	return USART2->DR;
}


void uart2_write(int ch)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80004c8:	bf00      	nop
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <uart2_write+0x2c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f9      	beq.n	80004ca <uart2_write+0xa>

  /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <uart2_write+0x2c>)
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	6053      	str	r3, [r2, #4]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40004400 	.word	0x40004400

080004f0 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80004fc:	6879      	ldr	r1, [r7, #4]
 80004fe:	68b8      	ldr	r0, [r7, #8]
 8000500:	f000 f808 	bl	8000514 <compute_uart_bd>
 8000504:	4603      	mov	r3, r0
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	609a      	str	r2, [r3, #8]
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	085a      	lsrs	r2, r3, #1
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	441a      	add	r2, r3
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	fbb2 f3f3 	udiv	r3, r2, r3
 800052c:	b29b      	uxth	r3, r3
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800053c:	480d      	ldr	r0, [pc, #52]	; (8000574 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800053e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000540:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <LoopForever+0x6>)
  ldr r1, =_edata
 8000546:	490d      	ldr	r1, [pc, #52]	; (800057c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <LoopForever+0xe>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800054c:	e002      	b.n	8000554 <LoopCopyDataInit>

0800054e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800054e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000552:	3304      	adds	r3, #4

08000554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000558:	d3f9      	bcc.n	800054e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800055c:	4c0a      	ldr	r4, [pc, #40]	; (8000588 <LoopForever+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000560:	e001      	b.n	8000566 <LoopFillZerobss>

08000562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000564:	3204      	adds	r2, #4

08000566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000568:	d3fb      	bcc.n	8000562 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056a:	f000 fa49 	bl	8000a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056e:	f7ff fe33 	bl	80001d8 <main>

08000572 <LoopForever>:

LoopForever:
  b LoopForever
 8000572:	e7fe      	b.n	8000572 <LoopForever>
  ldr   r0, =_estack
 8000574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800057c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000580:	08000ef4 	.word	0x08000ef4
  ldr r2, =_sbss
 8000584:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000588:	200001c8 	.word	0x200001c8

0800058c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800058c:	e7fe      	b.n	800058c <ADC_IRQHandler>
	...

08000590 <std>:
 8000590:	2300      	movs	r3, #0
 8000592:	b510      	push	{r4, lr}
 8000594:	4604      	mov	r4, r0
 8000596:	e9c0 3300 	strd	r3, r3, [r0]
 800059a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800059e:	6083      	str	r3, [r0, #8]
 80005a0:	8181      	strh	r1, [r0, #12]
 80005a2:	6643      	str	r3, [r0, #100]	; 0x64
 80005a4:	81c2      	strh	r2, [r0, #14]
 80005a6:	6183      	str	r3, [r0, #24]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2208      	movs	r2, #8
 80005ac:	305c      	adds	r0, #92	; 0x5c
 80005ae:	f000 f9d3 	bl	8000958 <memset>
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <std+0x38>)
 80005b4:	6263      	str	r3, [r4, #36]	; 0x24
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <std+0x3c>)
 80005b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <std+0x40>)
 80005bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <std+0x44>)
 80005c0:	6224      	str	r4, [r4, #32]
 80005c2:	6323      	str	r3, [r4, #48]	; 0x30
 80005c4:	bd10      	pop	{r4, pc}
 80005c6:	bf00      	nop
 80005c8:	080007a9 	.word	0x080007a9
 80005cc:	080007cb 	.word	0x080007cb
 80005d0:	08000803 	.word	0x08000803
 80005d4:	08000827 	.word	0x08000827

080005d8 <stdio_exit_handler>:
 80005d8:	4a02      	ldr	r2, [pc, #8]	; (80005e4 <stdio_exit_handler+0xc>)
 80005da:	4903      	ldr	r1, [pc, #12]	; (80005e8 <stdio_exit_handler+0x10>)
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <stdio_exit_handler+0x14>)
 80005de:	f000 b869 	b.w	80006b4 <_fwalk_sglue>
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	08000d49 	.word	0x08000d49
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <cleanup_stdio>:
 80005f0:	6841      	ldr	r1, [r0, #4]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <cleanup_stdio+0x34>)
 80005f4:	4299      	cmp	r1, r3
 80005f6:	b510      	push	{r4, lr}
 80005f8:	4604      	mov	r4, r0
 80005fa:	d001      	beq.n	8000600 <cleanup_stdio+0x10>
 80005fc:	f000 fba4 	bl	8000d48 <_fflush_r>
 8000600:	68a1      	ldr	r1, [r4, #8]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <cleanup_stdio+0x38>)
 8000604:	4299      	cmp	r1, r3
 8000606:	d002      	beq.n	800060e <cleanup_stdio+0x1e>
 8000608:	4620      	mov	r0, r4
 800060a:	f000 fb9d 	bl	8000d48 <_fflush_r>
 800060e:	68e1      	ldr	r1, [r4, #12]
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <cleanup_stdio+0x3c>)
 8000612:	4299      	cmp	r1, r3
 8000614:	d004      	beq.n	8000620 <cleanup_stdio+0x30>
 8000616:	4620      	mov	r0, r4
 8000618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800061c:	f000 bb94 	b.w	8000d48 <_fflush_r>
 8000620:	bd10      	pop	{r4, pc}
 8000622:	bf00      	nop
 8000624:	2000007c 	.word	0x2000007c
 8000628:	200000e4 	.word	0x200000e4
 800062c:	2000014c 	.word	0x2000014c

08000630 <global_stdio_init.part.0>:
 8000630:	b510      	push	{r4, lr}
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <global_stdio_init.part.0+0x30>)
 8000634:	4c0b      	ldr	r4, [pc, #44]	; (8000664 <global_stdio_init.part.0+0x34>)
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <global_stdio_init.part.0+0x38>)
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	4620      	mov	r0, r4
 800063c:	2200      	movs	r2, #0
 800063e:	2104      	movs	r1, #4
 8000640:	f7ff ffa6 	bl	8000590 <std>
 8000644:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000648:	2201      	movs	r2, #1
 800064a:	2109      	movs	r1, #9
 800064c:	f7ff ffa0 	bl	8000590 <std>
 8000650:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000654:	2202      	movs	r2, #2
 8000656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800065a:	2112      	movs	r1, #18
 800065c:	f7ff bf98 	b.w	8000590 <std>
 8000660:	200001b4 	.word	0x200001b4
 8000664:	2000007c 	.word	0x2000007c
 8000668:	080005d9 	.word	0x080005d9

0800066c <__sfp_lock_acquire>:
 800066c:	4801      	ldr	r0, [pc, #4]	; (8000674 <__sfp_lock_acquire+0x8>)
 800066e:	f000 b9eb 	b.w	8000a48 <__retarget_lock_acquire_recursive>
 8000672:	bf00      	nop
 8000674:	200001bd 	.word	0x200001bd

08000678 <__sfp_lock_release>:
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <__sfp_lock_release+0x8>)
 800067a:	f000 b9e6 	b.w	8000a4a <__retarget_lock_release_recursive>
 800067e:	bf00      	nop
 8000680:	200001bd 	.word	0x200001bd

08000684 <__sinit>:
 8000684:	b510      	push	{r4, lr}
 8000686:	4604      	mov	r4, r0
 8000688:	f7ff fff0 	bl	800066c <__sfp_lock_acquire>
 800068c:	6a23      	ldr	r3, [r4, #32]
 800068e:	b11b      	cbz	r3, 8000698 <__sinit+0x14>
 8000690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000694:	f7ff bff0 	b.w	8000678 <__sfp_lock_release>
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <__sinit+0x28>)
 800069a:	6223      	str	r3, [r4, #32]
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <__sinit+0x2c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f5      	bne.n	8000690 <__sinit+0xc>
 80006a4:	f7ff ffc4 	bl	8000630 <global_stdio_init.part.0>
 80006a8:	e7f2      	b.n	8000690 <__sinit+0xc>
 80006aa:	bf00      	nop
 80006ac:	080005f1 	.word	0x080005f1
 80006b0:	200001b4 	.word	0x200001b4

080006b4 <_fwalk_sglue>:
 80006b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006b8:	4607      	mov	r7, r0
 80006ba:	4688      	mov	r8, r1
 80006bc:	4614      	mov	r4, r2
 80006be:	2600      	movs	r6, #0
 80006c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006c4:	f1b9 0901 	subs.w	r9, r9, #1
 80006c8:	d505      	bpl.n	80006d6 <_fwalk_sglue+0x22>
 80006ca:	6824      	ldr	r4, [r4, #0]
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d1f7      	bne.n	80006c0 <_fwalk_sglue+0xc>
 80006d0:	4630      	mov	r0, r6
 80006d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006d6:	89ab      	ldrh	r3, [r5, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d907      	bls.n	80006ec <_fwalk_sglue+0x38>
 80006dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006e0:	3301      	adds	r3, #1
 80006e2:	d003      	beq.n	80006ec <_fwalk_sglue+0x38>
 80006e4:	4629      	mov	r1, r5
 80006e6:	4638      	mov	r0, r7
 80006e8:	47c0      	blx	r8
 80006ea:	4306      	orrs	r6, r0
 80006ec:	3568      	adds	r5, #104	; 0x68
 80006ee:	e7e9      	b.n	80006c4 <_fwalk_sglue+0x10>

080006f0 <_puts_r>:
 80006f0:	6a03      	ldr	r3, [r0, #32]
 80006f2:	b570      	push	{r4, r5, r6, lr}
 80006f4:	6884      	ldr	r4, [r0, #8]
 80006f6:	4605      	mov	r5, r0
 80006f8:	460e      	mov	r6, r1
 80006fa:	b90b      	cbnz	r3, 8000700 <_puts_r+0x10>
 80006fc:	f7ff ffc2 	bl	8000684 <__sinit>
 8000700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000702:	07db      	lsls	r3, r3, #31
 8000704:	d405      	bmi.n	8000712 <_puts_r+0x22>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	0598      	lsls	r0, r3, #22
 800070a:	d402      	bmi.n	8000712 <_puts_r+0x22>
 800070c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800070e:	f000 f99b 	bl	8000a48 <__retarget_lock_acquire_recursive>
 8000712:	89a3      	ldrh	r3, [r4, #12]
 8000714:	0719      	lsls	r1, r3, #28
 8000716:	d513      	bpl.n	8000740 <_puts_r+0x50>
 8000718:	6923      	ldr	r3, [r4, #16]
 800071a:	b18b      	cbz	r3, 8000740 <_puts_r+0x50>
 800071c:	3e01      	subs	r6, #1
 800071e:	68a3      	ldr	r3, [r4, #8]
 8000720:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000724:	3b01      	subs	r3, #1
 8000726:	60a3      	str	r3, [r4, #8]
 8000728:	b9e9      	cbnz	r1, 8000766 <_puts_r+0x76>
 800072a:	2b00      	cmp	r3, #0
 800072c:	da2e      	bge.n	800078c <_puts_r+0x9c>
 800072e:	4622      	mov	r2, r4
 8000730:	210a      	movs	r1, #10
 8000732:	4628      	mov	r0, r5
 8000734:	f000 f87b 	bl	800082e <__swbuf_r>
 8000738:	3001      	adds	r0, #1
 800073a:	d007      	beq.n	800074c <_puts_r+0x5c>
 800073c:	250a      	movs	r5, #10
 800073e:	e007      	b.n	8000750 <_puts_r+0x60>
 8000740:	4621      	mov	r1, r4
 8000742:	4628      	mov	r0, r5
 8000744:	f000 f8b0 	bl	80008a8 <__swsetup_r>
 8000748:	2800      	cmp	r0, #0
 800074a:	d0e7      	beq.n	800071c <_puts_r+0x2c>
 800074c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000752:	07da      	lsls	r2, r3, #31
 8000754:	d405      	bmi.n	8000762 <_puts_r+0x72>
 8000756:	89a3      	ldrh	r3, [r4, #12]
 8000758:	059b      	lsls	r3, r3, #22
 800075a:	d402      	bmi.n	8000762 <_puts_r+0x72>
 800075c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800075e:	f000 f974 	bl	8000a4a <__retarget_lock_release_recursive>
 8000762:	4628      	mov	r0, r5
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	2b00      	cmp	r3, #0
 8000768:	da04      	bge.n	8000774 <_puts_r+0x84>
 800076a:	69a2      	ldr	r2, [r4, #24]
 800076c:	429a      	cmp	r2, r3
 800076e:	dc06      	bgt.n	800077e <_puts_r+0x8e>
 8000770:	290a      	cmp	r1, #10
 8000772:	d004      	beq.n	800077e <_puts_r+0x8e>
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	6022      	str	r2, [r4, #0]
 800077a:	7019      	strb	r1, [r3, #0]
 800077c:	e7cf      	b.n	800071e <_puts_r+0x2e>
 800077e:	4622      	mov	r2, r4
 8000780:	4628      	mov	r0, r5
 8000782:	f000 f854 	bl	800082e <__swbuf_r>
 8000786:	3001      	adds	r0, #1
 8000788:	d1c9      	bne.n	800071e <_puts_r+0x2e>
 800078a:	e7df      	b.n	800074c <_puts_r+0x5c>
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	250a      	movs	r5, #10
 8000790:	1c5a      	adds	r2, r3, #1
 8000792:	6022      	str	r2, [r4, #0]
 8000794:	701d      	strb	r5, [r3, #0]
 8000796:	e7db      	b.n	8000750 <_puts_r+0x60>

08000798 <puts>:
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <puts+0xc>)
 800079a:	4601      	mov	r1, r0
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	f7ff bfa7 	b.w	80006f0 <_puts_r>
 80007a2:	bf00      	nop
 80007a4:	20000058 	.word	0x20000058

080007a8 <__sread>:
 80007a8:	b510      	push	{r4, lr}
 80007aa:	460c      	mov	r4, r1
 80007ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007b0:	f000 f8fc 	bl	80009ac <_read_r>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	bfab      	itete	ge
 80007b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007ba:	89a3      	ldrhlt	r3, [r4, #12]
 80007bc:	181b      	addge	r3, r3, r0
 80007be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007c2:	bfac      	ite	ge
 80007c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80007c6:	81a3      	strhlt	r3, [r4, #12]
 80007c8:	bd10      	pop	{r4, pc}

080007ca <__swrite>:
 80007ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007ce:	461f      	mov	r7, r3
 80007d0:	898b      	ldrh	r3, [r1, #12]
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	4605      	mov	r5, r0
 80007d6:	460c      	mov	r4, r1
 80007d8:	4616      	mov	r6, r2
 80007da:	d505      	bpl.n	80007e8 <__swrite+0x1e>
 80007dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e0:	2302      	movs	r3, #2
 80007e2:	2200      	movs	r2, #0
 80007e4:	f000 f8d0 	bl	8000988 <_lseek_r>
 80007e8:	89a3      	ldrh	r3, [r4, #12]
 80007ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007f2:	81a3      	strh	r3, [r4, #12]
 80007f4:	4632      	mov	r2, r6
 80007f6:	463b      	mov	r3, r7
 80007f8:	4628      	mov	r0, r5
 80007fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007fe:	f000 b8e7 	b.w	80009d0 <_write_r>

08000802 <__sseek>:
 8000802:	b510      	push	{r4, lr}
 8000804:	460c      	mov	r4, r1
 8000806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800080a:	f000 f8bd 	bl	8000988 <_lseek_r>
 800080e:	1c43      	adds	r3, r0, #1
 8000810:	89a3      	ldrh	r3, [r4, #12]
 8000812:	bf15      	itete	ne
 8000814:	6560      	strne	r0, [r4, #84]	; 0x54
 8000816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800081a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800081e:	81a3      	strheq	r3, [r4, #12]
 8000820:	bf18      	it	ne
 8000822:	81a3      	strhne	r3, [r4, #12]
 8000824:	bd10      	pop	{r4, pc}

08000826 <__sclose>:
 8000826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800082a:	f000 b89d 	b.w	8000968 <_close_r>

0800082e <__swbuf_r>:
 800082e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000830:	460e      	mov	r6, r1
 8000832:	4614      	mov	r4, r2
 8000834:	4605      	mov	r5, r0
 8000836:	b118      	cbz	r0, 8000840 <__swbuf_r+0x12>
 8000838:	6a03      	ldr	r3, [r0, #32]
 800083a:	b90b      	cbnz	r3, 8000840 <__swbuf_r+0x12>
 800083c:	f7ff ff22 	bl	8000684 <__sinit>
 8000840:	69a3      	ldr	r3, [r4, #24]
 8000842:	60a3      	str	r3, [r4, #8]
 8000844:	89a3      	ldrh	r3, [r4, #12]
 8000846:	071a      	lsls	r2, r3, #28
 8000848:	d525      	bpl.n	8000896 <__swbuf_r+0x68>
 800084a:	6923      	ldr	r3, [r4, #16]
 800084c:	b31b      	cbz	r3, 8000896 <__swbuf_r+0x68>
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	6922      	ldr	r2, [r4, #16]
 8000852:	1a98      	subs	r0, r3, r2
 8000854:	6963      	ldr	r3, [r4, #20]
 8000856:	b2f6      	uxtb	r6, r6
 8000858:	4283      	cmp	r3, r0
 800085a:	4637      	mov	r7, r6
 800085c:	dc04      	bgt.n	8000868 <__swbuf_r+0x3a>
 800085e:	4621      	mov	r1, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 fa71 	bl	8000d48 <_fflush_r>
 8000866:	b9e0      	cbnz	r0, 80008a2 <__swbuf_r+0x74>
 8000868:	68a3      	ldr	r3, [r4, #8]
 800086a:	3b01      	subs	r3, #1
 800086c:	60a3      	str	r3, [r4, #8]
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	6022      	str	r2, [r4, #0]
 8000874:	701e      	strb	r6, [r3, #0]
 8000876:	6962      	ldr	r2, [r4, #20]
 8000878:	1c43      	adds	r3, r0, #1
 800087a:	429a      	cmp	r2, r3
 800087c:	d004      	beq.n	8000888 <__swbuf_r+0x5a>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	07db      	lsls	r3, r3, #31
 8000882:	d506      	bpl.n	8000892 <__swbuf_r+0x64>
 8000884:	2e0a      	cmp	r6, #10
 8000886:	d104      	bne.n	8000892 <__swbuf_r+0x64>
 8000888:	4621      	mov	r1, r4
 800088a:	4628      	mov	r0, r5
 800088c:	f000 fa5c 	bl	8000d48 <_fflush_r>
 8000890:	b938      	cbnz	r0, 80008a2 <__swbuf_r+0x74>
 8000892:	4638      	mov	r0, r7
 8000894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000896:	4621      	mov	r1, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 f805 	bl	80008a8 <__swsetup_r>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d0d5      	beq.n	800084e <__swbuf_r+0x20>
 80008a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80008a6:	e7f4      	b.n	8000892 <__swbuf_r+0x64>

080008a8 <__swsetup_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <__swsetup_r+0xac>)
 80008ac:	4605      	mov	r5, r0
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	460c      	mov	r4, r1
 80008b2:	b118      	cbz	r0, 80008bc <__swsetup_r+0x14>
 80008b4:	6a03      	ldr	r3, [r0, #32]
 80008b6:	b90b      	cbnz	r3, 80008bc <__swsetup_r+0x14>
 80008b8:	f7ff fee4 	bl	8000684 <__sinit>
 80008bc:	89a3      	ldrh	r3, [r4, #12]
 80008be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008c2:	0718      	lsls	r0, r3, #28
 80008c4:	d422      	bmi.n	800090c <__swsetup_r+0x64>
 80008c6:	06d9      	lsls	r1, r3, #27
 80008c8:	d407      	bmi.n	80008da <__swsetup_r+0x32>
 80008ca:	2309      	movs	r3, #9
 80008cc:	602b      	str	r3, [r5, #0]
 80008ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008d2:	81a3      	strh	r3, [r4, #12]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	e034      	b.n	8000944 <__swsetup_r+0x9c>
 80008da:	0758      	lsls	r0, r3, #29
 80008dc:	d512      	bpl.n	8000904 <__swsetup_r+0x5c>
 80008de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008e0:	b141      	cbz	r1, 80008f4 <__swsetup_r+0x4c>
 80008e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d002      	beq.n	80008f0 <__swsetup_r+0x48>
 80008ea:	4628      	mov	r0, r5
 80008ec:	f000 f8ae 	bl	8000a4c <_free_r>
 80008f0:	2300      	movs	r3, #0
 80008f2:	6363      	str	r3, [r4, #52]	; 0x34
 80008f4:	89a3      	ldrh	r3, [r4, #12]
 80008f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008fa:	81a3      	strh	r3, [r4, #12]
 80008fc:	2300      	movs	r3, #0
 80008fe:	6063      	str	r3, [r4, #4]
 8000900:	6923      	ldr	r3, [r4, #16]
 8000902:	6023      	str	r3, [r4, #0]
 8000904:	89a3      	ldrh	r3, [r4, #12]
 8000906:	f043 0308 	orr.w	r3, r3, #8
 800090a:	81a3      	strh	r3, [r4, #12]
 800090c:	6923      	ldr	r3, [r4, #16]
 800090e:	b94b      	cbnz	r3, 8000924 <__swsetup_r+0x7c>
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800091a:	d003      	beq.n	8000924 <__swsetup_r+0x7c>
 800091c:	4621      	mov	r1, r4
 800091e:	4628      	mov	r0, r5
 8000920:	f000 fa60 	bl	8000de4 <__smakebuf_r>
 8000924:	89a0      	ldrh	r0, [r4, #12]
 8000926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800092a:	f010 0301 	ands.w	r3, r0, #1
 800092e:	d00a      	beq.n	8000946 <__swsetup_r+0x9e>
 8000930:	2300      	movs	r3, #0
 8000932:	60a3      	str	r3, [r4, #8]
 8000934:	6963      	ldr	r3, [r4, #20]
 8000936:	425b      	negs	r3, r3
 8000938:	61a3      	str	r3, [r4, #24]
 800093a:	6923      	ldr	r3, [r4, #16]
 800093c:	b943      	cbnz	r3, 8000950 <__swsetup_r+0xa8>
 800093e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000942:	d1c4      	bne.n	80008ce <__swsetup_r+0x26>
 8000944:	bd38      	pop	{r3, r4, r5, pc}
 8000946:	0781      	lsls	r1, r0, #30
 8000948:	bf58      	it	pl
 800094a:	6963      	ldrpl	r3, [r4, #20]
 800094c:	60a3      	str	r3, [r4, #8]
 800094e:	e7f4      	b.n	800093a <__swsetup_r+0x92>
 8000950:	2000      	movs	r0, #0
 8000952:	e7f7      	b.n	8000944 <__swsetup_r+0x9c>
 8000954:	20000058 	.word	0x20000058

08000958 <memset>:
 8000958:	4402      	add	r2, r0
 800095a:	4603      	mov	r3, r0
 800095c:	4293      	cmp	r3, r2
 800095e:	d100      	bne.n	8000962 <memset+0xa>
 8000960:	4770      	bx	lr
 8000962:	f803 1b01 	strb.w	r1, [r3], #1
 8000966:	e7f9      	b.n	800095c <memset+0x4>

08000968 <_close_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4d06      	ldr	r5, [pc, #24]	; (8000984 <_close_r+0x1c>)
 800096c:	2300      	movs	r3, #0
 800096e:	4604      	mov	r4, r0
 8000970:	4608      	mov	r0, r1
 8000972:	602b      	str	r3, [r5, #0]
 8000974:	f7ff fc93 	bl	800029e <_close>
 8000978:	1c43      	adds	r3, r0, #1
 800097a:	d102      	bne.n	8000982 <_close_r+0x1a>
 800097c:	682b      	ldr	r3, [r5, #0]
 800097e:	b103      	cbz	r3, 8000982 <_close_r+0x1a>
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	bd38      	pop	{r3, r4, r5, pc}
 8000984:	200001b8 	.word	0x200001b8

08000988 <_lseek_r>:
 8000988:	b538      	push	{r3, r4, r5, lr}
 800098a:	4d07      	ldr	r5, [pc, #28]	; (80009a8 <_lseek_r+0x20>)
 800098c:	4604      	mov	r4, r0
 800098e:	4608      	mov	r0, r1
 8000990:	4611      	mov	r1, r2
 8000992:	2200      	movs	r2, #0
 8000994:	602a      	str	r2, [r5, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	f7ff fca8 	bl	80002ec <_lseek>
 800099c:	1c43      	adds	r3, r0, #1
 800099e:	d102      	bne.n	80009a6 <_lseek_r+0x1e>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	b103      	cbz	r3, 80009a6 <_lseek_r+0x1e>
 80009a4:	6023      	str	r3, [r4, #0]
 80009a6:	bd38      	pop	{r3, r4, r5, pc}
 80009a8:	200001b8 	.word	0x200001b8

080009ac <_read_r>:
 80009ac:	b538      	push	{r3, r4, r5, lr}
 80009ae:	4d07      	ldr	r5, [pc, #28]	; (80009cc <_read_r+0x20>)
 80009b0:	4604      	mov	r4, r0
 80009b2:	4608      	mov	r0, r1
 80009b4:	4611      	mov	r1, r2
 80009b6:	2200      	movs	r2, #0
 80009b8:	602a      	str	r2, [r5, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	f7ff fc36 	bl	800022c <_read>
 80009c0:	1c43      	adds	r3, r0, #1
 80009c2:	d102      	bne.n	80009ca <_read_r+0x1e>
 80009c4:	682b      	ldr	r3, [r5, #0]
 80009c6:	b103      	cbz	r3, 80009ca <_read_r+0x1e>
 80009c8:	6023      	str	r3, [r4, #0]
 80009ca:	bd38      	pop	{r3, r4, r5, pc}
 80009cc:	200001b8 	.word	0x200001b8

080009d0 <_write_r>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	4d07      	ldr	r5, [pc, #28]	; (80009f0 <_write_r+0x20>)
 80009d4:	4604      	mov	r4, r0
 80009d6:	4608      	mov	r0, r1
 80009d8:	4611      	mov	r1, r2
 80009da:	2200      	movs	r2, #0
 80009dc:	602a      	str	r2, [r5, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	f7ff fc41 	bl	8000266 <_write>
 80009e4:	1c43      	adds	r3, r0, #1
 80009e6:	d102      	bne.n	80009ee <_write_r+0x1e>
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	b103      	cbz	r3, 80009ee <_write_r+0x1e>
 80009ec:	6023      	str	r3, [r4, #0]
 80009ee:	bd38      	pop	{r3, r4, r5, pc}
 80009f0:	200001b8 	.word	0x200001b8

080009f4 <__errno>:
 80009f4:	4b01      	ldr	r3, [pc, #4]	; (80009fc <__errno+0x8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000058 	.word	0x20000058

08000a00 <__libc_init_array>:
 8000a00:	b570      	push	{r4, r5, r6, lr}
 8000a02:	4d0d      	ldr	r5, [pc, #52]	; (8000a38 <__libc_init_array+0x38>)
 8000a04:	4c0d      	ldr	r4, [pc, #52]	; (8000a3c <__libc_init_array+0x3c>)
 8000a06:	1b64      	subs	r4, r4, r5
 8000a08:	10a4      	asrs	r4, r4, #2
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	42a6      	cmp	r6, r4
 8000a0e:	d109      	bne.n	8000a24 <__libc_init_array+0x24>
 8000a10:	4d0b      	ldr	r5, [pc, #44]	; (8000a40 <__libc_init_array+0x40>)
 8000a12:	4c0c      	ldr	r4, [pc, #48]	; (8000a44 <__libc_init_array+0x44>)
 8000a14:	f000 fa54 	bl	8000ec0 <_init>
 8000a18:	1b64      	subs	r4, r4, r5
 8000a1a:	10a4      	asrs	r4, r4, #2
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	42a6      	cmp	r6, r4
 8000a20:	d105      	bne.n	8000a2e <__libc_init_array+0x2e>
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a28:	4798      	blx	r3
 8000a2a:	3601      	adds	r6, #1
 8000a2c:	e7ee      	b.n	8000a0c <__libc_init_array+0xc>
 8000a2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a32:	4798      	blx	r3
 8000a34:	3601      	adds	r6, #1
 8000a36:	e7f2      	b.n	8000a1e <__libc_init_array+0x1e>
 8000a38:	08000eec 	.word	0x08000eec
 8000a3c:	08000eec 	.word	0x08000eec
 8000a40:	08000eec 	.word	0x08000eec
 8000a44:	08000ef0 	.word	0x08000ef0

08000a48 <__retarget_lock_acquire_recursive>:
 8000a48:	4770      	bx	lr

08000a4a <__retarget_lock_release_recursive>:
 8000a4a:	4770      	bx	lr

08000a4c <_free_r>:
 8000a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d044      	beq.n	8000adc <_free_r+0x90>
 8000a52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a56:	9001      	str	r0, [sp, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f1a1 0404 	sub.w	r4, r1, #4
 8000a5e:	bfb8      	it	lt
 8000a60:	18e4      	addlt	r4, r4, r3
 8000a62:	f000 f8df 	bl	8000c24 <__malloc_lock>
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <_free_r+0x94>)
 8000a68:	9801      	ldr	r0, [sp, #4]
 8000a6a:	6813      	ldr	r3, [r2, #0]
 8000a6c:	b933      	cbnz	r3, 8000a7c <_free_r+0x30>
 8000a6e:	6063      	str	r3, [r4, #4]
 8000a70:	6014      	str	r4, [r2, #0]
 8000a72:	b003      	add	sp, #12
 8000a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a78:	f000 b8da 	b.w	8000c30 <__malloc_unlock>
 8000a7c:	42a3      	cmp	r3, r4
 8000a7e:	d908      	bls.n	8000a92 <_free_r+0x46>
 8000a80:	6825      	ldr	r5, [r4, #0]
 8000a82:	1961      	adds	r1, r4, r5
 8000a84:	428b      	cmp	r3, r1
 8000a86:	bf01      	itttt	eq
 8000a88:	6819      	ldreq	r1, [r3, #0]
 8000a8a:	685b      	ldreq	r3, [r3, #4]
 8000a8c:	1949      	addeq	r1, r1, r5
 8000a8e:	6021      	streq	r1, [r4, #0]
 8000a90:	e7ed      	b.n	8000a6e <_free_r+0x22>
 8000a92:	461a      	mov	r2, r3
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	b10b      	cbz	r3, 8000a9c <_free_r+0x50>
 8000a98:	42a3      	cmp	r3, r4
 8000a9a:	d9fa      	bls.n	8000a92 <_free_r+0x46>
 8000a9c:	6811      	ldr	r1, [r2, #0]
 8000a9e:	1855      	adds	r5, r2, r1
 8000aa0:	42a5      	cmp	r5, r4
 8000aa2:	d10b      	bne.n	8000abc <_free_r+0x70>
 8000aa4:	6824      	ldr	r4, [r4, #0]
 8000aa6:	4421      	add	r1, r4
 8000aa8:	1854      	adds	r4, r2, r1
 8000aaa:	42a3      	cmp	r3, r4
 8000aac:	6011      	str	r1, [r2, #0]
 8000aae:	d1e0      	bne.n	8000a72 <_free_r+0x26>
 8000ab0:	681c      	ldr	r4, [r3, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	6053      	str	r3, [r2, #4]
 8000ab6:	440c      	add	r4, r1
 8000ab8:	6014      	str	r4, [r2, #0]
 8000aba:	e7da      	b.n	8000a72 <_free_r+0x26>
 8000abc:	d902      	bls.n	8000ac4 <_free_r+0x78>
 8000abe:	230c      	movs	r3, #12
 8000ac0:	6003      	str	r3, [r0, #0]
 8000ac2:	e7d6      	b.n	8000a72 <_free_r+0x26>
 8000ac4:	6825      	ldr	r5, [r4, #0]
 8000ac6:	1961      	adds	r1, r4, r5
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	bf04      	itt	eq
 8000acc:	6819      	ldreq	r1, [r3, #0]
 8000ace:	685b      	ldreq	r3, [r3, #4]
 8000ad0:	6063      	str	r3, [r4, #4]
 8000ad2:	bf04      	itt	eq
 8000ad4:	1949      	addeq	r1, r1, r5
 8000ad6:	6021      	streq	r1, [r4, #0]
 8000ad8:	6054      	str	r4, [r2, #4]
 8000ada:	e7ca      	b.n	8000a72 <_free_r+0x26>
 8000adc:	b003      	add	sp, #12
 8000ade:	bd30      	pop	{r4, r5, pc}
 8000ae0:	200001c0 	.word	0x200001c0

08000ae4 <sbrk_aligned>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4e0e      	ldr	r6, [pc, #56]	; (8000b20 <sbrk_aligned+0x3c>)
 8000ae8:	460c      	mov	r4, r1
 8000aea:	6831      	ldr	r1, [r6, #0]
 8000aec:	4605      	mov	r5, r0
 8000aee:	b911      	cbnz	r1, 8000af6 <sbrk_aligned+0x12>
 8000af0:	f000 f9d6 	bl	8000ea0 <_sbrk_r>
 8000af4:	6030      	str	r0, [r6, #0]
 8000af6:	4621      	mov	r1, r4
 8000af8:	4628      	mov	r0, r5
 8000afa:	f000 f9d1 	bl	8000ea0 <_sbrk_r>
 8000afe:	1c43      	adds	r3, r0, #1
 8000b00:	d00a      	beq.n	8000b18 <sbrk_aligned+0x34>
 8000b02:	1cc4      	adds	r4, r0, #3
 8000b04:	f024 0403 	bic.w	r4, r4, #3
 8000b08:	42a0      	cmp	r0, r4
 8000b0a:	d007      	beq.n	8000b1c <sbrk_aligned+0x38>
 8000b0c:	1a21      	subs	r1, r4, r0
 8000b0e:	4628      	mov	r0, r5
 8000b10:	f000 f9c6 	bl	8000ea0 <_sbrk_r>
 8000b14:	3001      	adds	r0, #1
 8000b16:	d101      	bne.n	8000b1c <sbrk_aligned+0x38>
 8000b18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	200001c4 	.word	0x200001c4

08000b24 <_malloc_r>:
 8000b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b28:	1ccd      	adds	r5, r1, #3
 8000b2a:	f025 0503 	bic.w	r5, r5, #3
 8000b2e:	3508      	adds	r5, #8
 8000b30:	2d0c      	cmp	r5, #12
 8000b32:	bf38      	it	cc
 8000b34:	250c      	movcc	r5, #12
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	4607      	mov	r7, r0
 8000b3a:	db01      	blt.n	8000b40 <_malloc_r+0x1c>
 8000b3c:	42a9      	cmp	r1, r5
 8000b3e:	d905      	bls.n	8000b4c <_malloc_r+0x28>
 8000b40:	230c      	movs	r3, #12
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	2600      	movs	r6, #0
 8000b46:	4630      	mov	r0, r6
 8000b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c20 <_malloc_r+0xfc>
 8000b50:	f000 f868 	bl	8000c24 <__malloc_lock>
 8000b54:	f8d8 3000 	ldr.w	r3, [r8]
 8000b58:	461c      	mov	r4, r3
 8000b5a:	bb5c      	cbnz	r4, 8000bb4 <_malloc_r+0x90>
 8000b5c:	4629      	mov	r1, r5
 8000b5e:	4638      	mov	r0, r7
 8000b60:	f7ff ffc0 	bl	8000ae4 <sbrk_aligned>
 8000b64:	1c43      	adds	r3, r0, #1
 8000b66:	4604      	mov	r4, r0
 8000b68:	d155      	bne.n	8000c16 <_malloc_r+0xf2>
 8000b6a:	f8d8 4000 	ldr.w	r4, [r8]
 8000b6e:	4626      	mov	r6, r4
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d145      	bne.n	8000c00 <_malloc_r+0xdc>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d048      	beq.n	8000c0a <_malloc_r+0xe6>
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	4631      	mov	r1, r6
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	eb04 0903 	add.w	r9, r4, r3
 8000b82:	f000 f98d 	bl	8000ea0 <_sbrk_r>
 8000b86:	4581      	cmp	r9, r0
 8000b88:	d13f      	bne.n	8000c0a <_malloc_r+0xe6>
 8000b8a:	6821      	ldr	r1, [r4, #0]
 8000b8c:	1a6d      	subs	r5, r5, r1
 8000b8e:	4629      	mov	r1, r5
 8000b90:	4638      	mov	r0, r7
 8000b92:	f7ff ffa7 	bl	8000ae4 <sbrk_aligned>
 8000b96:	3001      	adds	r0, #1
 8000b98:	d037      	beq.n	8000c0a <_malloc_r+0xe6>
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	442b      	add	r3, r5
 8000b9e:	6023      	str	r3, [r4, #0]
 8000ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d038      	beq.n	8000c1a <_malloc_r+0xf6>
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	42a2      	cmp	r2, r4
 8000bac:	d12b      	bne.n	8000c06 <_malloc_r+0xe2>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	e00f      	b.n	8000bd4 <_malloc_r+0xb0>
 8000bb4:	6822      	ldr	r2, [r4, #0]
 8000bb6:	1b52      	subs	r2, r2, r5
 8000bb8:	d41f      	bmi.n	8000bfa <_malloc_r+0xd6>
 8000bba:	2a0b      	cmp	r2, #11
 8000bbc:	d917      	bls.n	8000bee <_malloc_r+0xca>
 8000bbe:	1961      	adds	r1, r4, r5
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	6025      	str	r5, [r4, #0]
 8000bc4:	bf18      	it	ne
 8000bc6:	6059      	strne	r1, [r3, #4]
 8000bc8:	6863      	ldr	r3, [r4, #4]
 8000bca:	bf08      	it	eq
 8000bcc:	f8c8 1000 	streq.w	r1, [r8]
 8000bd0:	5162      	str	r2, [r4, r5]
 8000bd2:	604b      	str	r3, [r1, #4]
 8000bd4:	4638      	mov	r0, r7
 8000bd6:	f104 060b 	add.w	r6, r4, #11
 8000bda:	f000 f829 	bl	8000c30 <__malloc_unlock>
 8000bde:	f026 0607 	bic.w	r6, r6, #7
 8000be2:	1d23      	adds	r3, r4, #4
 8000be4:	1af2      	subs	r2, r6, r3
 8000be6:	d0ae      	beq.n	8000b46 <_malloc_r+0x22>
 8000be8:	1b9b      	subs	r3, r3, r6
 8000bea:	50a3      	str	r3, [r4, r2]
 8000bec:	e7ab      	b.n	8000b46 <_malloc_r+0x22>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	6862      	ldr	r2, [r4, #4]
 8000bf2:	d1dd      	bne.n	8000bb0 <_malloc_r+0x8c>
 8000bf4:	f8c8 2000 	str.w	r2, [r8]
 8000bf8:	e7ec      	b.n	8000bd4 <_malloc_r+0xb0>
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	6864      	ldr	r4, [r4, #4]
 8000bfe:	e7ac      	b.n	8000b5a <_malloc_r+0x36>
 8000c00:	4634      	mov	r4, r6
 8000c02:	6876      	ldr	r6, [r6, #4]
 8000c04:	e7b4      	b.n	8000b70 <_malloc_r+0x4c>
 8000c06:	4613      	mov	r3, r2
 8000c08:	e7cc      	b.n	8000ba4 <_malloc_r+0x80>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f000 f80e 	bl	8000c30 <__malloc_unlock>
 8000c14:	e797      	b.n	8000b46 <_malloc_r+0x22>
 8000c16:	6025      	str	r5, [r4, #0]
 8000c18:	e7dc      	b.n	8000bd4 <_malloc_r+0xb0>
 8000c1a:	605b      	str	r3, [r3, #4]
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	bf00      	nop
 8000c20:	200001c0 	.word	0x200001c0

08000c24 <__malloc_lock>:
 8000c24:	4801      	ldr	r0, [pc, #4]	; (8000c2c <__malloc_lock+0x8>)
 8000c26:	f7ff bf0f 	b.w	8000a48 <__retarget_lock_acquire_recursive>
 8000c2a:	bf00      	nop
 8000c2c:	200001bc 	.word	0x200001bc

08000c30 <__malloc_unlock>:
 8000c30:	4801      	ldr	r0, [pc, #4]	; (8000c38 <__malloc_unlock+0x8>)
 8000c32:	f7ff bf0a 	b.w	8000a4a <__retarget_lock_release_recursive>
 8000c36:	bf00      	nop
 8000c38:	200001bc 	.word	0x200001bc

08000c3c <__sflush_r>:
 8000c3c:	898a      	ldrh	r2, [r1, #12]
 8000c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	0710      	lsls	r0, r2, #28
 8000c46:	460c      	mov	r4, r1
 8000c48:	d458      	bmi.n	8000cfc <__sflush_r+0xc0>
 8000c4a:	684b      	ldr	r3, [r1, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dc05      	bgt.n	8000c5c <__sflush_r+0x20>
 8000c50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	dc02      	bgt.n	8000c5c <__sflush_r+0x20>
 8000c56:	2000      	movs	r0, #0
 8000c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d0f9      	beq.n	8000c56 <__sflush_r+0x1a>
 8000c62:	2300      	movs	r3, #0
 8000c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c68:	682f      	ldr	r7, [r5, #0]
 8000c6a:	6a21      	ldr	r1, [r4, #32]
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	d032      	beq.n	8000cd6 <__sflush_r+0x9a>
 8000c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c72:	89a3      	ldrh	r3, [r4, #12]
 8000c74:	075a      	lsls	r2, r3, #29
 8000c76:	d505      	bpl.n	8000c84 <__sflush_r+0x48>
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	1ac0      	subs	r0, r0, r3
 8000c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c7e:	b10b      	cbz	r3, 8000c84 <__sflush_r+0x48>
 8000c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c82:	1ac0      	subs	r0, r0, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	4602      	mov	r2, r0
 8000c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c8a:	6a21      	ldr	r1, [r4, #32]
 8000c8c:	4628      	mov	r0, r5
 8000c8e:	47b0      	blx	r6
 8000c90:	1c43      	adds	r3, r0, #1
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	d106      	bne.n	8000ca4 <__sflush_r+0x68>
 8000c96:	6829      	ldr	r1, [r5, #0]
 8000c98:	291d      	cmp	r1, #29
 8000c9a:	d82b      	bhi.n	8000cf4 <__sflush_r+0xb8>
 8000c9c:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <__sflush_r+0x108>)
 8000c9e:	410a      	asrs	r2, r1
 8000ca0:	07d6      	lsls	r6, r2, #31
 8000ca2:	d427      	bmi.n	8000cf4 <__sflush_r+0xb8>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6062      	str	r2, [r4, #4]
 8000ca8:	04d9      	lsls	r1, r3, #19
 8000caa:	6922      	ldr	r2, [r4, #16]
 8000cac:	6022      	str	r2, [r4, #0]
 8000cae:	d504      	bpl.n	8000cba <__sflush_r+0x7e>
 8000cb0:	1c42      	adds	r2, r0, #1
 8000cb2:	d101      	bne.n	8000cb8 <__sflush_r+0x7c>
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	b903      	cbnz	r3, 8000cba <__sflush_r+0x7e>
 8000cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8000cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cbc:	602f      	str	r7, [r5, #0]
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d0c9      	beq.n	8000c56 <__sflush_r+0x1a>
 8000cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d002      	beq.n	8000cd0 <__sflush_r+0x94>
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f7ff febe 	bl	8000a4c <_free_r>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8000cd4:	e7c0      	b.n	8000c58 <__sflush_r+0x1c>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4628      	mov	r0, r5
 8000cda:	47b0      	blx	r6
 8000cdc:	1c41      	adds	r1, r0, #1
 8000cde:	d1c8      	bne.n	8000c72 <__sflush_r+0x36>
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0c5      	beq.n	8000c72 <__sflush_r+0x36>
 8000ce6:	2b1d      	cmp	r3, #29
 8000ce8:	d001      	beq.n	8000cee <__sflush_r+0xb2>
 8000cea:	2b16      	cmp	r3, #22
 8000cec:	d101      	bne.n	8000cf2 <__sflush_r+0xb6>
 8000cee:	602f      	str	r7, [r5, #0]
 8000cf0:	e7b1      	b.n	8000c56 <__sflush_r+0x1a>
 8000cf2:	89a3      	ldrh	r3, [r4, #12]
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	81a3      	strh	r3, [r4, #12]
 8000cfa:	e7ad      	b.n	8000c58 <__sflush_r+0x1c>
 8000cfc:	690f      	ldr	r7, [r1, #16]
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d0a9      	beq.n	8000c56 <__sflush_r+0x1a>
 8000d02:	0793      	lsls	r3, r2, #30
 8000d04:	680e      	ldr	r6, [r1, #0]
 8000d06:	bf08      	it	eq
 8000d08:	694b      	ldreq	r3, [r1, #20]
 8000d0a:	600f      	str	r7, [r1, #0]
 8000d0c:	bf18      	it	ne
 8000d0e:	2300      	movne	r3, #0
 8000d10:	eba6 0807 	sub.w	r8, r6, r7
 8000d14:	608b      	str	r3, [r1, #8]
 8000d16:	f1b8 0f00 	cmp.w	r8, #0
 8000d1a:	dd9c      	ble.n	8000c56 <__sflush_r+0x1a>
 8000d1c:	6a21      	ldr	r1, [r4, #32]
 8000d1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d20:	4643      	mov	r3, r8
 8000d22:	463a      	mov	r2, r7
 8000d24:	4628      	mov	r0, r5
 8000d26:	47b0      	blx	r6
 8000d28:	2800      	cmp	r0, #0
 8000d2a:	dc06      	bgt.n	8000d3a <__sflush_r+0xfe>
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d32:	81a3      	strh	r3, [r4, #12]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d38:	e78e      	b.n	8000c58 <__sflush_r+0x1c>
 8000d3a:	4407      	add	r7, r0
 8000d3c:	eba8 0800 	sub.w	r8, r8, r0
 8000d40:	e7e9      	b.n	8000d16 <__sflush_r+0xda>
 8000d42:	bf00      	nop
 8000d44:	dfbffffe 	.word	0xdfbffffe

08000d48 <_fflush_r>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	690b      	ldr	r3, [r1, #16]
 8000d4c:	4605      	mov	r5, r0
 8000d4e:	460c      	mov	r4, r1
 8000d50:	b913      	cbnz	r3, 8000d58 <_fflush_r+0x10>
 8000d52:	2500      	movs	r5, #0
 8000d54:	4628      	mov	r0, r5
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	b118      	cbz	r0, 8000d62 <_fflush_r+0x1a>
 8000d5a:	6a03      	ldr	r3, [r0, #32]
 8000d5c:	b90b      	cbnz	r3, 8000d62 <_fflush_r+0x1a>
 8000d5e:	f7ff fc91 	bl	8000684 <__sinit>
 8000d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f3      	beq.n	8000d52 <_fflush_r+0xa>
 8000d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d6c:	07d0      	lsls	r0, r2, #31
 8000d6e:	d404      	bmi.n	8000d7a <_fflush_r+0x32>
 8000d70:	0599      	lsls	r1, r3, #22
 8000d72:	d402      	bmi.n	8000d7a <_fflush_r+0x32>
 8000d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d76:	f7ff fe67 	bl	8000a48 <__retarget_lock_acquire_recursive>
 8000d7a:	4628      	mov	r0, r5
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	f7ff ff5d 	bl	8000c3c <__sflush_r>
 8000d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d84:	07da      	lsls	r2, r3, #31
 8000d86:	4605      	mov	r5, r0
 8000d88:	d4e4      	bmi.n	8000d54 <_fflush_r+0xc>
 8000d8a:	89a3      	ldrh	r3, [r4, #12]
 8000d8c:	059b      	lsls	r3, r3, #22
 8000d8e:	d4e1      	bmi.n	8000d54 <_fflush_r+0xc>
 8000d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d92:	f7ff fe5a 	bl	8000a4a <__retarget_lock_release_recursive>
 8000d96:	e7dd      	b.n	8000d54 <_fflush_r+0xc>

08000d98 <__swhatbuf_r>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000da0:	2900      	cmp	r1, #0
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	4615      	mov	r5, r2
 8000da6:	461e      	mov	r6, r3
 8000da8:	da0d      	bge.n	8000dc6 <__swhatbuf_r+0x2e>
 8000daa:	89a3      	ldrh	r3, [r4, #12]
 8000dac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000db0:	f04f 0100 	mov.w	r1, #0
 8000db4:	bf0c      	ite	eq
 8000db6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000dba:	2340      	movne	r3, #64	; 0x40
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	6031      	str	r1, [r6, #0]
 8000dc0:	602b      	str	r3, [r5, #0]
 8000dc2:	b016      	add	sp, #88	; 0x58
 8000dc4:	bd70      	pop	{r4, r5, r6, pc}
 8000dc6:	466a      	mov	r2, sp
 8000dc8:	f000 f848 	bl	8000e5c <_fstat_r>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	dbec      	blt.n	8000daa <__swhatbuf_r+0x12>
 8000dd0:	9901      	ldr	r1, [sp, #4]
 8000dd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000dd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000dda:	4259      	negs	r1, r3
 8000ddc:	4159      	adcs	r1, r3
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	e7eb      	b.n	8000dbc <__swhatbuf_r+0x24>

08000de4 <__smakebuf_r>:
 8000de4:	898b      	ldrh	r3, [r1, #12]
 8000de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de8:	079d      	lsls	r5, r3, #30
 8000dea:	4606      	mov	r6, r0
 8000dec:	460c      	mov	r4, r1
 8000dee:	d507      	bpl.n	8000e00 <__smakebuf_r+0x1c>
 8000df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	6123      	str	r3, [r4, #16]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	6163      	str	r3, [r4, #20]
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd70      	pop	{r4, r5, r6, pc}
 8000e00:	ab01      	add	r3, sp, #4
 8000e02:	466a      	mov	r2, sp
 8000e04:	f7ff ffc8 	bl	8000d98 <__swhatbuf_r>
 8000e08:	9900      	ldr	r1, [sp, #0]
 8000e0a:	4605      	mov	r5, r0
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f7ff fe89 	bl	8000b24 <_malloc_r>
 8000e12:	b948      	cbnz	r0, 8000e28 <__smakebuf_r+0x44>
 8000e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e18:	059a      	lsls	r2, r3, #22
 8000e1a:	d4ef      	bmi.n	8000dfc <__smakebuf_r+0x18>
 8000e1c:	f023 0303 	bic.w	r3, r3, #3
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	81a3      	strh	r3, [r4, #12]
 8000e26:	e7e3      	b.n	8000df0 <__smakebuf_r+0xc>
 8000e28:	89a3      	ldrh	r3, [r4, #12]
 8000e2a:	6020      	str	r0, [r4, #0]
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	81a3      	strh	r3, [r4, #12]
 8000e32:	9b00      	ldr	r3, [sp, #0]
 8000e34:	6163      	str	r3, [r4, #20]
 8000e36:	9b01      	ldr	r3, [sp, #4]
 8000e38:	6120      	str	r0, [r4, #16]
 8000e3a:	b15b      	cbz	r3, 8000e54 <__smakebuf_r+0x70>
 8000e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e40:	4630      	mov	r0, r6
 8000e42:	f000 f81d 	bl	8000e80 <_isatty_r>
 8000e46:	b128      	cbz	r0, 8000e54 <__smakebuf_r+0x70>
 8000e48:	89a3      	ldrh	r3, [r4, #12]
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	431d      	orrs	r5, r3
 8000e58:	81a5      	strh	r5, [r4, #12]
 8000e5a:	e7cf      	b.n	8000dfc <__smakebuf_r+0x18>

08000e5c <_fstat_r>:
 8000e5c:	b538      	push	{r3, r4, r5, lr}
 8000e5e:	4d07      	ldr	r5, [pc, #28]	; (8000e7c <_fstat_r+0x20>)
 8000e60:	2300      	movs	r3, #0
 8000e62:	4604      	mov	r4, r0
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	f7ff fa24 	bl	80002b6 <_fstat>
 8000e6e:	1c43      	adds	r3, r0, #1
 8000e70:	d102      	bne.n	8000e78 <_fstat_r+0x1c>
 8000e72:	682b      	ldr	r3, [r5, #0]
 8000e74:	b103      	cbz	r3, 8000e78 <_fstat_r+0x1c>
 8000e76:	6023      	str	r3, [r4, #0]
 8000e78:	bd38      	pop	{r3, r4, r5, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001b8 	.word	0x200001b8

08000e80 <_isatty_r>:
 8000e80:	b538      	push	{r3, r4, r5, lr}
 8000e82:	4d06      	ldr	r5, [pc, #24]	; (8000e9c <_isatty_r+0x1c>)
 8000e84:	2300      	movs	r3, #0
 8000e86:	4604      	mov	r4, r0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	602b      	str	r3, [r5, #0]
 8000e8c:	f7ff fa23 	bl	80002d6 <_isatty>
 8000e90:	1c43      	adds	r3, r0, #1
 8000e92:	d102      	bne.n	8000e9a <_isatty_r+0x1a>
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	b103      	cbz	r3, 8000e9a <_isatty_r+0x1a>
 8000e98:	6023      	str	r3, [r4, #0]
 8000e9a:	bd38      	pop	{r3, r4, r5, pc}
 8000e9c:	200001b8 	.word	0x200001b8

08000ea0 <_sbrk_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4d06      	ldr	r5, [pc, #24]	; (8000ebc <_sbrk_r+0x1c>)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	f7ff fa2c 	bl	8000308 <_sbrk>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	d102      	bne.n	8000eba <_sbrk_r+0x1a>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	b103      	cbz	r3, 8000eba <_sbrk_r+0x1a>
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	200001b8 	.word	0x200001b8

08000ec0 <_init>:
 8000ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec2:	bf00      	nop
 8000ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec6:	bc08      	pop	{r3}
 8000ec8:	469e      	mov	lr, r3
 8000eca:	4770      	bx	lr

08000ecc <_fini>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr
